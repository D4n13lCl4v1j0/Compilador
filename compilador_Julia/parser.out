Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    COMMENT
    CONTINUE
    DOUBLEPERCENT
    IMPORT
    INCLUDE
    MACRO
    MUT
    NOT
    PRINTLN
    REQUIRE
    STRUCT
    SYMBOL

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> statement_list
Rule 3     block -> empty
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement statement_list
Rule 6     statement_list -> statement_list statement
Rule 7     statement -> identifierDecl
Rule 8     statement -> array_estatement_julia
Rule 9     statement -> if_statement
Rule 10    statement -> elseif_block
Rule 11    statement -> else_statement
Rule 12    statement -> while_statement
Rule 13    statement -> for_statement
Rule 14    statement -> array_estatement
Rule 15    statement -> function_definition
Rule 16    statement -> statement_function
Rule 17    statement -> statement_call_function
Rule 18    statement -> statement_function_julia
Rule 19    statement -> statement_do
Rule 20    statement -> statement_try
Rule 21    statement -> statement_module
Rule 22    statement -> statement_begin
Rule 23    statement -> statement_using
Rule 24    identifierDecl -> IDENTIFIER assignment_number expression_number
Rule 25    identifierDecl -> IDENTIFIER assignment expression_number
Rule 26    identifierDecl -> IDENTIFIER assignment expression_string
Rule 27    identifierDecl -> IDENTIFIER assignment expression_boolean
Rule 28    identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
Rule 29    identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
Rule 30    identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
Rule 31    identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
Rule 32    identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
Rule 33    identifierDecl -> identifierList assignment_number expression_number_list
Rule 34    identifierDecl -> identifierList assignment expression_number_list
Rule 35    expression_number_list -> expression_number
Rule 36    expression_number_list -> expression_number_list COMMA expression_number
Rule 37    expression_string_list -> expression_string
Rule 38    expression_string_list -> expression_string_list COMMA expression_string
Rule 39    expression_boolean_list -> expression_boolean
Rule 40    expression_boolean_list -> expression_boolean_list COMMA expression_boolean
Rule 41    identifierDecl -> identifierList assignment_number expression_string_list
Rule 42    identifierDecl -> identifierList assignment expression_boolean_list
Rule 43    identifierList -> IDENTIFIER
Rule 44    identifierList -> identifierList COMMA IDENTIFIER
Rule 45    array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
Rule 46    array_values -> array_values COMMA NUMBER
Rule 47    array_values -> NUMBER
Rule 48    array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
Rule 49    array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
Rule 50    array_content_julia -> values
Rule 51    array_content_julia -> values NEWLINE
Rule 52    values -> NUMBER
Rule 53    function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
Rule 54    statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
Rule 55    statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
Rule 56    statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
Rule 57    statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
Rule 58    statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
Rule 59    statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
Rule 60    statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
Rule 61    argument_list -> expression
Rule 62    argument_list -> expression COMMA argument_list
Rule 63    argument_list -> statement_do
Rule 64    argument_list -> empty
Rule 65    if_statement -> IF expression_boolean statement_list END
Rule 66    if_statement -> IF expression_boolean statement_list ELSE statement_list END
Rule 67    if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
Rule 68    if_statement -> IF expression_boolean statement_list elseif_block END
Rule 69    elseif_block -> ELSEIF expression_boolean statement_list END
Rule 70    elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END
Rule 71    elseif_block -> ELSEIF expression_boolean statement_list elseif_block END
Rule 72    else_statement -> ELSE statement_list END
Rule 73    else_statement -> empty
Rule 74    assignment -> IDENTIFIER ASSIGN expression
Rule 75    while_statement -> WHILE expression_boolean statement_list END
Rule 76    while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END
Rule 77    for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
Rule 78    for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
Rule 79    for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
Rule 80    identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
Rule 81    identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
Rule 82    identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
Rule 83    array_elements -> expression_number
Rule 84    array_elements -> expression_string
Rule 85    array_elements -> expression_boolean
Rule 86    array_elements -> empty
Rule 87    array_elements -> array_elements COMMA expression_number
Rule 88    array_elements -> expression_number SEMICOLON expression_number
Rule 89    array_elements -> array_elements COMMA expression_string
Rule 90    array_elements -> array_elements COMMA expression_boolean
Rule 91    empty -> <empty>
Rule 92    statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
Rule 93    statement_do -> DO statement_list END
Rule 94    statement_begin -> BEGIN statement_list END
Rule 95    statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END
Rule 96    statement_module -> MODULE IDENTIFIER statement_list END
Rule 97    statement_using -> USING IDENTIFIER
Rule 98    statement_using -> USING IDENTIFIER AS IDENTIFIER
Rule 99    parameters -> IDENTIFIER
Rule 100   expression -> expression_number
Rule 101   expression -> expression_string
Rule 102   expression -> expression_boolean
Rule 103   expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN
Rule 104   expression_boolean -> IDENTIFIER
Rule 105   expression_boolean -> BOOLEAN
Rule 106   expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
Rule 107   expression_boolean -> expression_boolean relation expression_boolean
Rule 108   expression_boolean -> ADMIRATION expression_boolean
Rule 109   expression_boolean -> expression_string relation expression_string
Rule 110   expression_boolean -> expression_number relation expression_number
Rule 111   assignment -> ASSIGN
Rule 112   assignment_number -> SUMASIGN
Rule 113   assignment_number -> MINASIGN
Rule 114   assignment_number -> MULTASIGN
Rule 115   assignment_number -> DIVASIGN
Rule 116   assignment_number -> MODULEASIGN
Rule 117   assignment_number -> EXPONENTASIGN
Rule 118   expression_number -> IDENTIFIER
Rule 119   expression_number -> NUMBER
Rule 120   expression_number -> expression_number operator_arithmetic expression_number
Rule 121   expression_number -> expression_number DOUBLEDOT expression_number
Rule 122   expression_number -> expression_number DOT expression_number
Rule 123   expression_number -> MINUS expression_number
Rule 124   expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
Rule 125   expression_number -> LEFT_PAREN expression_number RIGHT_PAREN
Rule 126   expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET
Rule 127   expression_string -> STRING
Rule 128   expression_string -> LEFT_PAREN expression_string RIGHT_PAREN
Rule 129   expression_string -> expression_string MULTIPLY expression_number
Rule 130   expression_string -> expression_string MULTIPLY expression_string
Rule 131   operator_arithmetic -> PLUS
Rule 132   operator_arithmetic -> MINUS
Rule 133   operator_arithmetic -> MULTIPLY
Rule 134   operator_arithmetic -> DIVIDE
Rule 135   operator_arithmetic -> PERCENT
Rule 136   operator_arithmetic -> SQUAREROOT
Rule 137   operator_arithmetic -> EXPONENT
Rule 138   relation -> LESS_THAN
Rule 139   relation -> LESS_THAN_OR_EQUAL
Rule 140   relation -> GREATER_THAN
Rule 141   relation -> GREATER_THAN_OR_EQUAL
Rule 142   relation -> EQUALS
Rule 143   relation -> NOT_EQUALS
Rule 144   relation -> AND
Rule 145   relation -> ANDSYM
Rule 146   relation -> OR
Rule 147   relation -> ORSYM

Terminals, with rules where they appear

ADMIRATION           : 108
AND                  : 144
ANDSYM               : 145
ARROW                : 56
AS                   : 98
ASSIGN               : 30 31 32 45 56 74 111
BEGIN                : 94
BOOLEAN              : 105
BREAK                : 
CATCH                : 95
COMMA                : 29 32 36 38 40 44 46 48 49 62 81 87 89 90
COMMENT              : 
CONTINUE             : 
DIVASIGN             : 115
DIVIDE               : 134
DO                   : 93
DOT                  : 59 122
DOUBLEDOT            : 48 49 77 78 121
DOUBLEPERCENT        : 
ELSE                 : 66 67 70 72
ELSEIF               : 69 70 71
END                  : 53 54 55 65 66 67 68 69 70 71 72 75 76 77 78 79 93 94 95 96
EQUALS               : 142
EXPONENT             : 137
EXPONENTASIGN        : 117
FOR                  : 77 78 79
FUNCTION             : 53 54 55
FUNCTIONS_JULIA      : 28 29 30 31 32 32 32 48 49 49 57 58 59 60
GREATER_THAN         : 140
GREATER_THAN_OR_EQUAL : 141
IDENTIFIER           : 24 25 26 27 28 28 29 29 29 30 31 43 44 45 48 49 53 54 55 56 60 74 76 77 78 79 80 81 82 92 95 96 97 98 98 99 104 106 118 124
IF                   : 65 66 67 68
IMPORT               : 
IN                   : 77 78
INCLUDE              : 
LEFT_BRACE           : 48 49
LEFT_BRACKET         : 31 32 45 79 80 81 82 126
LEFT_PAREN           : 28 29 32 53 54 55 56 57 58 59 60 92 103 106 124 125 128
LESS_THAN            : 138
LESS_THAN_OR_EQUAL   : 139
MACRO                : 
MINASIGN             : 113
MINUS                : 49 123 132
MODULE               : 96
MODULEASIGN          : 116
MULTASIGN            : 114
MULTIPLY             : 129 130 133
MUT                  : 
NEWLINE              : 51 82
NOT                  : 
NOT_EQUALS           : 143
NUMBER               : 32 46 47 48 49 52 58 59 59 76 119
OR                   : 146
ORSYM                : 147
PERCENT              : 135
PLUS                 : 131
PRINTLN              : 
REQUIRE              : 
RETURN               : 55
RIGHT_BRACE          : 48 49
RIGHT_BRACKET        : 31 32 45 79 80 81 82 126
RIGHT_PAREN          : 28 29 32 53 54 55 56 57 58 59 60 92 103 106 124 125 128
SEMICOLON            : 88
SQUAREROOT           : 136
STRING               : 127
STRUCT               : 
SUMASIGN             : 112
SYMBOL               : 
TRY                  : 95
USING                : 97 98
WHILE                : 75 76
error                : 

Nonterminals, with rules where they appear

argument_list        : 53 54 55 56 57 62 92 106 124
array_content_julia  : 48 49
array_elements       : 31 32 79 80 81 82 87 89 90
array_estatement     : 14
array_estatement_julia : 8 31 32
array_values         : 45 46
assignment           : 25 26 27 28 29 34 42 80 81 82
assignment_number    : 24 33 41
block                : 1
else_statement       : 11
elseif_block         : 10 67 68 71
empty                : 3 64 73 86
expression           : 55 56 61 62 74 77
expression_boolean   : 27 39 40 65 66 67 68 69 70 71 75 85 90 102 103 107 107 108
expression_boolean_list : 40 42
expression_number    : 24 25 35 36 48 77 78 78 83 87 88 88 100 110 110 120 120 121 121 122 122 123 125 126 129
expression_number_list : 33 34 36
expression_string    : 26 37 38 84 89 101 109 109 128 129 130 130
expression_string_list : 38 41
for_statement        : 13
function_definition  : 15
identifierDecl       : 7 81 82
identifierList       : 33 34 41 42 44
if_statement         : 9
operator_arithmetic  : 120
parameters           : 
program              : 0
relation             : 30 31 32 76 107 109 110
statement            : 4 5 6
statement_begin      : 22
statement_call_function : 17
statement_do         : 19 63
statement_function   : 16
statement_function_julia : 18 30
statement_list       : 2 5 6 53 54 55 65 66 66 67 67 67 68 69 70 70 71 72 75 76 77 78 79 93 94 95 95 96
statement_module     : 21
statement_try        : 20
statement_using      : 23
values               : 49 50 51
while_statement      : 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . statement_list
    (3) block -> . empty
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (91) empty -> .
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    $end            reduce using rule 91 (empty -> .)
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    program                        shift and go to state 1
    block                          shift and go to state 2
    statement_list                 shift and go to state 3
    empty                          shift and go to state 4
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> statement_list .
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (block -> statement_list .)
    $end            reduce using rule 2 (block -> statement_list .)
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]
  ! $end            [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 4

    (3) block -> empty .
    (73) else_statement -> empty .

  ! reduce/reduce conflict for $end resolved using rule 3 (block -> empty .)
    $end            reduce using rule 3 (block -> empty .)
    IDENTIFIER      reduce using rule 73 (else_statement -> empty .)
    FUNCTIONS_JULIA reduce using rule 73 (else_statement -> empty .)
    IF              reduce using rule 73 (else_statement -> empty .)
    ELSEIF          reduce using rule 73 (else_statement -> empty .)
    ELSE            reduce using rule 73 (else_statement -> empty .)
    WHILE           reduce using rule 73 (else_statement -> empty .)
    FOR             reduce using rule 73 (else_statement -> empty .)
    FUNCTION        reduce using rule 73 (else_statement -> empty .)
    DO              reduce using rule 73 (else_statement -> empty .)
    TRY             reduce using rule 73 (else_statement -> empty .)
    MODULE          reduce using rule 73 (else_statement -> empty .)
    BEGIN           reduce using rule 73 (else_statement -> empty .)
    USING           reduce using rule 73 (else_statement -> empty .)
    NUMBER          reduce using rule 73 (else_statement -> empty .)
    MINUS           reduce using rule 73 (else_statement -> empty .)
    LEFT_PAREN      reduce using rule 73 (else_statement -> empty .)
    LEFT_BRACKET    reduce using rule 73 (else_statement -> empty .)

  ! $end            [ reduce using rule 73 (else_statement -> empty .) ]


state 5

    (4) statement_list -> statement .
    (5) statement_list -> statement . statement_list
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (statement_list -> statement .)
  ! reduce/reduce conflict for END resolved using rule 4 (statement_list -> statement .)
  ! reduce/reduce conflict for CATCH resolved using rule 4 (statement_list -> statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    END             reduce using rule 4 (statement_list -> statement .)
    CATCH           reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! IDENTIFIER      [ reduce using rule 4 (statement_list -> statement .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 4 (statement_list -> statement .) ]
  ! IF              [ reduce using rule 4 (statement_list -> statement .) ]
  ! ELSEIF          [ reduce using rule 4 (statement_list -> statement .) ]
  ! ELSE            [ reduce using rule 4 (statement_list -> statement .) ]
  ! WHILE           [ reduce using rule 4 (statement_list -> statement .) ]
  ! FOR             [ reduce using rule 4 (statement_list -> statement .) ]
  ! FUNCTION        [ reduce using rule 4 (statement_list -> statement .) ]
  ! DO              [ reduce using rule 4 (statement_list -> statement .) ]
  ! TRY             [ reduce using rule 4 (statement_list -> statement .) ]
  ! MODULE          [ reduce using rule 4 (statement_list -> statement .) ]
  ! BEGIN           [ reduce using rule 4 (statement_list -> statement .) ]
  ! USING           [ reduce using rule 4 (statement_list -> statement .) ]
  ! NUMBER          [ reduce using rule 4 (statement_list -> statement .) ]
  ! MINUS           [ reduce using rule 4 (statement_list -> statement .) ]
  ! LEFT_PAREN      [ reduce using rule 4 (statement_list -> statement .) ]
  ! LEFT_BRACKET    [ reduce using rule 4 (statement_list -> statement .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]
  ! $end            [ reduce using rule 91 (empty -> .) ]
  ! END             [ reduce using rule 91 (empty -> .) ]
  ! CATCH           [ reduce using rule 91 (empty -> .) ]
  ! RETURN          [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 5
    statement_list                 shift and go to state 45
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 6

    (7) statement -> identifierDecl .
    (81) identifierDecl -> identifierDecl . COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> identifierDecl . NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET

    IDENTIFIER      reduce using rule 7 (statement -> identifierDecl .)
    FUNCTIONS_JULIA reduce using rule 7 (statement -> identifierDecl .)
    IF              reduce using rule 7 (statement -> identifierDecl .)
    ELSEIF          reduce using rule 7 (statement -> identifierDecl .)
    ELSE            reduce using rule 7 (statement -> identifierDecl .)
    WHILE           reduce using rule 7 (statement -> identifierDecl .)
    FOR             reduce using rule 7 (statement -> identifierDecl .)
    FUNCTION        reduce using rule 7 (statement -> identifierDecl .)
    DO              reduce using rule 7 (statement -> identifierDecl .)
    TRY             reduce using rule 7 (statement -> identifierDecl .)
    MODULE          reduce using rule 7 (statement -> identifierDecl .)
    BEGIN           reduce using rule 7 (statement -> identifierDecl .)
    USING           reduce using rule 7 (statement -> identifierDecl .)
    NUMBER          reduce using rule 7 (statement -> identifierDecl .)
    MINUS           reduce using rule 7 (statement -> identifierDecl .)
    LEFT_PAREN      reduce using rule 7 (statement -> identifierDecl .)
    LEFT_BRACKET    reduce using rule 7 (statement -> identifierDecl .)
    $end            reduce using rule 7 (statement -> identifierDecl .)
    END             reduce using rule 7 (statement -> identifierDecl .)
    CATCH           reduce using rule 7 (statement -> identifierDecl .)
    RETURN          reduce using rule 7 (statement -> identifierDecl .)
    COMMA           shift and go to state 46
    NEWLINE         shift and go to state 47


state 7

    (8) statement -> array_estatement_julia .

    IDENTIFIER      reduce using rule 8 (statement -> array_estatement_julia .)
    FUNCTIONS_JULIA reduce using rule 8 (statement -> array_estatement_julia .)
    IF              reduce using rule 8 (statement -> array_estatement_julia .)
    ELSEIF          reduce using rule 8 (statement -> array_estatement_julia .)
    ELSE            reduce using rule 8 (statement -> array_estatement_julia .)
    WHILE           reduce using rule 8 (statement -> array_estatement_julia .)
    FOR             reduce using rule 8 (statement -> array_estatement_julia .)
    FUNCTION        reduce using rule 8 (statement -> array_estatement_julia .)
    DO              reduce using rule 8 (statement -> array_estatement_julia .)
    TRY             reduce using rule 8 (statement -> array_estatement_julia .)
    MODULE          reduce using rule 8 (statement -> array_estatement_julia .)
    BEGIN           reduce using rule 8 (statement -> array_estatement_julia .)
    USING           reduce using rule 8 (statement -> array_estatement_julia .)
    NUMBER          reduce using rule 8 (statement -> array_estatement_julia .)
    MINUS           reduce using rule 8 (statement -> array_estatement_julia .)
    LEFT_PAREN      reduce using rule 8 (statement -> array_estatement_julia .)
    LEFT_BRACKET    reduce using rule 8 (statement -> array_estatement_julia .)
    $end            reduce using rule 8 (statement -> array_estatement_julia .)
    END             reduce using rule 8 (statement -> array_estatement_julia .)
    CATCH           reduce using rule 8 (statement -> array_estatement_julia .)
    RETURN          reduce using rule 8 (statement -> array_estatement_julia .)


state 8

    (9) statement -> if_statement .

    IDENTIFIER      reduce using rule 9 (statement -> if_statement .)
    FUNCTIONS_JULIA reduce using rule 9 (statement -> if_statement .)
    IF              reduce using rule 9 (statement -> if_statement .)
    ELSEIF          reduce using rule 9 (statement -> if_statement .)
    ELSE            reduce using rule 9 (statement -> if_statement .)
    WHILE           reduce using rule 9 (statement -> if_statement .)
    FOR             reduce using rule 9 (statement -> if_statement .)
    FUNCTION        reduce using rule 9 (statement -> if_statement .)
    DO              reduce using rule 9 (statement -> if_statement .)
    TRY             reduce using rule 9 (statement -> if_statement .)
    MODULE          reduce using rule 9 (statement -> if_statement .)
    BEGIN           reduce using rule 9 (statement -> if_statement .)
    USING           reduce using rule 9 (statement -> if_statement .)
    NUMBER          reduce using rule 9 (statement -> if_statement .)
    MINUS           reduce using rule 9 (statement -> if_statement .)
    LEFT_PAREN      reduce using rule 9 (statement -> if_statement .)
    LEFT_BRACKET    reduce using rule 9 (statement -> if_statement .)
    $end            reduce using rule 9 (statement -> if_statement .)
    END             reduce using rule 9 (statement -> if_statement .)
    CATCH           reduce using rule 9 (statement -> if_statement .)
    RETURN          reduce using rule 9 (statement -> if_statement .)


state 9

    (10) statement -> elseif_block .

    IDENTIFIER      reduce using rule 10 (statement -> elseif_block .)
    FUNCTIONS_JULIA reduce using rule 10 (statement -> elseif_block .)
    IF              reduce using rule 10 (statement -> elseif_block .)
    ELSEIF          reduce using rule 10 (statement -> elseif_block .)
    ELSE            reduce using rule 10 (statement -> elseif_block .)
    WHILE           reduce using rule 10 (statement -> elseif_block .)
    FOR             reduce using rule 10 (statement -> elseif_block .)
    FUNCTION        reduce using rule 10 (statement -> elseif_block .)
    DO              reduce using rule 10 (statement -> elseif_block .)
    TRY             reduce using rule 10 (statement -> elseif_block .)
    MODULE          reduce using rule 10 (statement -> elseif_block .)
    BEGIN           reduce using rule 10 (statement -> elseif_block .)
    USING           reduce using rule 10 (statement -> elseif_block .)
    NUMBER          reduce using rule 10 (statement -> elseif_block .)
    MINUS           reduce using rule 10 (statement -> elseif_block .)
    LEFT_PAREN      reduce using rule 10 (statement -> elseif_block .)
    LEFT_BRACKET    reduce using rule 10 (statement -> elseif_block .)
    $end            reduce using rule 10 (statement -> elseif_block .)
    END             reduce using rule 10 (statement -> elseif_block .)
    CATCH           reduce using rule 10 (statement -> elseif_block .)
    RETURN          reduce using rule 10 (statement -> elseif_block .)


state 10

    (11) statement -> else_statement .

    IDENTIFIER      reduce using rule 11 (statement -> else_statement .)
    FUNCTIONS_JULIA reduce using rule 11 (statement -> else_statement .)
    IF              reduce using rule 11 (statement -> else_statement .)
    ELSEIF          reduce using rule 11 (statement -> else_statement .)
    ELSE            reduce using rule 11 (statement -> else_statement .)
    WHILE           reduce using rule 11 (statement -> else_statement .)
    FOR             reduce using rule 11 (statement -> else_statement .)
    FUNCTION        reduce using rule 11 (statement -> else_statement .)
    DO              reduce using rule 11 (statement -> else_statement .)
    TRY             reduce using rule 11 (statement -> else_statement .)
    MODULE          reduce using rule 11 (statement -> else_statement .)
    BEGIN           reduce using rule 11 (statement -> else_statement .)
    USING           reduce using rule 11 (statement -> else_statement .)
    NUMBER          reduce using rule 11 (statement -> else_statement .)
    MINUS           reduce using rule 11 (statement -> else_statement .)
    LEFT_PAREN      reduce using rule 11 (statement -> else_statement .)
    LEFT_BRACKET    reduce using rule 11 (statement -> else_statement .)
    $end            reduce using rule 11 (statement -> else_statement .)
    END             reduce using rule 11 (statement -> else_statement .)
    CATCH           reduce using rule 11 (statement -> else_statement .)
    RETURN          reduce using rule 11 (statement -> else_statement .)


state 11

    (12) statement -> while_statement .

    IDENTIFIER      reduce using rule 12 (statement -> while_statement .)
    FUNCTIONS_JULIA reduce using rule 12 (statement -> while_statement .)
    IF              reduce using rule 12 (statement -> while_statement .)
    ELSEIF          reduce using rule 12 (statement -> while_statement .)
    ELSE            reduce using rule 12 (statement -> while_statement .)
    WHILE           reduce using rule 12 (statement -> while_statement .)
    FOR             reduce using rule 12 (statement -> while_statement .)
    FUNCTION        reduce using rule 12 (statement -> while_statement .)
    DO              reduce using rule 12 (statement -> while_statement .)
    TRY             reduce using rule 12 (statement -> while_statement .)
    MODULE          reduce using rule 12 (statement -> while_statement .)
    BEGIN           reduce using rule 12 (statement -> while_statement .)
    USING           reduce using rule 12 (statement -> while_statement .)
    NUMBER          reduce using rule 12 (statement -> while_statement .)
    MINUS           reduce using rule 12 (statement -> while_statement .)
    LEFT_PAREN      reduce using rule 12 (statement -> while_statement .)
    LEFT_BRACKET    reduce using rule 12 (statement -> while_statement .)
    $end            reduce using rule 12 (statement -> while_statement .)
    END             reduce using rule 12 (statement -> while_statement .)
    CATCH           reduce using rule 12 (statement -> while_statement .)
    RETURN          reduce using rule 12 (statement -> while_statement .)


state 12

    (13) statement -> for_statement .

    IDENTIFIER      reduce using rule 13 (statement -> for_statement .)
    FUNCTIONS_JULIA reduce using rule 13 (statement -> for_statement .)
    IF              reduce using rule 13 (statement -> for_statement .)
    ELSEIF          reduce using rule 13 (statement -> for_statement .)
    ELSE            reduce using rule 13 (statement -> for_statement .)
    WHILE           reduce using rule 13 (statement -> for_statement .)
    FOR             reduce using rule 13 (statement -> for_statement .)
    FUNCTION        reduce using rule 13 (statement -> for_statement .)
    DO              reduce using rule 13 (statement -> for_statement .)
    TRY             reduce using rule 13 (statement -> for_statement .)
    MODULE          reduce using rule 13 (statement -> for_statement .)
    BEGIN           reduce using rule 13 (statement -> for_statement .)
    USING           reduce using rule 13 (statement -> for_statement .)
    NUMBER          reduce using rule 13 (statement -> for_statement .)
    MINUS           reduce using rule 13 (statement -> for_statement .)
    LEFT_PAREN      reduce using rule 13 (statement -> for_statement .)
    LEFT_BRACKET    reduce using rule 13 (statement -> for_statement .)
    $end            reduce using rule 13 (statement -> for_statement .)
    END             reduce using rule 13 (statement -> for_statement .)
    CATCH           reduce using rule 13 (statement -> for_statement .)
    RETURN          reduce using rule 13 (statement -> for_statement .)


state 13

    (14) statement -> array_estatement .

    IDENTIFIER      reduce using rule 14 (statement -> array_estatement .)
    FUNCTIONS_JULIA reduce using rule 14 (statement -> array_estatement .)
    IF              reduce using rule 14 (statement -> array_estatement .)
    ELSEIF          reduce using rule 14 (statement -> array_estatement .)
    ELSE            reduce using rule 14 (statement -> array_estatement .)
    WHILE           reduce using rule 14 (statement -> array_estatement .)
    FOR             reduce using rule 14 (statement -> array_estatement .)
    FUNCTION        reduce using rule 14 (statement -> array_estatement .)
    DO              reduce using rule 14 (statement -> array_estatement .)
    TRY             reduce using rule 14 (statement -> array_estatement .)
    MODULE          reduce using rule 14 (statement -> array_estatement .)
    BEGIN           reduce using rule 14 (statement -> array_estatement .)
    USING           reduce using rule 14 (statement -> array_estatement .)
    NUMBER          reduce using rule 14 (statement -> array_estatement .)
    MINUS           reduce using rule 14 (statement -> array_estatement .)
    LEFT_PAREN      reduce using rule 14 (statement -> array_estatement .)
    LEFT_BRACKET    reduce using rule 14 (statement -> array_estatement .)
    $end            reduce using rule 14 (statement -> array_estatement .)
    END             reduce using rule 14 (statement -> array_estatement .)
    CATCH           reduce using rule 14 (statement -> array_estatement .)
    RETURN          reduce using rule 14 (statement -> array_estatement .)


state 14

    (15) statement -> function_definition .

    IDENTIFIER      reduce using rule 15 (statement -> function_definition .)
    FUNCTIONS_JULIA reduce using rule 15 (statement -> function_definition .)
    IF              reduce using rule 15 (statement -> function_definition .)
    ELSEIF          reduce using rule 15 (statement -> function_definition .)
    ELSE            reduce using rule 15 (statement -> function_definition .)
    WHILE           reduce using rule 15 (statement -> function_definition .)
    FOR             reduce using rule 15 (statement -> function_definition .)
    FUNCTION        reduce using rule 15 (statement -> function_definition .)
    DO              reduce using rule 15 (statement -> function_definition .)
    TRY             reduce using rule 15 (statement -> function_definition .)
    MODULE          reduce using rule 15 (statement -> function_definition .)
    BEGIN           reduce using rule 15 (statement -> function_definition .)
    USING           reduce using rule 15 (statement -> function_definition .)
    NUMBER          reduce using rule 15 (statement -> function_definition .)
    MINUS           reduce using rule 15 (statement -> function_definition .)
    LEFT_PAREN      reduce using rule 15 (statement -> function_definition .)
    LEFT_BRACKET    reduce using rule 15 (statement -> function_definition .)
    $end            reduce using rule 15 (statement -> function_definition .)
    END             reduce using rule 15 (statement -> function_definition .)
    CATCH           reduce using rule 15 (statement -> function_definition .)
    RETURN          reduce using rule 15 (statement -> function_definition .)


state 15

    (16) statement -> statement_function .

    IDENTIFIER      reduce using rule 16 (statement -> statement_function .)
    FUNCTIONS_JULIA reduce using rule 16 (statement -> statement_function .)
    IF              reduce using rule 16 (statement -> statement_function .)
    ELSEIF          reduce using rule 16 (statement -> statement_function .)
    ELSE            reduce using rule 16 (statement -> statement_function .)
    WHILE           reduce using rule 16 (statement -> statement_function .)
    FOR             reduce using rule 16 (statement -> statement_function .)
    FUNCTION        reduce using rule 16 (statement -> statement_function .)
    DO              reduce using rule 16 (statement -> statement_function .)
    TRY             reduce using rule 16 (statement -> statement_function .)
    MODULE          reduce using rule 16 (statement -> statement_function .)
    BEGIN           reduce using rule 16 (statement -> statement_function .)
    USING           reduce using rule 16 (statement -> statement_function .)
    NUMBER          reduce using rule 16 (statement -> statement_function .)
    MINUS           reduce using rule 16 (statement -> statement_function .)
    LEFT_PAREN      reduce using rule 16 (statement -> statement_function .)
    LEFT_BRACKET    reduce using rule 16 (statement -> statement_function .)
    $end            reduce using rule 16 (statement -> statement_function .)
    END             reduce using rule 16 (statement -> statement_function .)
    CATCH           reduce using rule 16 (statement -> statement_function .)
    RETURN          reduce using rule 16 (statement -> statement_function .)


state 16

    (17) statement -> statement_call_function .

    IDENTIFIER      reduce using rule 17 (statement -> statement_call_function .)
    FUNCTIONS_JULIA reduce using rule 17 (statement -> statement_call_function .)
    IF              reduce using rule 17 (statement -> statement_call_function .)
    ELSEIF          reduce using rule 17 (statement -> statement_call_function .)
    ELSE            reduce using rule 17 (statement -> statement_call_function .)
    WHILE           reduce using rule 17 (statement -> statement_call_function .)
    FOR             reduce using rule 17 (statement -> statement_call_function .)
    FUNCTION        reduce using rule 17 (statement -> statement_call_function .)
    DO              reduce using rule 17 (statement -> statement_call_function .)
    TRY             reduce using rule 17 (statement -> statement_call_function .)
    MODULE          reduce using rule 17 (statement -> statement_call_function .)
    BEGIN           reduce using rule 17 (statement -> statement_call_function .)
    USING           reduce using rule 17 (statement -> statement_call_function .)
    NUMBER          reduce using rule 17 (statement -> statement_call_function .)
    MINUS           reduce using rule 17 (statement -> statement_call_function .)
    LEFT_PAREN      reduce using rule 17 (statement -> statement_call_function .)
    LEFT_BRACKET    reduce using rule 17 (statement -> statement_call_function .)
    $end            reduce using rule 17 (statement -> statement_call_function .)
    END             reduce using rule 17 (statement -> statement_call_function .)
    CATCH           reduce using rule 17 (statement -> statement_call_function .)
    RETURN          reduce using rule 17 (statement -> statement_call_function .)


state 17

    (18) statement -> statement_function_julia .

    IDENTIFIER      reduce using rule 18 (statement -> statement_function_julia .)
    FUNCTIONS_JULIA reduce using rule 18 (statement -> statement_function_julia .)
    IF              reduce using rule 18 (statement -> statement_function_julia .)
    ELSEIF          reduce using rule 18 (statement -> statement_function_julia .)
    ELSE            reduce using rule 18 (statement -> statement_function_julia .)
    WHILE           reduce using rule 18 (statement -> statement_function_julia .)
    FOR             reduce using rule 18 (statement -> statement_function_julia .)
    FUNCTION        reduce using rule 18 (statement -> statement_function_julia .)
    DO              reduce using rule 18 (statement -> statement_function_julia .)
    TRY             reduce using rule 18 (statement -> statement_function_julia .)
    MODULE          reduce using rule 18 (statement -> statement_function_julia .)
    BEGIN           reduce using rule 18 (statement -> statement_function_julia .)
    USING           reduce using rule 18 (statement -> statement_function_julia .)
    NUMBER          reduce using rule 18 (statement -> statement_function_julia .)
    MINUS           reduce using rule 18 (statement -> statement_function_julia .)
    LEFT_PAREN      reduce using rule 18 (statement -> statement_function_julia .)
    LEFT_BRACKET    reduce using rule 18 (statement -> statement_function_julia .)
    $end            reduce using rule 18 (statement -> statement_function_julia .)
    END             reduce using rule 18 (statement -> statement_function_julia .)
    CATCH           reduce using rule 18 (statement -> statement_function_julia .)
    RETURN          reduce using rule 18 (statement -> statement_function_julia .)


state 18

    (19) statement -> statement_do .

    IDENTIFIER      reduce using rule 19 (statement -> statement_do .)
    FUNCTIONS_JULIA reduce using rule 19 (statement -> statement_do .)
    IF              reduce using rule 19 (statement -> statement_do .)
    ELSEIF          reduce using rule 19 (statement -> statement_do .)
    ELSE            reduce using rule 19 (statement -> statement_do .)
    WHILE           reduce using rule 19 (statement -> statement_do .)
    FOR             reduce using rule 19 (statement -> statement_do .)
    FUNCTION        reduce using rule 19 (statement -> statement_do .)
    DO              reduce using rule 19 (statement -> statement_do .)
    TRY             reduce using rule 19 (statement -> statement_do .)
    MODULE          reduce using rule 19 (statement -> statement_do .)
    BEGIN           reduce using rule 19 (statement -> statement_do .)
    USING           reduce using rule 19 (statement -> statement_do .)
    NUMBER          reduce using rule 19 (statement -> statement_do .)
    MINUS           reduce using rule 19 (statement -> statement_do .)
    LEFT_PAREN      reduce using rule 19 (statement -> statement_do .)
    LEFT_BRACKET    reduce using rule 19 (statement -> statement_do .)
    $end            reduce using rule 19 (statement -> statement_do .)
    END             reduce using rule 19 (statement -> statement_do .)
    CATCH           reduce using rule 19 (statement -> statement_do .)
    RETURN          reduce using rule 19 (statement -> statement_do .)


state 19

    (20) statement -> statement_try .

    IDENTIFIER      reduce using rule 20 (statement -> statement_try .)
    FUNCTIONS_JULIA reduce using rule 20 (statement -> statement_try .)
    IF              reduce using rule 20 (statement -> statement_try .)
    ELSEIF          reduce using rule 20 (statement -> statement_try .)
    ELSE            reduce using rule 20 (statement -> statement_try .)
    WHILE           reduce using rule 20 (statement -> statement_try .)
    FOR             reduce using rule 20 (statement -> statement_try .)
    FUNCTION        reduce using rule 20 (statement -> statement_try .)
    DO              reduce using rule 20 (statement -> statement_try .)
    TRY             reduce using rule 20 (statement -> statement_try .)
    MODULE          reduce using rule 20 (statement -> statement_try .)
    BEGIN           reduce using rule 20 (statement -> statement_try .)
    USING           reduce using rule 20 (statement -> statement_try .)
    NUMBER          reduce using rule 20 (statement -> statement_try .)
    MINUS           reduce using rule 20 (statement -> statement_try .)
    LEFT_PAREN      reduce using rule 20 (statement -> statement_try .)
    LEFT_BRACKET    reduce using rule 20 (statement -> statement_try .)
    $end            reduce using rule 20 (statement -> statement_try .)
    END             reduce using rule 20 (statement -> statement_try .)
    CATCH           reduce using rule 20 (statement -> statement_try .)
    RETURN          reduce using rule 20 (statement -> statement_try .)


state 20

    (21) statement -> statement_module .

    IDENTIFIER      reduce using rule 21 (statement -> statement_module .)
    FUNCTIONS_JULIA reduce using rule 21 (statement -> statement_module .)
    IF              reduce using rule 21 (statement -> statement_module .)
    ELSEIF          reduce using rule 21 (statement -> statement_module .)
    ELSE            reduce using rule 21 (statement -> statement_module .)
    WHILE           reduce using rule 21 (statement -> statement_module .)
    FOR             reduce using rule 21 (statement -> statement_module .)
    FUNCTION        reduce using rule 21 (statement -> statement_module .)
    DO              reduce using rule 21 (statement -> statement_module .)
    TRY             reduce using rule 21 (statement -> statement_module .)
    MODULE          reduce using rule 21 (statement -> statement_module .)
    BEGIN           reduce using rule 21 (statement -> statement_module .)
    USING           reduce using rule 21 (statement -> statement_module .)
    NUMBER          reduce using rule 21 (statement -> statement_module .)
    MINUS           reduce using rule 21 (statement -> statement_module .)
    LEFT_PAREN      reduce using rule 21 (statement -> statement_module .)
    LEFT_BRACKET    reduce using rule 21 (statement -> statement_module .)
    $end            reduce using rule 21 (statement -> statement_module .)
    END             reduce using rule 21 (statement -> statement_module .)
    CATCH           reduce using rule 21 (statement -> statement_module .)
    RETURN          reduce using rule 21 (statement -> statement_module .)


state 21

    (22) statement -> statement_begin .

    IDENTIFIER      reduce using rule 22 (statement -> statement_begin .)
    FUNCTIONS_JULIA reduce using rule 22 (statement -> statement_begin .)
    IF              reduce using rule 22 (statement -> statement_begin .)
    ELSEIF          reduce using rule 22 (statement -> statement_begin .)
    ELSE            reduce using rule 22 (statement -> statement_begin .)
    WHILE           reduce using rule 22 (statement -> statement_begin .)
    FOR             reduce using rule 22 (statement -> statement_begin .)
    FUNCTION        reduce using rule 22 (statement -> statement_begin .)
    DO              reduce using rule 22 (statement -> statement_begin .)
    TRY             reduce using rule 22 (statement -> statement_begin .)
    MODULE          reduce using rule 22 (statement -> statement_begin .)
    BEGIN           reduce using rule 22 (statement -> statement_begin .)
    USING           reduce using rule 22 (statement -> statement_begin .)
    NUMBER          reduce using rule 22 (statement -> statement_begin .)
    MINUS           reduce using rule 22 (statement -> statement_begin .)
    LEFT_PAREN      reduce using rule 22 (statement -> statement_begin .)
    LEFT_BRACKET    reduce using rule 22 (statement -> statement_begin .)
    $end            reduce using rule 22 (statement -> statement_begin .)
    END             reduce using rule 22 (statement -> statement_begin .)
    CATCH           reduce using rule 22 (statement -> statement_begin .)
    RETURN          reduce using rule 22 (statement -> statement_begin .)


state 22

    (23) statement -> statement_using .

    IDENTIFIER      reduce using rule 23 (statement -> statement_using .)
    FUNCTIONS_JULIA reduce using rule 23 (statement -> statement_using .)
    IF              reduce using rule 23 (statement -> statement_using .)
    ELSEIF          reduce using rule 23 (statement -> statement_using .)
    ELSE            reduce using rule 23 (statement -> statement_using .)
    WHILE           reduce using rule 23 (statement -> statement_using .)
    FOR             reduce using rule 23 (statement -> statement_using .)
    FUNCTION        reduce using rule 23 (statement -> statement_using .)
    DO              reduce using rule 23 (statement -> statement_using .)
    TRY             reduce using rule 23 (statement -> statement_using .)
    MODULE          reduce using rule 23 (statement -> statement_using .)
    BEGIN           reduce using rule 23 (statement -> statement_using .)
    USING           reduce using rule 23 (statement -> statement_using .)
    NUMBER          reduce using rule 23 (statement -> statement_using .)
    MINUS           reduce using rule 23 (statement -> statement_using .)
    LEFT_PAREN      reduce using rule 23 (statement -> statement_using .)
    LEFT_BRACKET    reduce using rule 23 (statement -> statement_using .)
    $end            reduce using rule 23 (statement -> statement_using .)
    END             reduce using rule 23 (statement -> statement_using .)
    CATCH           reduce using rule 23 (statement -> statement_using .)
    RETURN          reduce using rule 23 (statement -> statement_using .)


state 23

    (24) identifierDecl -> IDENTIFIER . assignment_number expression_number
    (25) identifierDecl -> IDENTIFIER . assignment expression_number
    (26) identifierDecl -> IDENTIFIER . assignment expression_string
    (27) identifierDecl -> IDENTIFIER . assignment expression_boolean
    (28) identifierDecl -> IDENTIFIER . assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> IDENTIFIER . assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (80) identifierDecl -> IDENTIFIER . assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (45) array_estatement -> IDENTIFIER . ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (56) statement_function -> IDENTIFIER . ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN
    (43) identifierList -> IDENTIFIER .
    (118) expression_number -> IDENTIFIER .
    (124) expression_number -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN
    (112) assignment_number -> . SUMASIGN
    (113) assignment_number -> . MINASIGN
    (114) assignment_number -> . MULTASIGN
    (115) assignment_number -> . DIVASIGN
    (116) assignment_number -> . MODULEASIGN
    (117) assignment_number -> . EXPONENTASIGN
    (74) assignment -> . IDENTIFIER ASSIGN expression
    (111) assignment -> . ASSIGN

    ASSIGN          shift and go to state 52
    LEFT_PAREN      shift and go to state 51
    COMMA           reduce using rule 43 (identifierList -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 118 (expression_number -> IDENTIFIER .)
    DOUBLEDOT       reduce using rule 118 (expression_number -> IDENTIFIER .)
    DOT             reduce using rule 118 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 118 (expression_number -> IDENTIFIER .)
    MINUS           reduce using rule 118 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 118 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 118 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 118 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 118 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 118 (expression_number -> IDENTIFIER .)
    SUMASIGN        shift and go to state 53
    MINASIGN        shift and go to state 54
    MULTASIGN       shift and go to state 55
    DIVASIGN        shift and go to state 56
    MODULEASIGN     shift and go to state 57
    EXPONENTASIGN   shift and go to state 58
    IDENTIFIER      shift and go to state 48

  ! SUMASIGN        [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! MINASIGN        [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! MULTASIGN       [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! DIVASIGN        [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! MODULEASIGN     [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! EXPONENTASIGN   [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! ASSIGN          [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]

    assignment_number              shift and go to state 49
    assignment                     shift and go to state 50

state 24

    (48) array_estatement_julia -> expression_number . FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

    FUNCTIONS_JULIA shift and go to state 59
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

    operator_arithmetic            shift and go to state 61

state 25

    (30) identifierDecl -> FUNCTIONS_JULIA . relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> FUNCTIONS_JULIA . relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> FUNCTIONS_JULIA . relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (57) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    LEFT_PAREN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 70

state 26

    (125) expression_number -> LEFT_PAREN . expression_number RIGHT_PAREN
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 82

state 27

    (126) expression_number -> LEFT_BRACKET . expression_number RIGHT_BRACKET
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 85

state 28

    (119) expression_number -> NUMBER .
    (52) values -> NUMBER .

  ! reduce/reduce conflict for MINUS resolved using rule 52 (values -> NUMBER .)
    FUNCTIONS_JULIA reduce using rule 119 (expression_number -> NUMBER .)
    DOUBLEDOT       reduce using rule 119 (expression_number -> NUMBER .)
    DOT             reduce using rule 119 (expression_number -> NUMBER .)
    PLUS            reduce using rule 119 (expression_number -> NUMBER .)
    MULTIPLY        reduce using rule 119 (expression_number -> NUMBER .)
    DIVIDE          reduce using rule 119 (expression_number -> NUMBER .)
    PERCENT         reduce using rule 119 (expression_number -> NUMBER .)
    SQUAREROOT      reduce using rule 119 (expression_number -> NUMBER .)
    EXPONENT        reduce using rule 119 (expression_number -> NUMBER .)
    MINUS           reduce using rule 52 (values -> NUMBER .)

  ! MINUS           [ reduce using rule 119 (expression_number -> NUMBER .) ]


state 29

    (33) identifierDecl -> identifierList . assignment_number expression_number_list
    (34) identifierDecl -> identifierList . assignment expression_number_list
    (41) identifierDecl -> identifierList . assignment_number expression_string_list
    (42) identifierDecl -> identifierList . assignment expression_boolean_list
    (44) identifierList -> identifierList . COMMA IDENTIFIER
    (112) assignment_number -> . SUMASIGN
    (113) assignment_number -> . MINASIGN
    (114) assignment_number -> . MULTASIGN
    (115) assignment_number -> . DIVASIGN
    (116) assignment_number -> . MODULEASIGN
    (117) assignment_number -> . EXPONENTASIGN
    (74) assignment -> . IDENTIFIER ASSIGN expression
    (111) assignment -> . ASSIGN

    COMMA           shift and go to state 88
    SUMASIGN        shift and go to state 53
    MINASIGN        shift and go to state 54
    MULTASIGN       shift and go to state 55
    DIVASIGN        shift and go to state 56
    MODULEASIGN     shift and go to state 57
    EXPONENTASIGN   shift and go to state 58
    IDENTIFIER      shift and go to state 48
    ASSIGN          shift and go to state 89

    assignment_number              shift and go to state 86
    assignment                     shift and go to state 87

state 30

    (49) array_estatement_julia -> values . MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    MINUS           shift and go to state 90


state 31

    (123) expression_number -> MINUS . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 91

state 32

    (65) if_statement -> IF . expression_boolean statement_list END
    (66) if_statement -> IF . expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> IF . expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> IF . expression_boolean statement_list elseif_block END
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    LEFT_PAREN      shift and go to state 93
    IDENTIFIER      shift and go to state 94
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    STRING          shift and go to state 99
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 92
    expression_string              shift and go to state 97
    expression_number              shift and go to state 98

state 33

    (72) else_statement -> ELSE . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 100
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 34

    (69) elseif_block -> ELSEIF . expression_boolean statement_list END
    (70) elseif_block -> ELSEIF . expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> ELSEIF . expression_boolean statement_list elseif_block END
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    LEFT_PAREN      shift and go to state 93
    IDENTIFIER      shift and go to state 94
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    STRING          shift and go to state 99
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 101
    expression_string              shift and go to state 97
    expression_number              shift and go to state 98

state 35

    (75) while_statement -> WHILE . expression_boolean statement_list END
    (76) while_statement -> WHILE . IDENTIFIER relation NUMBER statement_list END
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 103
    LEFT_PAREN      shift and go to state 93
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    STRING          shift and go to state 99
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 102
    expression_string              shift and go to state 97
    expression_number              shift and go to state 98

state 36

    (77) for_statement -> FOR . IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> FOR . IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> FOR . IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END

    IDENTIFIER      shift and go to state 104


state 37

    (53) function_definition -> FUNCTION . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> FUNCTION . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> FUNCTION . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END

    IDENTIFIER      shift and go to state 105


state 38

    (93) statement_do -> DO . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 106
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 39

    (95) statement_try -> TRY . statement_list CATCH IDENTIFIER statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    CATCH           reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 107
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 40

    (96) statement_module -> MODULE . IDENTIFIER statement_list END

    IDENTIFIER      shift and go to state 108


state 41

    (94) statement_begin -> BEGIN . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 109
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 42

    (97) statement_using -> USING . IDENTIFIER
    (98) statement_using -> USING . IDENTIFIER AS IDENTIFIER

    IDENTIFIER      shift and go to state 110


state 43

    (6) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 6 (statement_list -> statement_list statement .)
    FUNCTIONS_JULIA reduce using rule 6 (statement_list -> statement_list statement .)
    IF              reduce using rule 6 (statement_list -> statement_list statement .)
    ELSEIF          reduce using rule 6 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 6 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 6 (statement_list -> statement_list statement .)
    FOR             reduce using rule 6 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 6 (statement_list -> statement_list statement .)
    DO              reduce using rule 6 (statement_list -> statement_list statement .)
    TRY             reduce using rule 6 (statement_list -> statement_list statement .)
    MODULE          reduce using rule 6 (statement_list -> statement_list statement .)
    BEGIN           reduce using rule 6 (statement_list -> statement_list statement .)
    USING           reduce using rule 6 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 6 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 6 (statement_list -> statement_list statement .)
    LEFT_PAREN      reduce using rule 6 (statement_list -> statement_list statement .)
    LEFT_BRACKET    reduce using rule 6 (statement_list -> statement_list statement .)
    $end            reduce using rule 6 (statement_list -> statement_list statement .)
    END             reduce using rule 6 (statement_list -> statement_list statement .)
    CATCH           reduce using rule 6 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 6 (statement_list -> statement_list statement .)


state 44

    (73) else_statement -> empty .

    IDENTIFIER      reduce using rule 73 (else_statement -> empty .)
    FUNCTIONS_JULIA reduce using rule 73 (else_statement -> empty .)
    IF              reduce using rule 73 (else_statement -> empty .)
    ELSEIF          reduce using rule 73 (else_statement -> empty .)
    ELSE            reduce using rule 73 (else_statement -> empty .)
    WHILE           reduce using rule 73 (else_statement -> empty .)
    FOR             reduce using rule 73 (else_statement -> empty .)
    FUNCTION        reduce using rule 73 (else_statement -> empty .)
    DO              reduce using rule 73 (else_statement -> empty .)
    TRY             reduce using rule 73 (else_statement -> empty .)
    MODULE          reduce using rule 73 (else_statement -> empty .)
    BEGIN           reduce using rule 73 (else_statement -> empty .)
    USING           reduce using rule 73 (else_statement -> empty .)
    NUMBER          reduce using rule 73 (else_statement -> empty .)
    MINUS           reduce using rule 73 (else_statement -> empty .)
    LEFT_PAREN      reduce using rule 73 (else_statement -> empty .)
    LEFT_BRACKET    reduce using rule 73 (else_statement -> empty .)
    $end            reduce using rule 73 (else_statement -> empty .)
    END             reduce using rule 73 (else_statement -> empty .)
    CATCH           reduce using rule 73 (else_statement -> empty .)
    RETURN          reduce using rule 73 (else_statement -> empty .)


state 45

    (5) statement_list -> statement statement_list .
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 5 (statement_list -> statement statement_list .)
  ! reduce/reduce conflict for END resolved using rule 5 (statement_list -> statement statement_list .)
  ! reduce/reduce conflict for CATCH resolved using rule 5 (statement_list -> statement statement_list .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (statement_list -> statement statement_list .)
    $end            reduce using rule 5 (statement_list -> statement statement_list .)
    END             reduce using rule 5 (statement_list -> statement statement_list .)
    CATCH           reduce using rule 5 (statement_list -> statement statement_list .)
    RETURN          reduce using rule 5 (statement_list -> statement statement_list .)
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! IDENTIFIER      [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! IF              [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! ELSEIF          [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! ELSE            [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! WHILE           [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! FOR             [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! FUNCTION        [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! DO              [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! TRY             [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! MODULE          [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! BEGIN           [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! USING           [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! NUMBER          [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! MINUS           [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! LEFT_PAREN      [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! LEFT_BRACKET    [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]
  ! $end            [ reduce using rule 91 (empty -> .) ]
  ! END             [ reduce using rule 91 (empty -> .) ]
  ! CATCH           [ reduce using rule 91 (empty -> .) ]
  ! RETURN          [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 46

    (81) identifierDecl -> identifierDecl COMMA . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET

    IDENTIFIER      shift and go to state 111


state 47

    (82) identifierDecl -> identifierDecl NEWLINE . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET

    IDENTIFIER      shift and go to state 112


state 48

    (74) assignment -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 113


state 49

    (24) identifierDecl -> IDENTIFIER assignment_number . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 114

state 50

    (25) identifierDecl -> IDENTIFIER assignment . expression_number
    (26) identifierDecl -> IDENTIFIER assignment . expression_string
    (27) identifierDecl -> IDENTIFIER assignment . expression_boolean
    (28) identifierDecl -> IDENTIFIER assignment . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> IDENTIFIER assignment . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (80) identifierDecl -> IDENTIFIER assignment . LEFT_BRACKET array_elements RIGHT_BRACKET
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    FUNCTIONS_JULIA shift and go to state 119
    LEFT_BRACKET    shift and go to state 121
    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    expression_number              shift and go to state 116
    expression_string              shift and go to state 117
    expression_boolean             shift and go to state 118

state 51

    (92) statement_call_function -> IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN
    (124) expression_number -> IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN
    (61) argument_list -> . expression
    (62) argument_list -> . expression COMMA argument_list
    (63) argument_list -> . statement_do
    (64) argument_list -> . empty
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (93) statement_do -> . DO statement_list END
    (91) empty -> .
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    DO              shift and go to state 38
    RIGHT_PAREN     reduce using rule 91 (empty -> .)
    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    argument_list                  shift and go to state 122
    expression                     shift and go to state 123
    statement_do                   shift and go to state 124
    empty                          shift and go to state 125
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 52

    (45) array_estatement -> IDENTIFIER ASSIGN . LEFT_BRACKET array_values RIGHT_BRACKET
    (56) statement_function -> IDENTIFIER ASSIGN . LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (111) assignment -> ASSIGN .

    LEFT_BRACKET    shift and go to state 129
    LEFT_PAREN      shift and go to state 130
    FUNCTIONS_JULIA reduce using rule 111 (assignment -> ASSIGN .)
    IDENTIFIER      reduce using rule 111 (assignment -> ASSIGN .)
    NUMBER          reduce using rule 111 (assignment -> ASSIGN .)
    MINUS           reduce using rule 111 (assignment -> ASSIGN .)
    STRING          reduce using rule 111 (assignment -> ASSIGN .)
    BOOLEAN         reduce using rule 111 (assignment -> ASSIGN .)
    ADMIRATION      reduce using rule 111 (assignment -> ASSIGN .)

  ! LEFT_BRACKET    [ reduce using rule 111 (assignment -> ASSIGN .) ]
  ! LEFT_PAREN      [ reduce using rule 111 (assignment -> ASSIGN .) ]


state 53

    (112) assignment_number -> SUMASIGN .

    IDENTIFIER      reduce using rule 112 (assignment_number -> SUMASIGN .)
    NUMBER          reduce using rule 112 (assignment_number -> SUMASIGN .)
    MINUS           reduce using rule 112 (assignment_number -> SUMASIGN .)
    LEFT_PAREN      reduce using rule 112 (assignment_number -> SUMASIGN .)
    LEFT_BRACKET    reduce using rule 112 (assignment_number -> SUMASIGN .)
    STRING          reduce using rule 112 (assignment_number -> SUMASIGN .)


state 54

    (113) assignment_number -> MINASIGN .

    IDENTIFIER      reduce using rule 113 (assignment_number -> MINASIGN .)
    NUMBER          reduce using rule 113 (assignment_number -> MINASIGN .)
    MINUS           reduce using rule 113 (assignment_number -> MINASIGN .)
    LEFT_PAREN      reduce using rule 113 (assignment_number -> MINASIGN .)
    LEFT_BRACKET    reduce using rule 113 (assignment_number -> MINASIGN .)
    STRING          reduce using rule 113 (assignment_number -> MINASIGN .)


state 55

    (114) assignment_number -> MULTASIGN .

    IDENTIFIER      reduce using rule 114 (assignment_number -> MULTASIGN .)
    NUMBER          reduce using rule 114 (assignment_number -> MULTASIGN .)
    MINUS           reduce using rule 114 (assignment_number -> MULTASIGN .)
    LEFT_PAREN      reduce using rule 114 (assignment_number -> MULTASIGN .)
    LEFT_BRACKET    reduce using rule 114 (assignment_number -> MULTASIGN .)
    STRING          reduce using rule 114 (assignment_number -> MULTASIGN .)


state 56

    (115) assignment_number -> DIVASIGN .

    IDENTIFIER      reduce using rule 115 (assignment_number -> DIVASIGN .)
    NUMBER          reduce using rule 115 (assignment_number -> DIVASIGN .)
    MINUS           reduce using rule 115 (assignment_number -> DIVASIGN .)
    LEFT_PAREN      reduce using rule 115 (assignment_number -> DIVASIGN .)
    LEFT_BRACKET    reduce using rule 115 (assignment_number -> DIVASIGN .)
    STRING          reduce using rule 115 (assignment_number -> DIVASIGN .)


state 57

    (116) assignment_number -> MODULEASIGN .

    IDENTIFIER      reduce using rule 116 (assignment_number -> MODULEASIGN .)
    NUMBER          reduce using rule 116 (assignment_number -> MODULEASIGN .)
    MINUS           reduce using rule 116 (assignment_number -> MODULEASIGN .)
    LEFT_PAREN      reduce using rule 116 (assignment_number -> MODULEASIGN .)
    LEFT_BRACKET    reduce using rule 116 (assignment_number -> MODULEASIGN .)
    STRING          reduce using rule 116 (assignment_number -> MODULEASIGN .)


state 58

    (117) assignment_number -> EXPONENTASIGN .

    IDENTIFIER      reduce using rule 117 (assignment_number -> EXPONENTASIGN .)
    NUMBER          reduce using rule 117 (assignment_number -> EXPONENTASIGN .)
    MINUS           reduce using rule 117 (assignment_number -> EXPONENTASIGN .)
    LEFT_PAREN      reduce using rule 117 (assignment_number -> EXPONENTASIGN .)
    LEFT_BRACKET    reduce using rule 117 (assignment_number -> EXPONENTASIGN .)
    STRING          reduce using rule 117 (assignment_number -> EXPONENTASIGN .)


state 59

    (48) array_estatement_julia -> expression_number FUNCTIONS_JULIA . LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    LEFT_BRACE      shift and go to state 131


state 60

    (121) expression_number -> expression_number DOUBLEDOT . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 132

state 61

    (120) expression_number -> expression_number operator_arithmetic . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 133

state 62

    (122) expression_number -> expression_number DOT . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 134

state 63

    (131) operator_arithmetic -> PLUS .

    IDENTIFIER      reduce using rule 131 (operator_arithmetic -> PLUS .)
    NUMBER          reduce using rule 131 (operator_arithmetic -> PLUS .)
    MINUS           reduce using rule 131 (operator_arithmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 131 (operator_arithmetic -> PLUS .)
    LEFT_BRACKET    reduce using rule 131 (operator_arithmetic -> PLUS .)


state 64

    (132) operator_arithmetic -> MINUS .

    IDENTIFIER      reduce using rule 132 (operator_arithmetic -> MINUS .)
    NUMBER          reduce using rule 132 (operator_arithmetic -> MINUS .)
    MINUS           reduce using rule 132 (operator_arithmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 132 (operator_arithmetic -> MINUS .)
    LEFT_BRACKET    reduce using rule 132 (operator_arithmetic -> MINUS .)


state 65

    (133) operator_arithmetic -> MULTIPLY .

    IDENTIFIER      reduce using rule 133 (operator_arithmetic -> MULTIPLY .)
    NUMBER          reduce using rule 133 (operator_arithmetic -> MULTIPLY .)
    MINUS           reduce using rule 133 (operator_arithmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 133 (operator_arithmetic -> MULTIPLY .)
    LEFT_BRACKET    reduce using rule 133 (operator_arithmetic -> MULTIPLY .)


state 66

    (134) operator_arithmetic -> DIVIDE .

    IDENTIFIER      reduce using rule 134 (operator_arithmetic -> DIVIDE .)
    NUMBER          reduce using rule 134 (operator_arithmetic -> DIVIDE .)
    MINUS           reduce using rule 134 (operator_arithmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 134 (operator_arithmetic -> DIVIDE .)
    LEFT_BRACKET    reduce using rule 134 (operator_arithmetic -> DIVIDE .)


state 67

    (135) operator_arithmetic -> PERCENT .

    IDENTIFIER      reduce using rule 135 (operator_arithmetic -> PERCENT .)
    NUMBER          reduce using rule 135 (operator_arithmetic -> PERCENT .)
    MINUS           reduce using rule 135 (operator_arithmetic -> PERCENT .)
    LEFT_PAREN      reduce using rule 135 (operator_arithmetic -> PERCENT .)
    LEFT_BRACKET    reduce using rule 135 (operator_arithmetic -> PERCENT .)


state 68

    (136) operator_arithmetic -> SQUAREROOT .

    IDENTIFIER      reduce using rule 136 (operator_arithmetic -> SQUAREROOT .)
    NUMBER          reduce using rule 136 (operator_arithmetic -> SQUAREROOT .)
    MINUS           reduce using rule 136 (operator_arithmetic -> SQUAREROOT .)
    LEFT_PAREN      reduce using rule 136 (operator_arithmetic -> SQUAREROOT .)
    LEFT_BRACKET    reduce using rule 136 (operator_arithmetic -> SQUAREROOT .)


state 69

    (137) operator_arithmetic -> EXPONENT .

    IDENTIFIER      reduce using rule 137 (operator_arithmetic -> EXPONENT .)
    NUMBER          reduce using rule 137 (operator_arithmetic -> EXPONENT .)
    MINUS           reduce using rule 137 (operator_arithmetic -> EXPONENT .)
    LEFT_PAREN      reduce using rule 137 (operator_arithmetic -> EXPONENT .)
    LEFT_BRACKET    reduce using rule 137 (operator_arithmetic -> EXPONENT .)


state 70

    (30) identifierDecl -> FUNCTIONS_JULIA relation . IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> FUNCTIONS_JULIA relation . IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> FUNCTIONS_JULIA relation . FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia

    IDENTIFIER      shift and go to state 136
    FUNCTIONS_JULIA shift and go to state 135


state 71

    (57) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN . argument_list RIGHT_PAREN
    (58) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN . NUMBER RIGHT_PAREN
    (59) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN . NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN . IDENTIFIER RIGHT_PAREN
    (61) argument_list -> . expression
    (62) argument_list -> . expression COMMA argument_list
    (63) argument_list -> . statement_do
    (64) argument_list -> . empty
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (93) statement_do -> . DO statement_list END
    (91) empty -> .
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    NUMBER          shift and go to state 138
    IDENTIFIER      shift and go to state 139
    DO              shift and go to state 38
    RIGHT_PAREN     reduce using rule 91 (empty -> .)
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    argument_list                  shift and go to state 137
    expression                     shift and go to state 123
    statement_do                   shift and go to state 124
    empty                          shift and go to state 125
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 72

    (138) relation -> LESS_THAN .

    IDENTIFIER      reduce using rule 138 (relation -> LESS_THAN .)
    FUNCTIONS_JULIA reduce using rule 138 (relation -> LESS_THAN .)
    LEFT_PAREN      reduce using rule 138 (relation -> LESS_THAN .)
    BOOLEAN         reduce using rule 138 (relation -> LESS_THAN .)
    ADMIRATION      reduce using rule 138 (relation -> LESS_THAN .)
    STRING          reduce using rule 138 (relation -> LESS_THAN .)
    NUMBER          reduce using rule 138 (relation -> LESS_THAN .)
    MINUS           reduce using rule 138 (relation -> LESS_THAN .)
    LEFT_BRACKET    reduce using rule 138 (relation -> LESS_THAN .)


state 73

    (139) relation -> LESS_THAN_OR_EQUAL .

    IDENTIFIER      reduce using rule 139 (relation -> LESS_THAN_OR_EQUAL .)
    FUNCTIONS_JULIA reduce using rule 139 (relation -> LESS_THAN_OR_EQUAL .)
    LEFT_PAREN      reduce using rule 139 (relation -> LESS_THAN_OR_EQUAL .)
    BOOLEAN         reduce using rule 139 (relation -> LESS_THAN_OR_EQUAL .)
    ADMIRATION      reduce using rule 139 (relation -> LESS_THAN_OR_EQUAL .)
    STRING          reduce using rule 139 (relation -> LESS_THAN_OR_EQUAL .)
    NUMBER          reduce using rule 139 (relation -> LESS_THAN_OR_EQUAL .)
    MINUS           reduce using rule 139 (relation -> LESS_THAN_OR_EQUAL .)
    LEFT_BRACKET    reduce using rule 139 (relation -> LESS_THAN_OR_EQUAL .)


state 74

    (140) relation -> GREATER_THAN .

    IDENTIFIER      reduce using rule 140 (relation -> GREATER_THAN .)
    FUNCTIONS_JULIA reduce using rule 140 (relation -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 140 (relation -> GREATER_THAN .)
    BOOLEAN         reduce using rule 140 (relation -> GREATER_THAN .)
    ADMIRATION      reduce using rule 140 (relation -> GREATER_THAN .)
    STRING          reduce using rule 140 (relation -> GREATER_THAN .)
    NUMBER          reduce using rule 140 (relation -> GREATER_THAN .)
    MINUS           reduce using rule 140 (relation -> GREATER_THAN .)
    LEFT_BRACKET    reduce using rule 140 (relation -> GREATER_THAN .)


state 75

    (141) relation -> GREATER_THAN_OR_EQUAL .

    IDENTIFIER      reduce using rule 141 (relation -> GREATER_THAN_OR_EQUAL .)
    FUNCTIONS_JULIA reduce using rule 141 (relation -> GREATER_THAN_OR_EQUAL .)
    LEFT_PAREN      reduce using rule 141 (relation -> GREATER_THAN_OR_EQUAL .)
    BOOLEAN         reduce using rule 141 (relation -> GREATER_THAN_OR_EQUAL .)
    ADMIRATION      reduce using rule 141 (relation -> GREATER_THAN_OR_EQUAL .)
    STRING          reduce using rule 141 (relation -> GREATER_THAN_OR_EQUAL .)
    NUMBER          reduce using rule 141 (relation -> GREATER_THAN_OR_EQUAL .)
    MINUS           reduce using rule 141 (relation -> GREATER_THAN_OR_EQUAL .)
    LEFT_BRACKET    reduce using rule 141 (relation -> GREATER_THAN_OR_EQUAL .)


state 76

    (142) relation -> EQUALS .

    IDENTIFIER      reduce using rule 142 (relation -> EQUALS .)
    FUNCTIONS_JULIA reduce using rule 142 (relation -> EQUALS .)
    LEFT_PAREN      reduce using rule 142 (relation -> EQUALS .)
    BOOLEAN         reduce using rule 142 (relation -> EQUALS .)
    ADMIRATION      reduce using rule 142 (relation -> EQUALS .)
    STRING          reduce using rule 142 (relation -> EQUALS .)
    NUMBER          reduce using rule 142 (relation -> EQUALS .)
    MINUS           reduce using rule 142 (relation -> EQUALS .)
    LEFT_BRACKET    reduce using rule 142 (relation -> EQUALS .)


state 77

    (143) relation -> NOT_EQUALS .

    IDENTIFIER      reduce using rule 143 (relation -> NOT_EQUALS .)
    FUNCTIONS_JULIA reduce using rule 143 (relation -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 143 (relation -> NOT_EQUALS .)
    BOOLEAN         reduce using rule 143 (relation -> NOT_EQUALS .)
    ADMIRATION      reduce using rule 143 (relation -> NOT_EQUALS .)
    STRING          reduce using rule 143 (relation -> NOT_EQUALS .)
    NUMBER          reduce using rule 143 (relation -> NOT_EQUALS .)
    MINUS           reduce using rule 143 (relation -> NOT_EQUALS .)
    LEFT_BRACKET    reduce using rule 143 (relation -> NOT_EQUALS .)


state 78

    (144) relation -> AND .

    IDENTIFIER      reduce using rule 144 (relation -> AND .)
    FUNCTIONS_JULIA reduce using rule 144 (relation -> AND .)
    LEFT_PAREN      reduce using rule 144 (relation -> AND .)
    BOOLEAN         reduce using rule 144 (relation -> AND .)
    ADMIRATION      reduce using rule 144 (relation -> AND .)
    STRING          reduce using rule 144 (relation -> AND .)
    NUMBER          reduce using rule 144 (relation -> AND .)
    MINUS           reduce using rule 144 (relation -> AND .)
    LEFT_BRACKET    reduce using rule 144 (relation -> AND .)


state 79

    (145) relation -> ANDSYM .

    IDENTIFIER      reduce using rule 145 (relation -> ANDSYM .)
    FUNCTIONS_JULIA reduce using rule 145 (relation -> ANDSYM .)
    LEFT_PAREN      reduce using rule 145 (relation -> ANDSYM .)
    BOOLEAN         reduce using rule 145 (relation -> ANDSYM .)
    ADMIRATION      reduce using rule 145 (relation -> ANDSYM .)
    STRING          reduce using rule 145 (relation -> ANDSYM .)
    NUMBER          reduce using rule 145 (relation -> ANDSYM .)
    MINUS           reduce using rule 145 (relation -> ANDSYM .)
    LEFT_BRACKET    reduce using rule 145 (relation -> ANDSYM .)


state 80

    (146) relation -> OR .

    IDENTIFIER      reduce using rule 146 (relation -> OR .)
    FUNCTIONS_JULIA reduce using rule 146 (relation -> OR .)
    LEFT_PAREN      reduce using rule 146 (relation -> OR .)
    BOOLEAN         reduce using rule 146 (relation -> OR .)
    ADMIRATION      reduce using rule 146 (relation -> OR .)
    STRING          reduce using rule 146 (relation -> OR .)
    NUMBER          reduce using rule 146 (relation -> OR .)
    MINUS           reduce using rule 146 (relation -> OR .)
    LEFT_BRACKET    reduce using rule 146 (relation -> OR .)


state 81

    (147) relation -> ORSYM .

    IDENTIFIER      reduce using rule 147 (relation -> ORSYM .)
    FUNCTIONS_JULIA reduce using rule 147 (relation -> ORSYM .)
    LEFT_PAREN      reduce using rule 147 (relation -> ORSYM .)
    BOOLEAN         reduce using rule 147 (relation -> ORSYM .)
    ADMIRATION      reduce using rule 147 (relation -> ORSYM .)
    STRING          reduce using rule 147 (relation -> ORSYM .)
    NUMBER          reduce using rule 147 (relation -> ORSYM .)
    MINUS           reduce using rule 147 (relation -> ORSYM .)
    LEFT_BRACKET    reduce using rule 147 (relation -> ORSYM .)


state 82

    (125) expression_number -> LEFT_PAREN expression_number . RIGHT_PAREN
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

    RIGHT_PAREN     shift and go to state 140
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

    operator_arithmetic            shift and go to state 61

state 83

    (118) expression_number -> IDENTIFIER .
    (124) expression_number -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN

    RIGHT_PAREN     reduce using rule 118 (expression_number -> IDENTIFIER .)
    DOUBLEDOT       reduce using rule 118 (expression_number -> IDENTIFIER .)
    DOT             reduce using rule 118 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 118 (expression_number -> IDENTIFIER .)
    MINUS           reduce using rule 118 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 118 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 118 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 118 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 118 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 118 (expression_number -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 118 (expression_number -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 118 (expression_number -> IDENTIFIER .)
    LESS_THAN       reduce using rule 118 (expression_number -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL reduce using rule 118 (expression_number -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 118 (expression_number -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL reduce using rule 118 (expression_number -> IDENTIFIER .)
    EQUALS          reduce using rule 118 (expression_number -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 118 (expression_number -> IDENTIFIER .)
    AND             reduce using rule 118 (expression_number -> IDENTIFIER .)
    ANDSYM          reduce using rule 118 (expression_number -> IDENTIFIER .)
    OR              reduce using rule 118 (expression_number -> IDENTIFIER .)
    ORSYM           reduce using rule 118 (expression_number -> IDENTIFIER .)
    COMMA           reduce using rule 118 (expression_number -> IDENTIFIER .)
    NEWLINE         reduce using rule 118 (expression_number -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 118 (expression_number -> IDENTIFIER .)
    IF              reduce using rule 118 (expression_number -> IDENTIFIER .)
    ELSEIF          reduce using rule 118 (expression_number -> IDENTIFIER .)
    ELSE            reduce using rule 118 (expression_number -> IDENTIFIER .)
    WHILE           reduce using rule 118 (expression_number -> IDENTIFIER .)
    FOR             reduce using rule 118 (expression_number -> IDENTIFIER .)
    FUNCTION        reduce using rule 118 (expression_number -> IDENTIFIER .)
    DO              reduce using rule 118 (expression_number -> IDENTIFIER .)
    TRY             reduce using rule 118 (expression_number -> IDENTIFIER .)
    MODULE          reduce using rule 118 (expression_number -> IDENTIFIER .)
    BEGIN           reduce using rule 118 (expression_number -> IDENTIFIER .)
    USING           reduce using rule 118 (expression_number -> IDENTIFIER .)
    NUMBER          reduce using rule 118 (expression_number -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 118 (expression_number -> IDENTIFIER .)
    $end            reduce using rule 118 (expression_number -> IDENTIFIER .)
    END             reduce using rule 118 (expression_number -> IDENTIFIER .)
    CATCH           reduce using rule 118 (expression_number -> IDENTIFIER .)
    RETURN          reduce using rule 118 (expression_number -> IDENTIFIER .)
    STRING          reduce using rule 118 (expression_number -> IDENTIFIER .)
    BOOLEAN         reduce using rule 118 (expression_number -> IDENTIFIER .)
    ADMIRATION      reduce using rule 118 (expression_number -> IDENTIFIER .)
    SEMICOLON       reduce using rule 118 (expression_number -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 141

  ! LEFT_PAREN      [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]


state 84

    (119) expression_number -> NUMBER .

    RIGHT_PAREN     reduce using rule 119 (expression_number -> NUMBER .)
    DOUBLEDOT       reduce using rule 119 (expression_number -> NUMBER .)
    DOT             reduce using rule 119 (expression_number -> NUMBER .)
    PLUS            reduce using rule 119 (expression_number -> NUMBER .)
    MINUS           reduce using rule 119 (expression_number -> NUMBER .)
    MULTIPLY        reduce using rule 119 (expression_number -> NUMBER .)
    DIVIDE          reduce using rule 119 (expression_number -> NUMBER .)
    PERCENT         reduce using rule 119 (expression_number -> NUMBER .)
    SQUAREROOT      reduce using rule 119 (expression_number -> NUMBER .)
    EXPONENT        reduce using rule 119 (expression_number -> NUMBER .)
    RIGHT_BRACKET   reduce using rule 119 (expression_number -> NUMBER .)
    FUNCTIONS_JULIA reduce using rule 119 (expression_number -> NUMBER .)
    LESS_THAN       reduce using rule 119 (expression_number -> NUMBER .)
    LESS_THAN_OR_EQUAL reduce using rule 119 (expression_number -> NUMBER .)
    GREATER_THAN    reduce using rule 119 (expression_number -> NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 119 (expression_number -> NUMBER .)
    EQUALS          reduce using rule 119 (expression_number -> NUMBER .)
    NOT_EQUALS      reduce using rule 119 (expression_number -> NUMBER .)
    AND             reduce using rule 119 (expression_number -> NUMBER .)
    ANDSYM          reduce using rule 119 (expression_number -> NUMBER .)
    OR              reduce using rule 119 (expression_number -> NUMBER .)
    ORSYM           reduce using rule 119 (expression_number -> NUMBER .)
    COMMA           reduce using rule 119 (expression_number -> NUMBER .)
    NEWLINE         reduce using rule 119 (expression_number -> NUMBER .)
    IDENTIFIER      reduce using rule 119 (expression_number -> NUMBER .)
    IF              reduce using rule 119 (expression_number -> NUMBER .)
    ELSEIF          reduce using rule 119 (expression_number -> NUMBER .)
    ELSE            reduce using rule 119 (expression_number -> NUMBER .)
    WHILE           reduce using rule 119 (expression_number -> NUMBER .)
    FOR             reduce using rule 119 (expression_number -> NUMBER .)
    FUNCTION        reduce using rule 119 (expression_number -> NUMBER .)
    DO              reduce using rule 119 (expression_number -> NUMBER .)
    TRY             reduce using rule 119 (expression_number -> NUMBER .)
    MODULE          reduce using rule 119 (expression_number -> NUMBER .)
    BEGIN           reduce using rule 119 (expression_number -> NUMBER .)
    USING           reduce using rule 119 (expression_number -> NUMBER .)
    NUMBER          reduce using rule 119 (expression_number -> NUMBER .)
    LEFT_PAREN      reduce using rule 119 (expression_number -> NUMBER .)
    LEFT_BRACKET    reduce using rule 119 (expression_number -> NUMBER .)
    $end            reduce using rule 119 (expression_number -> NUMBER .)
    END             reduce using rule 119 (expression_number -> NUMBER .)
    CATCH           reduce using rule 119 (expression_number -> NUMBER .)
    RETURN          reduce using rule 119 (expression_number -> NUMBER .)
    STRING          reduce using rule 119 (expression_number -> NUMBER .)
    BOOLEAN         reduce using rule 119 (expression_number -> NUMBER .)
    ADMIRATION      reduce using rule 119 (expression_number -> NUMBER .)
    SEMICOLON       reduce using rule 119 (expression_number -> NUMBER .)


state 85

    (126) expression_number -> LEFT_BRACKET expression_number . RIGHT_BRACKET
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

    RIGHT_BRACKET   shift and go to state 142
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

    operator_arithmetic            shift and go to state 61

state 86

    (33) identifierDecl -> identifierList assignment_number . expression_number_list
    (41) identifierDecl -> identifierList assignment_number . expression_string_list
    (35) expression_number_list -> . expression_number
    (36) expression_number_list -> . expression_number_list COMMA expression_number
    (37) expression_string_list -> . expression_string
    (38) expression_string_list -> . expression_string_list COMMA expression_string
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 147
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99

    expression_number_list         shift and go to state 143
    expression_string_list         shift and go to state 144
    expression_number              shift and go to state 145
    expression_string              shift and go to state 146

state 87

    (34) identifierDecl -> identifierList assignment . expression_number_list
    (42) identifierDecl -> identifierList assignment . expression_boolean_list
    (35) expression_number_list -> . expression_number
    (36) expression_number_list -> . expression_number_list COMMA expression_number
    (39) expression_boolean_list -> . expression_boolean
    (40) expression_boolean_list -> . expression_boolean_list COMMA expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 152
    LEFT_BRACKET    shift and go to state 27
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    STRING          shift and go to state 99

    expression_number_list         shift and go to state 148
    expression_boolean_list        shift and go to state 149
    expression_number              shift and go to state 150
    expression_boolean             shift and go to state 151
    expression_string              shift and go to state 97

state 88

    (44) identifierList -> identifierList COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 153


state 89

    (111) assignment -> ASSIGN .

    IDENTIFIER      reduce using rule 111 (assignment -> ASSIGN .)
    NUMBER          reduce using rule 111 (assignment -> ASSIGN .)
    MINUS           reduce using rule 111 (assignment -> ASSIGN .)
    LEFT_PAREN      reduce using rule 111 (assignment -> ASSIGN .)
    LEFT_BRACKET    reduce using rule 111 (assignment -> ASSIGN .)
    BOOLEAN         reduce using rule 111 (assignment -> ASSIGN .)
    ADMIRATION      reduce using rule 111 (assignment -> ASSIGN .)
    STRING          reduce using rule 111 (assignment -> ASSIGN .)


state 90

    (49) array_estatement_julia -> values MINUS . FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    FUNCTIONS_JULIA shift and go to state 154


state 91

    (123) expression_number -> MINUS expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

    FUNCTIONS_JULIA reduce using rule 123 (expression_number -> MINUS expression_number .)
    DOUBLEDOT       reduce using rule 123 (expression_number -> MINUS expression_number .)
    DOT             reduce using rule 123 (expression_number -> MINUS expression_number .)
    PLUS            reduce using rule 123 (expression_number -> MINUS expression_number .)
    MINUS           reduce using rule 123 (expression_number -> MINUS expression_number .)
    RIGHT_PAREN     reduce using rule 123 (expression_number -> MINUS expression_number .)
    RIGHT_BRACKET   reduce using rule 123 (expression_number -> MINUS expression_number .)
    LESS_THAN       reduce using rule 123 (expression_number -> MINUS expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 123 (expression_number -> MINUS expression_number .)
    GREATER_THAN    reduce using rule 123 (expression_number -> MINUS expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 123 (expression_number -> MINUS expression_number .)
    EQUALS          reduce using rule 123 (expression_number -> MINUS expression_number .)
    NOT_EQUALS      reduce using rule 123 (expression_number -> MINUS expression_number .)
    AND             reduce using rule 123 (expression_number -> MINUS expression_number .)
    ANDSYM          reduce using rule 123 (expression_number -> MINUS expression_number .)
    OR              reduce using rule 123 (expression_number -> MINUS expression_number .)
    ORSYM           reduce using rule 123 (expression_number -> MINUS expression_number .)
    COMMA           reduce using rule 123 (expression_number -> MINUS expression_number .)
    NEWLINE         reduce using rule 123 (expression_number -> MINUS expression_number .)
    IDENTIFIER      reduce using rule 123 (expression_number -> MINUS expression_number .)
    IF              reduce using rule 123 (expression_number -> MINUS expression_number .)
    ELSEIF          reduce using rule 123 (expression_number -> MINUS expression_number .)
    ELSE            reduce using rule 123 (expression_number -> MINUS expression_number .)
    WHILE           reduce using rule 123 (expression_number -> MINUS expression_number .)
    FOR             reduce using rule 123 (expression_number -> MINUS expression_number .)
    FUNCTION        reduce using rule 123 (expression_number -> MINUS expression_number .)
    DO              reduce using rule 123 (expression_number -> MINUS expression_number .)
    TRY             reduce using rule 123 (expression_number -> MINUS expression_number .)
    MODULE          reduce using rule 123 (expression_number -> MINUS expression_number .)
    BEGIN           reduce using rule 123 (expression_number -> MINUS expression_number .)
    USING           reduce using rule 123 (expression_number -> MINUS expression_number .)
    NUMBER          reduce using rule 123 (expression_number -> MINUS expression_number .)
    LEFT_PAREN      reduce using rule 123 (expression_number -> MINUS expression_number .)
    LEFT_BRACKET    reduce using rule 123 (expression_number -> MINUS expression_number .)
    $end            reduce using rule 123 (expression_number -> MINUS expression_number .)
    END             reduce using rule 123 (expression_number -> MINUS expression_number .)
    CATCH           reduce using rule 123 (expression_number -> MINUS expression_number .)
    RETURN          reduce using rule 123 (expression_number -> MINUS expression_number .)
    STRING          reduce using rule 123 (expression_number -> MINUS expression_number .)
    BOOLEAN         reduce using rule 123 (expression_number -> MINUS expression_number .)
    ADMIRATION      reduce using rule 123 (expression_number -> MINUS expression_number .)
    SEMICOLON       reduce using rule 123 (expression_number -> MINUS expression_number .)
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

  ! MULTIPLY        [ reduce using rule 123 (expression_number -> MINUS expression_number .) ]
  ! DIVIDE          [ reduce using rule 123 (expression_number -> MINUS expression_number .) ]
  ! PERCENT         [ reduce using rule 123 (expression_number -> MINUS expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 123 (expression_number -> MINUS expression_number .) ]
  ! EXPONENT        [ reduce using rule 123 (expression_number -> MINUS expression_number .) ]
  ! DOUBLEDOT       [ shift and go to state 60 ]
  ! DOT             [ shift and go to state 62 ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 64 ]

    operator_arithmetic            shift and go to state 61

state 92

    (65) if_statement -> IF expression_boolean . statement_list END
    (66) if_statement -> IF expression_boolean . statement_list ELSE statement_list END
    (67) if_statement -> IF expression_boolean . statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> IF expression_boolean . statement_list elseif_block END
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 155
    elseif_block                   shift and go to state 9
    relation                       shift and go to state 156
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 93

    (103) expression_boolean -> LEFT_PAREN . expression_boolean RIGHT_PAREN
    (128) expression_string -> LEFT_PAREN . expression_string RIGHT_PAREN
    (125) expression_number -> LEFT_PAREN . expression_number RIGHT_PAREN
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    LEFT_PAREN      shift and go to state 93
    IDENTIFIER      shift and go to state 94
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    STRING          shift and go to state 99
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 157
    expression_string              shift and go to state 158
    expression_number              shift and go to state 159

state 94

    (104) expression_boolean -> IDENTIFIER .
    (106) expression_boolean -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN
    (118) expression_number -> IDENTIFIER .
    (124) expression_number -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN

  ! reduce/reduce conflict for DOUBLEDOT resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ORSYM resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
    LESS_THAN       reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    EQUALS          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    AND             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ANDSYM          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    OR              reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ORSYM           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    IF              reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ELSEIF          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ELSE            reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    WHILE           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    FOR             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    FUNCTION        reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    DO              reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    TRY             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    MODULE          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    BEGIN           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    USING           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    NUMBER          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    MINUS           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    END             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    COMMA           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    NEWLINE         reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    $end            reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    CATCH           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    RETURN          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    STRING          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    BOOLEAN         reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ADMIRATION      reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    DOUBLEDOT       reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 160
    DOT             reduce using rule 118 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 118 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 118 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 118 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 118 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 118 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 118 (expression_number -> IDENTIFIER .)

  ! LEFT_PAREN      [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! DOUBLEDOT       [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN       [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]


state 95

    (105) expression_boolean -> BOOLEAN .

    LESS_THAN       reduce using rule 105 (expression_boolean -> BOOLEAN .)
    LESS_THAN_OR_EQUAL reduce using rule 105 (expression_boolean -> BOOLEAN .)
    GREATER_THAN    reduce using rule 105 (expression_boolean -> BOOLEAN .)
    GREATER_THAN_OR_EQUAL reduce using rule 105 (expression_boolean -> BOOLEAN .)
    EQUALS          reduce using rule 105 (expression_boolean -> BOOLEAN .)
    NOT_EQUALS      reduce using rule 105 (expression_boolean -> BOOLEAN .)
    AND             reduce using rule 105 (expression_boolean -> BOOLEAN .)
    ANDSYM          reduce using rule 105 (expression_boolean -> BOOLEAN .)
    OR              reduce using rule 105 (expression_boolean -> BOOLEAN .)
    ORSYM           reduce using rule 105 (expression_boolean -> BOOLEAN .)
    IDENTIFIER      reduce using rule 105 (expression_boolean -> BOOLEAN .)
    FUNCTIONS_JULIA reduce using rule 105 (expression_boolean -> BOOLEAN .)
    IF              reduce using rule 105 (expression_boolean -> BOOLEAN .)
    ELSEIF          reduce using rule 105 (expression_boolean -> BOOLEAN .)
    ELSE            reduce using rule 105 (expression_boolean -> BOOLEAN .)
    WHILE           reduce using rule 105 (expression_boolean -> BOOLEAN .)
    FOR             reduce using rule 105 (expression_boolean -> BOOLEAN .)
    FUNCTION        reduce using rule 105 (expression_boolean -> BOOLEAN .)
    DO              reduce using rule 105 (expression_boolean -> BOOLEAN .)
    TRY             reduce using rule 105 (expression_boolean -> BOOLEAN .)
    MODULE          reduce using rule 105 (expression_boolean -> BOOLEAN .)
    BEGIN           reduce using rule 105 (expression_boolean -> BOOLEAN .)
    USING           reduce using rule 105 (expression_boolean -> BOOLEAN .)
    NUMBER          reduce using rule 105 (expression_boolean -> BOOLEAN .)
    MINUS           reduce using rule 105 (expression_boolean -> BOOLEAN .)
    LEFT_PAREN      reduce using rule 105 (expression_boolean -> BOOLEAN .)
    LEFT_BRACKET    reduce using rule 105 (expression_boolean -> BOOLEAN .)
    END             reduce using rule 105 (expression_boolean -> BOOLEAN .)
    COMMA           reduce using rule 105 (expression_boolean -> BOOLEAN .)
    NEWLINE         reduce using rule 105 (expression_boolean -> BOOLEAN .)
    $end            reduce using rule 105 (expression_boolean -> BOOLEAN .)
    CATCH           reduce using rule 105 (expression_boolean -> BOOLEAN .)
    RETURN          reduce using rule 105 (expression_boolean -> BOOLEAN .)
    RIGHT_PAREN     reduce using rule 105 (expression_boolean -> BOOLEAN .)
    STRING          reduce using rule 105 (expression_boolean -> BOOLEAN .)
    BOOLEAN         reduce using rule 105 (expression_boolean -> BOOLEAN .)
    ADMIRATION      reduce using rule 105 (expression_boolean -> BOOLEAN .)
    RIGHT_BRACKET   reduce using rule 105 (expression_boolean -> BOOLEAN .)
    DOUBLEDOT       reduce using rule 105 (expression_boolean -> BOOLEAN .)


state 96

    (108) expression_boolean -> ADMIRATION . expression_boolean
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    LEFT_PAREN      shift and go to state 93
    IDENTIFIER      shift and go to state 94
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    STRING          shift and go to state 99
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 161
    expression_string              shift and go to state 97
    expression_number              shift and go to state 98

state 97

    (109) expression_boolean -> expression_string . relation expression_string
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    MULTIPLY        shift and go to state 163
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 162

state 98

    (110) expression_boolean -> expression_number . relation expression_number
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

    relation                       shift and go to state 164
    operator_arithmetic            shift and go to state 61

state 99

    (127) expression_string -> STRING .

    MULTIPLY        reduce using rule 127 (expression_string -> STRING .)
    LESS_THAN       reduce using rule 127 (expression_string -> STRING .)
    LESS_THAN_OR_EQUAL reduce using rule 127 (expression_string -> STRING .)
    GREATER_THAN    reduce using rule 127 (expression_string -> STRING .)
    GREATER_THAN_OR_EQUAL reduce using rule 127 (expression_string -> STRING .)
    EQUALS          reduce using rule 127 (expression_string -> STRING .)
    NOT_EQUALS      reduce using rule 127 (expression_string -> STRING .)
    AND             reduce using rule 127 (expression_string -> STRING .)
    ANDSYM          reduce using rule 127 (expression_string -> STRING .)
    OR              reduce using rule 127 (expression_string -> STRING .)
    ORSYM           reduce using rule 127 (expression_string -> STRING .)
    COMMA           reduce using rule 127 (expression_string -> STRING .)
    NEWLINE         reduce using rule 127 (expression_string -> STRING .)
    IDENTIFIER      reduce using rule 127 (expression_string -> STRING .)
    FUNCTIONS_JULIA reduce using rule 127 (expression_string -> STRING .)
    IF              reduce using rule 127 (expression_string -> STRING .)
    ELSEIF          reduce using rule 127 (expression_string -> STRING .)
    ELSE            reduce using rule 127 (expression_string -> STRING .)
    WHILE           reduce using rule 127 (expression_string -> STRING .)
    FOR             reduce using rule 127 (expression_string -> STRING .)
    FUNCTION        reduce using rule 127 (expression_string -> STRING .)
    DO              reduce using rule 127 (expression_string -> STRING .)
    TRY             reduce using rule 127 (expression_string -> STRING .)
    MODULE          reduce using rule 127 (expression_string -> STRING .)
    BEGIN           reduce using rule 127 (expression_string -> STRING .)
    USING           reduce using rule 127 (expression_string -> STRING .)
    NUMBER          reduce using rule 127 (expression_string -> STRING .)
    MINUS           reduce using rule 127 (expression_string -> STRING .)
    LEFT_PAREN      reduce using rule 127 (expression_string -> STRING .)
    LEFT_BRACKET    reduce using rule 127 (expression_string -> STRING .)
    $end            reduce using rule 127 (expression_string -> STRING .)
    END             reduce using rule 127 (expression_string -> STRING .)
    CATCH           reduce using rule 127 (expression_string -> STRING .)
    RETURN          reduce using rule 127 (expression_string -> STRING .)
    RIGHT_PAREN     reduce using rule 127 (expression_string -> STRING .)
    STRING          reduce using rule 127 (expression_string -> STRING .)
    BOOLEAN         reduce using rule 127 (expression_string -> STRING .)
    ADMIRATION      reduce using rule 127 (expression_string -> STRING .)
    RIGHT_BRACKET   reduce using rule 127 (expression_string -> STRING .)
    DOUBLEDOT       reduce using rule 127 (expression_string -> STRING .)


state 100

    (72) else_statement -> ELSE statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 165
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 101

    (69) elseif_block -> ELSEIF expression_boolean . statement_list END
    (70) elseif_block -> ELSEIF expression_boolean . statement_list ELSE statement_list END
    (71) elseif_block -> ELSEIF expression_boolean . statement_list elseif_block END
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 166
    elseif_block                   shift and go to state 9
    relation                       shift and go to state 156
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 102

    (75) while_statement -> WHILE expression_boolean . statement_list END
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 167
    relation                       shift and go to state 156
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 103

    (76) while_statement -> WHILE IDENTIFIER . relation NUMBER statement_list END
    (104) expression_boolean -> IDENTIFIER .
    (106) expression_boolean -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN
    (118) expression_number -> IDENTIFIER .
    (124) expression_number -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

  ! reduce/reduce conflict for LESS_THAN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ORSYM resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    IF              reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ELSEIF          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ELSE            reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    WHILE           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    FOR             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    FUNCTION        reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    DO              reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    TRY             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    MODULE          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    BEGIN           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    USING           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    NUMBER          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    MINUS           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    END             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 160
    DOUBLEDOT       reduce using rule 118 (expression_number -> IDENTIFIER .)
    DOT             reduce using rule 118 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 118 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 118 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 118 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 118 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 118 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 118 (expression_number -> IDENTIFIER .)
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

  ! LESS_THAN       [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! LEFT_PAREN      [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]
  ! LESS_THAN       [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]

    relation                       shift and go to state 168

state 104

    (77) for_statement -> FOR IDENTIFIER . IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> FOR IDENTIFIER . IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> FOR IDENTIFIER . LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END

    IN              shift and go to state 169
    LEFT_BRACKET    shift and go to state 170


state 105

    (53) function_definition -> FUNCTION IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> FUNCTION IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> FUNCTION IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END

    LEFT_PAREN      shift and go to state 171


state 106

    (93) statement_do -> DO statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 172
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 107

    (95) statement_try -> TRY statement_list . CATCH IDENTIFIER statement_list END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    CATCH           shift and go to state 173
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! CATCH           [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 108

    (96) statement_module -> MODULE IDENTIFIER . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 174
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 109

    (94) statement_begin -> BEGIN statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 175
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 110

    (97) statement_using -> USING IDENTIFIER .
    (98) statement_using -> USING IDENTIFIER . AS IDENTIFIER

    IDENTIFIER      reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    IF              reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    ELSEIF          reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    ELSE            reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    WHILE           reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    FOR             reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    FUNCTION        reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    DO              reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    TRY             reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    MODULE          reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    BEGIN           reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    USING           reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    NUMBER          reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    MINUS           reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    LEFT_PAREN      reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    $end            reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    END             reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    CATCH           reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    RETURN          reduce using rule 97 (statement_using -> USING IDENTIFIER .)
    AS              shift and go to state 176


state 111

    (81) identifierDecl -> identifierDecl COMMA IDENTIFIER . assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (74) assignment -> . IDENTIFIER ASSIGN expression
    (111) assignment -> . ASSIGN

    IDENTIFIER      shift and go to state 48
    ASSIGN          shift and go to state 89

    assignment                     shift and go to state 177

state 112

    (82) identifierDecl -> identifierDecl NEWLINE IDENTIFIER . assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (74) assignment -> . IDENTIFIER ASSIGN expression
    (111) assignment -> . ASSIGN

    IDENTIFIER      shift and go to state 48
    ASSIGN          shift and go to state 89

    assignment                     shift and go to state 178

state 113

    (74) assignment -> IDENTIFIER ASSIGN . expression
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    expression                     shift and go to state 179
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 114

    (24) identifierDecl -> IDENTIFIER assignment_number expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

    COMMA           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    NEWLINE         reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    IDENTIFIER      reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    FUNCTIONS_JULIA reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    IF              reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    ELSEIF          reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    ELSE            reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    WHILE           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    FOR             reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    FUNCTION        reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    DO              reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    TRY             reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    MODULE          reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    BEGIN           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    USING           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    NUMBER          reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    LEFT_PAREN      reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    LEFT_BRACKET    reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    $end            reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    END             reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    CATCH           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    RETURN          reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

  ! MINUS           [ reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .) ]

    operator_arithmetic            shift and go to state 61

state 115

    (118) expression_number -> IDENTIFIER .
    (124) expression_number -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN
    (104) expression_boolean -> IDENTIFIER .
    (106) expression_boolean -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN

  ! reduce/reduce conflict for LESS_THAN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ORSYM resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSE resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for DO resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for TRY resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for BEGIN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for USING resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for END resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for CATCH resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ADMIRATION resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLEDOT resolved using rule 104 (expression_boolean -> IDENTIFIER .)
    DOT             reduce using rule 118 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 118 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 118 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 118 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 118 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 118 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 118 (expression_number -> IDENTIFIER .)
    SEMICOLON       reduce using rule 118 (expression_number -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 180
    LESS_THAN       reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    EQUALS          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    AND             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ANDSYM          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    OR              reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ORSYM           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    COMMA           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    NEWLINE         reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    IF              reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ELSEIF          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ELSE            reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    WHILE           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    FOR             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    FUNCTION        reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    DO              reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    TRY             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    MODULE          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    BEGIN           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    USING           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    NUMBER          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    MINUS           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    $end            reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    END             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    CATCH           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    RETURN          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    STRING          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    BOOLEAN         reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ADMIRATION      reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    DOUBLEDOT       reduce using rule 104 (expression_boolean -> IDENTIFIER .)

  ! DOUBLEDOT       [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN       [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! NEWLINE         [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ELSEIF          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ELSE            [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! FUNCTION        [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! DO              [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! TRY             [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! BEGIN           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! USING           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! LEFT_PAREN      [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! LEFT_BRACKET    [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! END             [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! CATCH           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! BOOLEAN         [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ADMIRATION      [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_BRACKET   [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! LEFT_PAREN      [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]


state 116

    (25) identifierDecl -> IDENTIFIER assignment expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (110) expression_boolean -> expression_number . relation expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    COMMA           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    NEWLINE         reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    IDENTIFIER      reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    FUNCTIONS_JULIA reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    IF              reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    ELSEIF          reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    ELSE            reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    WHILE           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    FOR             reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    FUNCTION        reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    DO              reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    TRY             reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    MODULE          reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    BEGIN           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    USING           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    NUMBER          reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    LEFT_PAREN      reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    LEFT_BRACKET    reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    $end            reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    END             reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    CATCH           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    RETURN          reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

  ! MINUS           [ reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .) ]

    operator_arithmetic            shift and go to state 61
    relation                       shift and go to state 164

state 117

    (26) identifierDecl -> IDENTIFIER assignment expression_string .
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string
    (109) expression_boolean -> expression_string . relation expression_string
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    COMMA           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    NEWLINE         reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    IDENTIFIER      reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    FUNCTIONS_JULIA reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    IF              reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    ELSEIF          reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    ELSE            reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    WHILE           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    FOR             reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    FUNCTION        reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    DO              reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    TRY             reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    MODULE          reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    BEGIN           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    USING           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    NUMBER          reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    MINUS           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    LEFT_PAREN      reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    LEFT_BRACKET    reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    $end            reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    END             reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    CATCH           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    RETURN          reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    MULTIPLY        shift and go to state 163
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 162

state 118

    (27) identifierDecl -> IDENTIFIER assignment expression_boolean .
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    COMMA           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    NEWLINE         reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    IDENTIFIER      reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    IF              reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    ELSEIF          reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    ELSE            reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    WHILE           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    FOR             reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    FUNCTION        reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    DO              reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    TRY             reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    MODULE          reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    BEGIN           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    USING           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    NUMBER          reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    MINUS           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    LEFT_PAREN      reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    LEFT_BRACKET    reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    $end            reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    END             reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    CATCH           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    RETURN          reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 156

state 119

    (28) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA . LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA . LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN

    LEFT_PAREN      shift and go to state 181


state 120

    (125) expression_number -> LEFT_PAREN . expression_number RIGHT_PAREN
    (128) expression_string -> LEFT_PAREN . expression_string RIGHT_PAREN
    (103) expression_boolean -> LEFT_PAREN . expression_boolean RIGHT_PAREN
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    expression_number              shift and go to state 182
    expression_string              shift and go to state 183
    expression_boolean             shift and go to state 157

state 121

    (80) identifierDecl -> IDENTIFIER assignment LEFT_BRACKET . array_elements RIGHT_BRACKET
    (126) expression_number -> LEFT_BRACKET . expression_number RIGHT_BRACKET
    (83) array_elements -> . expression_number
    (84) array_elements -> . expression_string
    (85) array_elements -> . expression_boolean
    (86) array_elements -> . empty
    (87) array_elements -> . array_elements COMMA expression_number
    (88) array_elements -> . expression_number SEMICOLON expression_number
    (89) array_elements -> . array_elements COMMA expression_string
    (90) array_elements -> . array_elements COMMA expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (91) empty -> .

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    RIGHT_BRACKET   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)

    array_elements                 shift and go to state 184
    expression_number              shift and go to state 185
    expression_string              shift and go to state 186
    expression_boolean             shift and go to state 187
    empty                          shift and go to state 188

state 122

    (92) statement_call_function -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN
    (124) expression_number -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 189


state 123

    (61) argument_list -> expression .
    (62) argument_list -> expression . COMMA argument_list

    RIGHT_PAREN     reduce using rule 61 (argument_list -> expression .)
    COMMA           shift and go to state 190


state 124

    (63) argument_list -> statement_do .

    RIGHT_PAREN     reduce using rule 63 (argument_list -> statement_do .)


state 125

    (64) argument_list -> empty .

    RIGHT_PAREN     reduce using rule 64 (argument_list -> empty .)


state 126

    (100) expression -> expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (110) expression_boolean -> expression_number . relation expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 100 (expression -> expression_number .)
    RIGHT_PAREN     reduce using rule 100 (expression -> expression_number .)
    FUNCTIONS_JULIA reduce using rule 100 (expression -> expression_number .)
    LEFT_BRACKET    reduce using rule 100 (expression -> expression_number .)
    IDENTIFIER      reduce using rule 100 (expression -> expression_number .)
    NUMBER          reduce using rule 100 (expression -> expression_number .)
    LEFT_PAREN      reduce using rule 100 (expression -> expression_number .)
    STRING          reduce using rule 100 (expression -> expression_number .)
    BOOLEAN         reduce using rule 100 (expression -> expression_number .)
    ADMIRATION      reduce using rule 100 (expression -> expression_number .)
    IF              reduce using rule 100 (expression -> expression_number .)
    ELSEIF          reduce using rule 100 (expression -> expression_number .)
    ELSE            reduce using rule 100 (expression -> expression_number .)
    WHILE           reduce using rule 100 (expression -> expression_number .)
    FOR             reduce using rule 100 (expression -> expression_number .)
    FUNCTION        reduce using rule 100 (expression -> expression_number .)
    DO              reduce using rule 100 (expression -> expression_number .)
    TRY             reduce using rule 100 (expression -> expression_number .)
    MODULE          reduce using rule 100 (expression -> expression_number .)
    BEGIN           reduce using rule 100 (expression -> expression_number .)
    USING           reduce using rule 100 (expression -> expression_number .)
    $end            reduce using rule 100 (expression -> expression_number .)
    END             reduce using rule 100 (expression -> expression_number .)
    CATCH           reduce using rule 100 (expression -> expression_number .)
    RETURN          reduce using rule 100 (expression -> expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

  ! MINUS           [ reduce using rule 100 (expression -> expression_number .) ]

    operator_arithmetic            shift and go to state 61
    relation                       shift and go to state 164

state 127

    (101) expression -> expression_string .
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string
    (109) expression_boolean -> expression_string . relation expression_string
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    COMMA           reduce using rule 101 (expression -> expression_string .)
    RIGHT_PAREN     reduce using rule 101 (expression -> expression_string .)
    FUNCTIONS_JULIA reduce using rule 101 (expression -> expression_string .)
    LEFT_BRACKET    reduce using rule 101 (expression -> expression_string .)
    IDENTIFIER      reduce using rule 101 (expression -> expression_string .)
    NUMBER          reduce using rule 101 (expression -> expression_string .)
    MINUS           reduce using rule 101 (expression -> expression_string .)
    LEFT_PAREN      reduce using rule 101 (expression -> expression_string .)
    STRING          reduce using rule 101 (expression -> expression_string .)
    BOOLEAN         reduce using rule 101 (expression -> expression_string .)
    ADMIRATION      reduce using rule 101 (expression -> expression_string .)
    DOUBLEDOT       reduce using rule 101 (expression -> expression_string .)
    IF              reduce using rule 101 (expression -> expression_string .)
    ELSEIF          reduce using rule 101 (expression -> expression_string .)
    ELSE            reduce using rule 101 (expression -> expression_string .)
    WHILE           reduce using rule 101 (expression -> expression_string .)
    FOR             reduce using rule 101 (expression -> expression_string .)
    FUNCTION        reduce using rule 101 (expression -> expression_string .)
    DO              reduce using rule 101 (expression -> expression_string .)
    TRY             reduce using rule 101 (expression -> expression_string .)
    MODULE          reduce using rule 101 (expression -> expression_string .)
    BEGIN           reduce using rule 101 (expression -> expression_string .)
    USING           reduce using rule 101 (expression -> expression_string .)
    $end            reduce using rule 101 (expression -> expression_string .)
    END             reduce using rule 101 (expression -> expression_string .)
    CATCH           reduce using rule 101 (expression -> expression_string .)
    RETURN          reduce using rule 101 (expression -> expression_string .)
    MULTIPLY        shift and go to state 163
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 162

state 128

    (102) expression -> expression_boolean .
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    COMMA           reduce using rule 102 (expression -> expression_boolean .)
    RIGHT_PAREN     reduce using rule 102 (expression -> expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 102 (expression -> expression_boolean .)
    LEFT_BRACKET    reduce using rule 102 (expression -> expression_boolean .)
    IDENTIFIER      reduce using rule 102 (expression -> expression_boolean .)
    NUMBER          reduce using rule 102 (expression -> expression_boolean .)
    MINUS           reduce using rule 102 (expression -> expression_boolean .)
    LEFT_PAREN      reduce using rule 102 (expression -> expression_boolean .)
    STRING          reduce using rule 102 (expression -> expression_boolean .)
    BOOLEAN         reduce using rule 102 (expression -> expression_boolean .)
    ADMIRATION      reduce using rule 102 (expression -> expression_boolean .)
    DOUBLEDOT       reduce using rule 102 (expression -> expression_boolean .)
    IF              reduce using rule 102 (expression -> expression_boolean .)
    ELSEIF          reduce using rule 102 (expression -> expression_boolean .)
    ELSE            reduce using rule 102 (expression -> expression_boolean .)
    WHILE           reduce using rule 102 (expression -> expression_boolean .)
    FOR             reduce using rule 102 (expression -> expression_boolean .)
    FUNCTION        reduce using rule 102 (expression -> expression_boolean .)
    DO              reduce using rule 102 (expression -> expression_boolean .)
    TRY             reduce using rule 102 (expression -> expression_boolean .)
    MODULE          reduce using rule 102 (expression -> expression_boolean .)
    BEGIN           reduce using rule 102 (expression -> expression_boolean .)
    USING           reduce using rule 102 (expression -> expression_boolean .)
    $end            reduce using rule 102 (expression -> expression_boolean .)
    END             reduce using rule 102 (expression -> expression_boolean .)
    CATCH           reduce using rule 102 (expression -> expression_boolean .)
    RETURN          reduce using rule 102 (expression -> expression_boolean .)
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 156

state 129

    (45) array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET . array_values RIGHT_BRACKET
    (46) array_values -> . array_values COMMA NUMBER
    (47) array_values -> . NUMBER

    NUMBER          shift and go to state 192

    array_values                   shift and go to state 191

state 130

    (56) statement_function -> IDENTIFIER ASSIGN LEFT_PAREN . argument_list RIGHT_PAREN ARROW expression
    (61) argument_list -> . expression
    (62) argument_list -> . expression COMMA argument_list
    (63) argument_list -> . statement_do
    (64) argument_list -> . empty
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (93) statement_do -> . DO statement_list END
    (91) empty -> .
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    DO              shift and go to state 38
    RIGHT_PAREN     reduce using rule 91 (empty -> .)
    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    argument_list                  shift and go to state 193
    expression                     shift and go to state 123
    statement_do                   shift and go to state 124
    empty                          shift and go to state 125
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 131

    (48) array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE . IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    IDENTIFIER      shift and go to state 194


state 132

    (121) expression_number -> expression_number DOUBLEDOT expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    FUNCTIONS_JULIA reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    RIGHT_PAREN     reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    RIGHT_BRACKET   reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LESS_THAN       reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    GREATER_THAN    reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    EQUALS          reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    NOT_EQUALS      reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    AND             reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ANDSYM          reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    OR              reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ORSYM           reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    COMMA           reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    NEWLINE         reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    IDENTIFIER      reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    IF              reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ELSEIF          reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ELSE            reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    WHILE           reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    FOR             reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    FUNCTION        reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    DO              reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    TRY             reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    MODULE          reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    BEGIN           reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    USING           reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    NUMBER          reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LEFT_PAREN      reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LEFT_BRACKET    reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    $end            reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    END             reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    CATCH           reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    RETURN          reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    STRING          reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    BOOLEAN         reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ADMIRATION      reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    SEMICOLON       reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

  ! DOUBLEDOT       [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! DOT             [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! PLUS            [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! MINUS           [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! MULTIPLY        [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! DIVIDE          [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! PERCENT         [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! EXPONENT        [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]

    operator_arithmetic            shift and go to state 61

state 133

    (120) expression_number -> expression_number operator_arithmetic expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    FUNCTIONS_JULIA reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    RIGHT_PAREN     reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    RIGHT_BRACKET   reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    LESS_THAN       reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    GREATER_THAN    reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    EQUALS          reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    NOT_EQUALS      reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    AND             reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    ANDSYM          reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    OR              reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    ORSYM           reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    COMMA           reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    NEWLINE         reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    IDENTIFIER      reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    IF              reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    ELSEIF          reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    ELSE            reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    WHILE           reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    FOR             reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    FUNCTION        reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    DO              reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    TRY             reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    MODULE          reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    BEGIN           reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    USING           reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    NUMBER          reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    LEFT_PAREN      reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    LEFT_BRACKET    reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    $end            reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    END             reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    CATCH           reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    RETURN          reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    STRING          reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    BOOLEAN         reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    ADMIRATION      reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    SEMICOLON       reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

  ! DOUBLEDOT       [ reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! DOT             [ reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! PLUS            [ reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! MINUS           [ reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! MULTIPLY        [ reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! DIVIDE          [ reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! PERCENT         [ reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! EXPONENT        [ reduce using rule 120 (expression_number -> expression_number operator_arithmetic expression_number .) ]

    operator_arithmetic            shift and go to state 61

state 134

    (122) expression_number -> expression_number DOT expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    FUNCTIONS_JULIA reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    RIGHT_PAREN     reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    RIGHT_BRACKET   reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    LESS_THAN       reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    GREATER_THAN    reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    EQUALS          reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    NOT_EQUALS      reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    AND             reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    ANDSYM          reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    OR              reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    ORSYM           reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    COMMA           reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    NEWLINE         reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    IDENTIFIER      reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    IF              reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    ELSEIF          reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    ELSE            reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    WHILE           reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    FOR             reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    FUNCTION        reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    DO              reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    TRY             reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    MODULE          reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    BEGIN           reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    USING           reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    NUMBER          reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    LEFT_PAREN      reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    LEFT_BRACKET    reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    $end            reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    END             reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    CATCH           reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    RETURN          reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    STRING          reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    BOOLEAN         reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    ADMIRATION      reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    SEMICOLON       reduce using rule 122 (expression_number -> expression_number DOT expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

  ! DOUBLEDOT       [ reduce using rule 122 (expression_number -> expression_number DOT expression_number .) ]
  ! DOT             [ reduce using rule 122 (expression_number -> expression_number DOT expression_number .) ]
  ! PLUS            [ reduce using rule 122 (expression_number -> expression_number DOT expression_number .) ]
  ! MINUS           [ reduce using rule 122 (expression_number -> expression_number DOT expression_number .) ]
  ! MULTIPLY        [ reduce using rule 122 (expression_number -> expression_number DOT expression_number .) ]
  ! DIVIDE          [ reduce using rule 122 (expression_number -> expression_number DOT expression_number .) ]
  ! PERCENT         [ reduce using rule 122 (expression_number -> expression_number DOT expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 122 (expression_number -> expression_number DOT expression_number .) ]
  ! EXPONENT        [ reduce using rule 122 (expression_number -> expression_number DOT expression_number .) ]

    operator_arithmetic            shift and go to state 61

state 135

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA . LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia

    LEFT_PAREN      shift and go to state 195


state 136

    (30) identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER . ASSIGN statement_function_julia
    (31) identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER . ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia

    ASSIGN          shift and go to state 196


state 137

    (57) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 197


state 138

    (58) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER . RIGHT_PAREN
    (59) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER . DOT NUMBER RIGHT_PAREN
    (119) expression_number -> NUMBER .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 198
    DOT             shift and go to state 199
    DOUBLEDOT       reduce using rule 119 (expression_number -> NUMBER .)
    PLUS            reduce using rule 119 (expression_number -> NUMBER .)
    MINUS           reduce using rule 119 (expression_number -> NUMBER .)
    MULTIPLY        reduce using rule 119 (expression_number -> NUMBER .)
    DIVIDE          reduce using rule 119 (expression_number -> NUMBER .)
    PERCENT         reduce using rule 119 (expression_number -> NUMBER .)
    SQUAREROOT      reduce using rule 119 (expression_number -> NUMBER .)
    EXPONENT        reduce using rule 119 (expression_number -> NUMBER .)
    LESS_THAN       reduce using rule 119 (expression_number -> NUMBER .)
    LESS_THAN_OR_EQUAL reduce using rule 119 (expression_number -> NUMBER .)
    GREATER_THAN    reduce using rule 119 (expression_number -> NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 119 (expression_number -> NUMBER .)
    EQUALS          reduce using rule 119 (expression_number -> NUMBER .)
    NOT_EQUALS      reduce using rule 119 (expression_number -> NUMBER .)
    AND             reduce using rule 119 (expression_number -> NUMBER .)
    ANDSYM          reduce using rule 119 (expression_number -> NUMBER .)
    OR              reduce using rule 119 (expression_number -> NUMBER .)
    ORSYM           reduce using rule 119 (expression_number -> NUMBER .)
    COMMA           reduce using rule 119 (expression_number -> NUMBER .)

  ! DOT             [ reduce using rule 119 (expression_number -> NUMBER .) ]
  ! RIGHT_PAREN     [ reduce using rule 119 (expression_number -> NUMBER .) ]


state 139

    (60) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER . RIGHT_PAREN
    (118) expression_number -> IDENTIFIER .
    (124) expression_number -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN
    (104) expression_boolean -> IDENTIFIER .
    (106) expression_boolean -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN

  ! reduce/reduce conflict for LESS_THAN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ORSYM resolved using rule 104 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 104 (expression_boolean -> IDENTIFIER .)
    RIGHT_PAREN     shift and go to state 200
    DOUBLEDOT       reduce using rule 118 (expression_number -> IDENTIFIER .)
    DOT             reduce using rule 118 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 118 (expression_number -> IDENTIFIER .)
    MINUS           reduce using rule 118 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 118 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 118 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 118 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 118 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 118 (expression_number -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 180
    LESS_THAN       reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    EQUALS          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    AND             reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ANDSYM          reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    OR              reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    ORSYM           reduce using rule 104 (expression_boolean -> IDENTIFIER .)
    COMMA           reduce using rule 104 (expression_boolean -> IDENTIFIER .)

  ! LESS_THAN       [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 118 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 104 (expression_boolean -> IDENTIFIER .) ]


state 140

    (125) expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .

    FUNCTIONS_JULIA reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    DOT             reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    PLUS            reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    MINUS           reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    MULTIPLY        reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    DIVIDE          reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    PERCENT         reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    EXPONENT        reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    LESS_THAN       reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    EQUALS          reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    AND             reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ANDSYM          reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    OR              reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ORSYM           reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    COMMA           reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    NEWLINE         reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    IF              reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ELSEIF          reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ELSE            reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    WHILE           reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    FOR             reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    FUNCTION        reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    DO              reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    TRY             reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    MODULE          reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    BEGIN           reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    USING           reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    NUMBER          reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    $end            reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    END             reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    CATCH           reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    RETURN          reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    STRING          reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    BOOLEAN         reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ADMIRATION      reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    SEMICOLON       reduce using rule 125 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)


state 141

    (124) expression_number -> IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN
    (61) argument_list -> . expression
    (62) argument_list -> . expression COMMA argument_list
    (63) argument_list -> . statement_do
    (64) argument_list -> . empty
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (93) statement_do -> . DO statement_list END
    (91) empty -> .
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    DO              shift and go to state 38
    RIGHT_PAREN     reduce using rule 91 (empty -> .)
    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    argument_list                  shift and go to state 201
    expression                     shift and go to state 123
    statement_do                   shift and go to state 124
    empty                          shift and go to state 125
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 142

    (126) expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .

    FUNCTIONS_JULIA reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    DOUBLEDOT       reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    DOT             reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    PLUS            reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    MINUS           reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    DIVIDE          reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    PERCENT         reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    SQUAREROOT      reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    EXPONENT        reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    LESS_THAN_OR_EQUAL reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    GREATER_THAN_OR_EQUAL reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    EQUALS          reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    NOT_EQUALS      reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    AND             reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ANDSYM          reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    OR              reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ORSYM           reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    COMMA           reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    NEWLINE         reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    IF              reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ELSEIF          reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ELSE            reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    WHILE           reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    FOR             reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    FUNCTION        reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    DO              reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    TRY             reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    MODULE          reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    BEGIN           reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    USING           reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    NUMBER          reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    $end            reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    END             reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    CATCH           reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    RETURN          reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    STRING          reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    BOOLEAN         reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ADMIRATION      reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 126 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)


state 143

    (33) identifierDecl -> identifierList assignment_number expression_number_list .
    (36) expression_number_list -> expression_number_list . COMMA expression_number

  ! shift/reduce conflict for COMMA resolved as shift
    NEWLINE         reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    IDENTIFIER      reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    FUNCTIONS_JULIA reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    IF              reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    ELSEIF          reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    ELSE            reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    WHILE           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    FOR             reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    FUNCTION        reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    DO              reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    TRY             reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    MODULE          reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    BEGIN           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    USING           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    NUMBER          reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    MINUS           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    LEFT_PAREN      reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    LEFT_BRACKET    reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    $end            reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    END             reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    CATCH           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    RETURN          reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    COMMA           shift and go to state 202

  ! COMMA           [ reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .) ]


state 144

    (41) identifierDecl -> identifierList assignment_number expression_string_list .
    (38) expression_string_list -> expression_string_list . COMMA expression_string

  ! shift/reduce conflict for COMMA resolved as shift
    NEWLINE         reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    IDENTIFIER      reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    FUNCTIONS_JULIA reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    IF              reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    ELSEIF          reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    ELSE            reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    WHILE           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    FOR             reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    FUNCTION        reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    DO              reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    TRY             reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    MODULE          reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    BEGIN           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    USING           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    NUMBER          reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    MINUS           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    LEFT_PAREN      reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    LEFT_BRACKET    reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    $end            reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    END             reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    CATCH           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    RETURN          reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    COMMA           shift and go to state 203

  ! COMMA           [ reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .) ]


state 145

    (35) expression_number_list -> expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 35 (expression_number_list -> expression_number .)
    NEWLINE         reduce using rule 35 (expression_number_list -> expression_number .)
    IDENTIFIER      reduce using rule 35 (expression_number_list -> expression_number .)
    FUNCTIONS_JULIA reduce using rule 35 (expression_number_list -> expression_number .)
    IF              reduce using rule 35 (expression_number_list -> expression_number .)
    ELSEIF          reduce using rule 35 (expression_number_list -> expression_number .)
    ELSE            reduce using rule 35 (expression_number_list -> expression_number .)
    WHILE           reduce using rule 35 (expression_number_list -> expression_number .)
    FOR             reduce using rule 35 (expression_number_list -> expression_number .)
    FUNCTION        reduce using rule 35 (expression_number_list -> expression_number .)
    DO              reduce using rule 35 (expression_number_list -> expression_number .)
    TRY             reduce using rule 35 (expression_number_list -> expression_number .)
    MODULE          reduce using rule 35 (expression_number_list -> expression_number .)
    BEGIN           reduce using rule 35 (expression_number_list -> expression_number .)
    USING           reduce using rule 35 (expression_number_list -> expression_number .)
    NUMBER          reduce using rule 35 (expression_number_list -> expression_number .)
    LEFT_PAREN      reduce using rule 35 (expression_number_list -> expression_number .)
    LEFT_BRACKET    reduce using rule 35 (expression_number_list -> expression_number .)
    $end            reduce using rule 35 (expression_number_list -> expression_number .)
    END             reduce using rule 35 (expression_number_list -> expression_number .)
    CATCH           reduce using rule 35 (expression_number_list -> expression_number .)
    RETURN          reduce using rule 35 (expression_number_list -> expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

  ! MINUS           [ reduce using rule 35 (expression_number_list -> expression_number .) ]

    operator_arithmetic            shift and go to state 61

state 146

    (37) expression_string_list -> expression_string .
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string

    COMMA           reduce using rule 37 (expression_string_list -> expression_string .)
    NEWLINE         reduce using rule 37 (expression_string_list -> expression_string .)
    IDENTIFIER      reduce using rule 37 (expression_string_list -> expression_string .)
    FUNCTIONS_JULIA reduce using rule 37 (expression_string_list -> expression_string .)
    IF              reduce using rule 37 (expression_string_list -> expression_string .)
    ELSEIF          reduce using rule 37 (expression_string_list -> expression_string .)
    ELSE            reduce using rule 37 (expression_string_list -> expression_string .)
    WHILE           reduce using rule 37 (expression_string_list -> expression_string .)
    FOR             reduce using rule 37 (expression_string_list -> expression_string .)
    FUNCTION        reduce using rule 37 (expression_string_list -> expression_string .)
    DO              reduce using rule 37 (expression_string_list -> expression_string .)
    TRY             reduce using rule 37 (expression_string_list -> expression_string .)
    MODULE          reduce using rule 37 (expression_string_list -> expression_string .)
    BEGIN           reduce using rule 37 (expression_string_list -> expression_string .)
    USING           reduce using rule 37 (expression_string_list -> expression_string .)
    NUMBER          reduce using rule 37 (expression_string_list -> expression_string .)
    MINUS           reduce using rule 37 (expression_string_list -> expression_string .)
    LEFT_PAREN      reduce using rule 37 (expression_string_list -> expression_string .)
    LEFT_BRACKET    reduce using rule 37 (expression_string_list -> expression_string .)
    $end            reduce using rule 37 (expression_string_list -> expression_string .)
    END             reduce using rule 37 (expression_string_list -> expression_string .)
    CATCH           reduce using rule 37 (expression_string_list -> expression_string .)
    RETURN          reduce using rule 37 (expression_string_list -> expression_string .)
    MULTIPLY        shift and go to state 163


state 147

    (125) expression_number -> LEFT_PAREN . expression_number RIGHT_PAREN
    (128) expression_string -> LEFT_PAREN . expression_string RIGHT_PAREN
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 147
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99

    expression_number              shift and go to state 82
    expression_string              shift and go to state 204

state 148

    (34) identifierDecl -> identifierList assignment expression_number_list .
    (36) expression_number_list -> expression_number_list . COMMA expression_number

  ! shift/reduce conflict for COMMA resolved as shift
    NEWLINE         reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    IDENTIFIER      reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    FUNCTIONS_JULIA reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    IF              reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    ELSEIF          reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    ELSE            reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    WHILE           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    FOR             reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    FUNCTION        reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    DO              reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    TRY             reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    MODULE          reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    BEGIN           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    USING           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    NUMBER          reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    MINUS           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    LEFT_PAREN      reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    LEFT_BRACKET    reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    $end            reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    END             reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    CATCH           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    RETURN          reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    COMMA           shift and go to state 202

  ! COMMA           [ reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .) ]


state 149

    (42) identifierDecl -> identifierList assignment expression_boolean_list .
    (40) expression_boolean_list -> expression_boolean_list . COMMA expression_boolean

  ! shift/reduce conflict for COMMA resolved as shift
    NEWLINE         reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    IDENTIFIER      reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    FUNCTIONS_JULIA reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    IF              reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    ELSEIF          reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    ELSE            reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    WHILE           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    FOR             reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    FUNCTION        reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    DO              reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    TRY             reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    MODULE          reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    BEGIN           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    USING           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    NUMBER          reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    MINUS           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    LEFT_PAREN      reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    LEFT_BRACKET    reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    $end            reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    END             reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    CATCH           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    RETURN          reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    COMMA           shift and go to state 205

  ! COMMA           [ reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .) ]


state 150

    (35) expression_number_list -> expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (110) expression_boolean -> expression_number . relation expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 35 (expression_number_list -> expression_number .)
    NEWLINE         reduce using rule 35 (expression_number_list -> expression_number .)
    IDENTIFIER      reduce using rule 35 (expression_number_list -> expression_number .)
    FUNCTIONS_JULIA reduce using rule 35 (expression_number_list -> expression_number .)
    IF              reduce using rule 35 (expression_number_list -> expression_number .)
    ELSEIF          reduce using rule 35 (expression_number_list -> expression_number .)
    ELSE            reduce using rule 35 (expression_number_list -> expression_number .)
    WHILE           reduce using rule 35 (expression_number_list -> expression_number .)
    FOR             reduce using rule 35 (expression_number_list -> expression_number .)
    FUNCTION        reduce using rule 35 (expression_number_list -> expression_number .)
    DO              reduce using rule 35 (expression_number_list -> expression_number .)
    TRY             reduce using rule 35 (expression_number_list -> expression_number .)
    MODULE          reduce using rule 35 (expression_number_list -> expression_number .)
    BEGIN           reduce using rule 35 (expression_number_list -> expression_number .)
    USING           reduce using rule 35 (expression_number_list -> expression_number .)
    NUMBER          reduce using rule 35 (expression_number_list -> expression_number .)
    LEFT_PAREN      reduce using rule 35 (expression_number_list -> expression_number .)
    LEFT_BRACKET    reduce using rule 35 (expression_number_list -> expression_number .)
    $end            reduce using rule 35 (expression_number_list -> expression_number .)
    END             reduce using rule 35 (expression_number_list -> expression_number .)
    CATCH           reduce using rule 35 (expression_number_list -> expression_number .)
    RETURN          reduce using rule 35 (expression_number_list -> expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

  ! MINUS           [ reduce using rule 35 (expression_number_list -> expression_number .) ]

    operator_arithmetic            shift and go to state 61
    relation                       shift and go to state 164

state 151

    (39) expression_boolean_list -> expression_boolean .
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    COMMA           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    NEWLINE         reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    IDENTIFIER      reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    IF              reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    ELSEIF          reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    ELSE            reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    WHILE           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    FOR             reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    FUNCTION        reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    DO              reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    TRY             reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    MODULE          reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    BEGIN           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    USING           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    NUMBER          reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    MINUS           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    LEFT_PAREN      reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    LEFT_BRACKET    reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    $end            reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    END             reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    CATCH           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    RETURN          reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 156

state 152

    (125) expression_number -> LEFT_PAREN . expression_number RIGHT_PAREN
    (103) expression_boolean -> LEFT_PAREN . expression_boolean RIGHT_PAREN
    (128) expression_string -> LEFT_PAREN . expression_string RIGHT_PAREN
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 152
    LEFT_BRACKET    shift and go to state 27
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    STRING          shift and go to state 99

    expression_number              shift and go to state 182
    expression_boolean             shift and go to state 157
    expression_string              shift and go to state 158

state 153

    (44) identifierList -> identifierList COMMA IDENTIFIER .

    COMMA           reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    SUMASIGN        reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    MINASIGN        reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    MULTASIGN       reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    DIVASIGN        reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    MODULEASIGN     reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    EXPONENTASIGN   reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    IDENTIFIER      reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    ASSIGN          reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)


state 154

    (49) array_estatement_julia -> values MINUS FUNCTIONS_JULIA . FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    FUNCTIONS_JULIA shift and go to state 206


state 155

    (65) if_statement -> IF expression_boolean statement_list . END
    (66) if_statement -> IF expression_boolean statement_list . ELSE statement_list END
    (67) if_statement -> IF expression_boolean statement_list . elseif_block statement_list ELSE statement_list END
    (68) if_statement -> IF expression_boolean statement_list . elseif_block END
    (6) statement_list -> statement_list . statement
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 207
    ELSE            shift and go to state 208
    ELSEIF          shift and go to state 34
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    elseif_block                   shift and go to state 209
    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 156

    (107) expression_boolean -> expression_boolean relation . expression_boolean
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    LEFT_PAREN      shift and go to state 93
    IDENTIFIER      shift and go to state 94
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    STRING          shift and go to state 99
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 210
    expression_string              shift and go to state 97
    expression_number              shift and go to state 98

state 157

    (103) expression_boolean -> LEFT_PAREN expression_boolean . RIGHT_PAREN
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_PAREN     shift and go to state 211
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 156

state 158

    (128) expression_string -> LEFT_PAREN expression_string . RIGHT_PAREN
    (109) expression_boolean -> expression_string . relation expression_string
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_PAREN     shift and go to state 212
    MULTIPLY        shift and go to state 163
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 162

state 159

    (125) expression_number -> LEFT_PAREN expression_number . RIGHT_PAREN
    (110) expression_boolean -> expression_number . relation expression_number
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

    RIGHT_PAREN     shift and go to state 140
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

    relation                       shift and go to state 164
    operator_arithmetic            shift and go to state 61

state 160

    (106) expression_boolean -> IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN
    (124) expression_number -> IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN
    (61) argument_list -> . expression
    (62) argument_list -> . expression COMMA argument_list
    (63) argument_list -> . statement_do
    (64) argument_list -> . empty
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (93) statement_do -> . DO statement_list END
    (91) empty -> .
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    DO              shift and go to state 38
    RIGHT_PAREN     reduce using rule 91 (empty -> .)
    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    argument_list                  shift and go to state 213
    expression                     shift and go to state 123
    statement_do                   shift and go to state 124
    empty                          shift and go to state 125
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 161

    (108) expression_boolean -> ADMIRATION expression_boolean .
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for ANDSYM resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for ORSYM resolved as shift
    IDENTIFIER      reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    IF              reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    ELSEIF          reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    ELSE            reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    WHILE           reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    FOR             reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    FUNCTION        reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    DO              reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    TRY             reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    MODULE          reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    BEGIN           reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    USING           reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    NUMBER          reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    MINUS           reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    LEFT_PAREN      reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    LEFT_BRACKET    reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    END             reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    COMMA           reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    NEWLINE         reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    $end            reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    CATCH           reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    RETURN          reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    RIGHT_PAREN     reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    STRING          reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    BOOLEAN         reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    ADMIRATION      reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    RIGHT_BRACKET   reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    DOUBLEDOT       reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .)
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

  ! LESS_THAN       [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! GREATER_THAN    [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! EQUALS          [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! NOT_EQUALS      [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! AND             [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! ANDSYM          [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! OR              [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! ORSYM           [ reduce using rule 108 (expression_boolean -> ADMIRATION expression_boolean .) ]

    relation                       shift and go to state 156

state 162

    (109) expression_boolean -> expression_string relation . expression_string
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string

    STRING          shift and go to state 99
    LEFT_PAREN      shift and go to state 215

    expression_string              shift and go to state 214

state 163

    (129) expression_string -> expression_string MULTIPLY . expression_number
    (130) expression_string -> expression_string MULTIPLY . expression_string
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 147
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99

    expression_string              shift and go to state 216
    expression_number              shift and go to state 217

state 164

    (110) expression_boolean -> expression_number relation . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 218

state 165

    (72) else_statement -> ELSE statement_list END .

    IDENTIFIER      reduce using rule 72 (else_statement -> ELSE statement_list END .)
    FUNCTIONS_JULIA reduce using rule 72 (else_statement -> ELSE statement_list END .)
    IF              reduce using rule 72 (else_statement -> ELSE statement_list END .)
    ELSEIF          reduce using rule 72 (else_statement -> ELSE statement_list END .)
    ELSE            reduce using rule 72 (else_statement -> ELSE statement_list END .)
    WHILE           reduce using rule 72 (else_statement -> ELSE statement_list END .)
    FOR             reduce using rule 72 (else_statement -> ELSE statement_list END .)
    FUNCTION        reduce using rule 72 (else_statement -> ELSE statement_list END .)
    DO              reduce using rule 72 (else_statement -> ELSE statement_list END .)
    TRY             reduce using rule 72 (else_statement -> ELSE statement_list END .)
    MODULE          reduce using rule 72 (else_statement -> ELSE statement_list END .)
    BEGIN           reduce using rule 72 (else_statement -> ELSE statement_list END .)
    USING           reduce using rule 72 (else_statement -> ELSE statement_list END .)
    NUMBER          reduce using rule 72 (else_statement -> ELSE statement_list END .)
    MINUS           reduce using rule 72 (else_statement -> ELSE statement_list END .)
    LEFT_PAREN      reduce using rule 72 (else_statement -> ELSE statement_list END .)
    LEFT_BRACKET    reduce using rule 72 (else_statement -> ELSE statement_list END .)
    $end            reduce using rule 72 (else_statement -> ELSE statement_list END .)
    END             reduce using rule 72 (else_statement -> ELSE statement_list END .)
    CATCH           reduce using rule 72 (else_statement -> ELSE statement_list END .)
    RETURN          reduce using rule 72 (else_statement -> ELSE statement_list END .)


state 166

    (69) elseif_block -> ELSEIF expression_boolean statement_list . END
    (70) elseif_block -> ELSEIF expression_boolean statement_list . ELSE statement_list END
    (71) elseif_block -> ELSEIF expression_boolean statement_list . elseif_block END
    (6) statement_list -> statement_list . statement
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 219
    ELSE            shift and go to state 220
    ELSEIF          shift and go to state 34
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    elseif_block                   shift and go to state 221
    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 167

    (75) while_statement -> WHILE expression_boolean statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 222
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 168

    (76) while_statement -> WHILE IDENTIFIER relation . NUMBER statement_list END

    NUMBER          shift and go to state 223


state 169

    (77) for_statement -> FOR IDENTIFIER IN . expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> FOR IDENTIFIER IN . expression_number DOUBLEDOT expression_number statement_list END
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    expression                     shift and go to state 224
    expression_number              shift and go to state 225
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 170

    (79) for_statement -> FOR IDENTIFIER LEFT_BRACKET . array_elements RIGHT_BRACKET statement_list END
    (83) array_elements -> . expression_number
    (84) array_elements -> . expression_string
    (85) array_elements -> . expression_boolean
    (86) array_elements -> . empty
    (87) array_elements -> . array_elements COMMA expression_number
    (88) array_elements -> . expression_number SEMICOLON expression_number
    (89) array_elements -> . array_elements COMMA expression_string
    (90) array_elements -> . array_elements COMMA expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (91) empty -> .

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    RIGHT_BRACKET   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)

    array_elements                 shift and go to state 226
    expression_number              shift and go to state 227
    expression_string              shift and go to state 186
    expression_boolean             shift and go to state 187
    empty                          shift and go to state 188

state 171

    (53) function_definition -> FUNCTION IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN statement_list RETURN expression END
    (61) argument_list -> . expression
    (62) argument_list -> . expression COMMA argument_list
    (63) argument_list -> . statement_do
    (64) argument_list -> . empty
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (93) statement_do -> . DO statement_list END
    (91) empty -> .
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    DO              shift and go to state 38
    RIGHT_PAREN     reduce using rule 91 (empty -> .)
    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    argument_list                  shift and go to state 228
    expression                     shift and go to state 123
    statement_do                   shift and go to state 124
    empty                          shift and go to state 125
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 172

    (93) statement_do -> DO statement_list END .

    IDENTIFIER      reduce using rule 93 (statement_do -> DO statement_list END .)
    FUNCTIONS_JULIA reduce using rule 93 (statement_do -> DO statement_list END .)
    IF              reduce using rule 93 (statement_do -> DO statement_list END .)
    ELSEIF          reduce using rule 93 (statement_do -> DO statement_list END .)
    ELSE            reduce using rule 93 (statement_do -> DO statement_list END .)
    WHILE           reduce using rule 93 (statement_do -> DO statement_list END .)
    FOR             reduce using rule 93 (statement_do -> DO statement_list END .)
    FUNCTION        reduce using rule 93 (statement_do -> DO statement_list END .)
    DO              reduce using rule 93 (statement_do -> DO statement_list END .)
    TRY             reduce using rule 93 (statement_do -> DO statement_list END .)
    MODULE          reduce using rule 93 (statement_do -> DO statement_list END .)
    BEGIN           reduce using rule 93 (statement_do -> DO statement_list END .)
    USING           reduce using rule 93 (statement_do -> DO statement_list END .)
    NUMBER          reduce using rule 93 (statement_do -> DO statement_list END .)
    MINUS           reduce using rule 93 (statement_do -> DO statement_list END .)
    LEFT_PAREN      reduce using rule 93 (statement_do -> DO statement_list END .)
    LEFT_BRACKET    reduce using rule 93 (statement_do -> DO statement_list END .)
    $end            reduce using rule 93 (statement_do -> DO statement_list END .)
    END             reduce using rule 93 (statement_do -> DO statement_list END .)
    CATCH           reduce using rule 93 (statement_do -> DO statement_list END .)
    RETURN          reduce using rule 93 (statement_do -> DO statement_list END .)
    RIGHT_PAREN     reduce using rule 93 (statement_do -> DO statement_list END .)


state 173

    (95) statement_try -> TRY statement_list CATCH . IDENTIFIER statement_list END

    IDENTIFIER      shift and go to state 229


state 174

    (96) statement_module -> MODULE IDENTIFIER statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 230
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 175

    (94) statement_begin -> BEGIN statement_list END .

    IDENTIFIER      reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    FUNCTIONS_JULIA reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    IF              reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    ELSEIF          reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    ELSE            reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    WHILE           reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    FOR             reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    FUNCTION        reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    DO              reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    TRY             reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    MODULE          reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    BEGIN           reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    USING           reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    NUMBER          reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    MINUS           reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    LEFT_PAREN      reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    LEFT_BRACKET    reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    $end            reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    END             reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    CATCH           reduce using rule 94 (statement_begin -> BEGIN statement_list END .)
    RETURN          reduce using rule 94 (statement_begin -> BEGIN statement_list END .)


state 176

    (98) statement_using -> USING IDENTIFIER AS . IDENTIFIER

    IDENTIFIER      shift and go to state 231


state 177

    (81) identifierDecl -> identifierDecl COMMA IDENTIFIER assignment . LEFT_BRACKET array_elements RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 232


state 178

    (82) identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment . LEFT_BRACKET array_elements RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 233


state 179

    (74) assignment -> IDENTIFIER ASSIGN expression .

    FUNCTIONS_JULIA reduce using rule 74 (assignment -> IDENTIFIER ASSIGN expression .)
    LEFT_BRACKET    reduce using rule 74 (assignment -> IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 74 (assignment -> IDENTIFIER ASSIGN expression .)
    NUMBER          reduce using rule 74 (assignment -> IDENTIFIER ASSIGN expression .)
    MINUS           reduce using rule 74 (assignment -> IDENTIFIER ASSIGN expression .)
    LEFT_PAREN      reduce using rule 74 (assignment -> IDENTIFIER ASSIGN expression .)
    STRING          reduce using rule 74 (assignment -> IDENTIFIER ASSIGN expression .)
    BOOLEAN         reduce using rule 74 (assignment -> IDENTIFIER ASSIGN expression .)
    ADMIRATION      reduce using rule 74 (assignment -> IDENTIFIER ASSIGN expression .)


state 180

    (124) expression_number -> IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN
    (106) expression_boolean -> IDENTIFIER LEFT_PAREN . argument_list RIGHT_PAREN
    (61) argument_list -> . expression
    (62) argument_list -> . expression COMMA argument_list
    (63) argument_list -> . statement_do
    (64) argument_list -> . empty
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (93) statement_do -> . DO statement_list END
    (91) empty -> .
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    DO              shift and go to state 38
    RIGHT_PAREN     reduce using rule 91 (empty -> .)
    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    argument_list                  shift and go to state 234
    expression                     shift and go to state 123
    statement_do                   shift and go to state 124
    empty                          shift and go to state 125
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 181

    (28) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN . IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN . IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN

    IDENTIFIER      shift and go to state 235


state 182

    (125) expression_number -> LEFT_PAREN expression_number . RIGHT_PAREN
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (110) expression_boolean -> expression_number . relation expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_PAREN     shift and go to state 140
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    operator_arithmetic            shift and go to state 61
    relation                       shift and go to state 164

state 183

    (128) expression_string -> LEFT_PAREN expression_string . RIGHT_PAREN
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string
    (109) expression_boolean -> expression_string . relation expression_string
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_PAREN     shift and go to state 212
    MULTIPLY        shift and go to state 163
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 162

state 184

    (80) identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements . RIGHT_BRACKET
    (87) array_elements -> array_elements . COMMA expression_number
    (89) array_elements -> array_elements . COMMA expression_string
    (90) array_elements -> array_elements . COMMA expression_boolean

    RIGHT_BRACKET   shift and go to state 236
    COMMA           shift and go to state 237


state 185

    (126) expression_number -> LEFT_BRACKET expression_number . RIGHT_BRACKET
    (83) array_elements -> expression_number .
    (88) array_elements -> expression_number . SEMICOLON expression_number
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (110) expression_boolean -> expression_number . relation expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

  ! shift/reduce conflict for RIGHT_BRACKET resolved as shift
    RIGHT_BRACKET   shift and go to state 142
    COMMA           reduce using rule 83 (array_elements -> expression_number .)
    SEMICOLON       shift and go to state 238
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

  ! RIGHT_BRACKET   [ reduce using rule 83 (array_elements -> expression_number .) ]

    operator_arithmetic            shift and go to state 61
    relation                       shift and go to state 164

state 186

    (84) array_elements -> expression_string .
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string
    (109) expression_boolean -> expression_string . relation expression_string
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_BRACKET   reduce using rule 84 (array_elements -> expression_string .)
    COMMA           reduce using rule 84 (array_elements -> expression_string .)
    MULTIPLY        shift and go to state 163
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 162

state 187

    (85) array_elements -> expression_boolean .
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_BRACKET   reduce using rule 85 (array_elements -> expression_boolean .)
    COMMA           reduce using rule 85 (array_elements -> expression_boolean .)
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 156

state 188

    (86) array_elements -> empty .

    RIGHT_BRACKET   reduce using rule 86 (array_elements -> empty .)
    COMMA           reduce using rule 86 (array_elements -> empty .)


state 189

    (92) statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .
    (124) expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .

  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 92 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOT             reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PLUS            reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MULTIPLY        reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PERCENT         reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)

  ! FUNCTIONS_JULIA [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! MINUS           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]


state 190

    (62) argument_list -> expression COMMA . argument_list
    (61) argument_list -> . expression
    (62) argument_list -> . expression COMMA argument_list
    (63) argument_list -> . statement_do
    (64) argument_list -> . empty
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (93) statement_do -> . DO statement_list END
    (91) empty -> .
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    DO              shift and go to state 38
    RIGHT_PAREN     reduce using rule 91 (empty -> .)
    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    expression                     shift and go to state 123
    argument_list                  shift and go to state 239
    statement_do                   shift and go to state 124
    empty                          shift and go to state 125
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 191

    (45) array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values . RIGHT_BRACKET
    (46) array_values -> array_values . COMMA NUMBER

    RIGHT_BRACKET   shift and go to state 240
    COMMA           shift and go to state 241


state 192

    (47) array_values -> NUMBER .

    RIGHT_BRACKET   reduce using rule 47 (array_values -> NUMBER .)
    COMMA           reduce using rule 47 (array_values -> NUMBER .)


state 193

    (56) statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list . RIGHT_PAREN ARROW expression

    RIGHT_PAREN     shift and go to state 242


state 194

    (48) array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER . COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    COMMA           shift and go to state 243


state 195

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN . LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia

    LEFT_BRACKET    shift and go to state 244


state 196

    (30) identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN . statement_function_julia
    (31) identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN . LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN

    LEFT_BRACKET    shift and go to state 247
    FUNCTIONS_JULIA shift and go to state 245

    statement_function_julia       shift and go to state 246

state 197

    (57) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .

    IDENTIFIER      reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    COMMA           reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    NEWLINE         reduce using rule 57 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)


state 198

    (58) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .

    IDENTIFIER      reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    IF              reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    ELSEIF          reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    ELSE            reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    WHILE           reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    FOR             reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    FUNCTION        reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    DO              reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    TRY             reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    MODULE          reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    BEGIN           reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    USING           reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    NUMBER          reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    MINUS           reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    $end            reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    END             reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    CATCH           reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    RETURN          reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    COMMA           reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)
    NEWLINE         reduce using rule 58 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN .)


state 199

    (59) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT . NUMBER RIGHT_PAREN

    NUMBER          shift and go to state 248


state 200

    (60) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .

    IDENTIFIER      reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    IF              reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    ELSEIF          reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    ELSE            reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    WHILE           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FOR             reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FUNCTION        reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    DO              reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    TRY             reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    MODULE          reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    BEGIN           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    USING           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    NUMBER          reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    MINUS           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    $end            reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    END             reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    CATCH           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    RETURN          reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    COMMA           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    NEWLINE         reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)


state 201

    (124) expression_number -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 249


state 202

    (36) expression_number_list -> expression_number_list COMMA . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 250

state 203

    (38) expression_string_list -> expression_string_list COMMA . expression_string
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string

    STRING          shift and go to state 99
    LEFT_PAREN      shift and go to state 215

    expression_string              shift and go to state 251

state 204

    (128) expression_string -> LEFT_PAREN expression_string . RIGHT_PAREN
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string

    RIGHT_PAREN     shift and go to state 212
    MULTIPLY        shift and go to state 163


state 205

    (40) expression_boolean_list -> expression_boolean_list COMMA . expression_boolean
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    LEFT_PAREN      shift and go to state 93
    IDENTIFIER      shift and go to state 94
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    STRING          shift and go to state 99
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 252
    expression_string              shift and go to state 97
    expression_number              shift and go to state 98

state 206

    (49) array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA . LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    LEFT_BRACE      shift and go to state 253


state 207

    (65) if_statement -> IF expression_boolean statement_list END .

    IDENTIFIER      reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    FUNCTIONS_JULIA reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    IF              reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    ELSEIF          reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    ELSE            reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    WHILE           reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    FOR             reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    FUNCTION        reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    DO              reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    TRY             reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    MODULE          reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    BEGIN           reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    USING           reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    NUMBER          reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    MINUS           reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    LEFT_PAREN      reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    LEFT_BRACKET    reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    $end            reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    END             reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    CATCH           reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)
    RETURN          reduce using rule 65 (if_statement -> IF expression_boolean statement_list END .)


state 208

    (66) if_statement -> IF expression_boolean statement_list ELSE . statement_list END
    (72) else_statement -> ELSE . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 254
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 209

    (67) if_statement -> IF expression_boolean statement_list elseif_block . statement_list ELSE statement_list END
    (68) if_statement -> IF expression_boolean statement_list elseif_block . END
    (10) statement -> elseif_block .
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 256
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 10 (statement -> elseif_block .) ]
  ! ELSE            [ reduce using rule 10 (statement -> elseif_block .) ]
  ! ELSEIF          [ reduce using rule 10 (statement -> elseif_block .) ]
  ! IDENTIFIER      [ reduce using rule 10 (statement -> elseif_block .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 10 (statement -> elseif_block .) ]
  ! IF              [ reduce using rule 10 (statement -> elseif_block .) ]
  ! WHILE           [ reduce using rule 10 (statement -> elseif_block .) ]
  ! FOR             [ reduce using rule 10 (statement -> elseif_block .) ]
  ! FUNCTION        [ reduce using rule 10 (statement -> elseif_block .) ]
  ! DO              [ reduce using rule 10 (statement -> elseif_block .) ]
  ! TRY             [ reduce using rule 10 (statement -> elseif_block .) ]
  ! MODULE          [ reduce using rule 10 (statement -> elseif_block .) ]
  ! BEGIN           [ reduce using rule 10 (statement -> elseif_block .) ]
  ! USING           [ reduce using rule 10 (statement -> elseif_block .) ]
  ! NUMBER          [ reduce using rule 10 (statement -> elseif_block .) ]
  ! MINUS           [ reduce using rule 10 (statement -> elseif_block .) ]
  ! LEFT_PAREN      [ reduce using rule 10 (statement -> elseif_block .) ]
  ! LEFT_BRACKET    [ reduce using rule 10 (statement -> elseif_block .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 255
    elseif_block                   shift and go to state 9
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 210

    (107) expression_boolean -> expression_boolean relation expression_boolean .
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for ANDSYM resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for ORSYM resolved as shift
    IDENTIFIER      reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    IF              reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    ELSEIF          reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    ELSE            reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    WHILE           reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    FOR             reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    FUNCTION        reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    DO              reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    TRY             reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    MODULE          reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    BEGIN           reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    USING           reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    NUMBER          reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    MINUS           reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    LEFT_PAREN      reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    LEFT_BRACKET    reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    END             reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    COMMA           reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    NEWLINE         reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    $end            reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    CATCH           reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    RETURN          reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    RIGHT_PAREN     reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    STRING          reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    BOOLEAN         reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    ADMIRATION      reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    RIGHT_BRACKET   reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    DOUBLEDOT       reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .)
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

  ! LESS_THAN       [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! GREATER_THAN    [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! EQUALS          [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! NOT_EQUALS      [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! AND             [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! ANDSYM          [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! OR              [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! ORSYM           [ reduce using rule 107 (expression_boolean -> expression_boolean relation expression_boolean .) ]

    relation                       shift and go to state 156

state 211

    (103) expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .

    LESS_THAN       reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    EQUALS          reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    AND             reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ANDSYM          reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    OR              reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ORSYM           reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    IF              reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ELSEIF          reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ELSE            reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    WHILE           reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    FOR             reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    FUNCTION        reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    DO              reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    TRY             reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    MODULE          reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    BEGIN           reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    USING           reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    NUMBER          reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    MINUS           reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    END             reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    COMMA           reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    NEWLINE         reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    $end            reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    CATCH           reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    RETURN          reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    STRING          reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    BOOLEAN         reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ADMIRATION      reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 103 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)


state 212

    (128) expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .

    MULTIPLY        reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    LESS_THAN       reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    EQUALS          reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    AND             reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ANDSYM          reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    OR              reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ORSYM           reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    COMMA           reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    NEWLINE         reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    IF              reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ELSEIF          reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ELSE            reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    WHILE           reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    FOR             reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    FUNCTION        reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    DO              reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    TRY             reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    MODULE          reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    BEGIN           reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    USING           reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    NUMBER          reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    MINUS           reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    $end            reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    END             reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    CATCH           reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    RETURN          reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    STRING          reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    BOOLEAN         reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ADMIRATION      reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 128 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)


state 213

    (106) expression_boolean -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN
    (124) expression_number -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 257


state 214

    (109) expression_boolean -> expression_string relation expression_string .
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string

    LESS_THAN       reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    LESS_THAN_OR_EQUAL reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    GREATER_THAN    reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    GREATER_THAN_OR_EQUAL reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    EQUALS          reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    NOT_EQUALS      reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    AND             reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    ANDSYM          reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    OR              reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    ORSYM           reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    IDENTIFIER      reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    FUNCTIONS_JULIA reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    IF              reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    ELSEIF          reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    ELSE            reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    WHILE           reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    FOR             reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    FUNCTION        reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    DO              reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    TRY             reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    MODULE          reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    BEGIN           reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    USING           reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    NUMBER          reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    MINUS           reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    LEFT_PAREN      reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    LEFT_BRACKET    reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    END             reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    COMMA           reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    NEWLINE         reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    $end            reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    CATCH           reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    RETURN          reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    RIGHT_PAREN     reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    STRING          reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    BOOLEAN         reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    ADMIRATION      reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    RIGHT_BRACKET   reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    DOUBLEDOT       reduce using rule 109 (expression_boolean -> expression_string relation expression_string .)
    MULTIPLY        shift and go to state 163


state 215

    (128) expression_string -> LEFT_PAREN . expression_string RIGHT_PAREN
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string

    STRING          shift and go to state 99
    LEFT_PAREN      shift and go to state 215

    expression_string              shift and go to state 204

state 216

    (130) expression_string -> expression_string MULTIPLY expression_string .
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string

    MULTIPLY        reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    LESS_THAN       reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    LESS_THAN_OR_EQUAL reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    GREATER_THAN    reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    GREATER_THAN_OR_EQUAL reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    EQUALS          reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    NOT_EQUALS      reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    AND             reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    ANDSYM          reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    OR              reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    ORSYM           reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    COMMA           reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    NEWLINE         reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    IDENTIFIER      reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    FUNCTIONS_JULIA reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    IF              reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    ELSEIF          reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    ELSE            reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    WHILE           reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    FOR             reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    FUNCTION        reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    DO              reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    TRY             reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    MODULE          reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    BEGIN           reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    USING           reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    NUMBER          reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    MINUS           reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    LEFT_PAREN      reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    LEFT_BRACKET    reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    $end            reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    END             reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    CATCH           reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    RETURN          reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    RIGHT_PAREN     reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    STRING          reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    BOOLEAN         reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    ADMIRATION      reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    RIGHT_BRACKET   reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)
    DOUBLEDOT       reduce using rule 130 (expression_string -> expression_string MULTIPLY expression_string .)

  ! MULTIPLY        [ shift and go to state 163 ]


state 217

    (129) expression_string -> expression_string MULTIPLY expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

    MULTIPLY        reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    LESS_THAN       reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    GREATER_THAN    reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    EQUALS          reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    NOT_EQUALS      reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    AND             reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    ANDSYM          reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    OR              reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    ORSYM           reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    COMMA           reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    NEWLINE         reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    IDENTIFIER      reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    FUNCTIONS_JULIA reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    IF              reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    ELSEIF          reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    ELSE            reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    WHILE           reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    FOR             reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    FUNCTION        reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    DO              reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    TRY             reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    MODULE          reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    BEGIN           reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    USING           reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    NUMBER          reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    MINUS           reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    LEFT_PAREN      reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    LEFT_BRACKET    reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    $end            reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    END             reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    CATCH           reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    RETURN          reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    RIGHT_PAREN     reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    STRING          reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    BOOLEAN         reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    ADMIRATION      reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    RIGHT_BRACKET   reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    DOUBLEDOT       reduce using rule 129 (expression_string -> expression_string MULTIPLY expression_number .)
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

  ! DOUBLEDOT       [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 64 ]
  ! MULTIPLY        [ shift and go to state 65 ]

    operator_arithmetic            shift and go to state 61

state 218

    (110) expression_boolean -> expression_number relation expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LESS_THAN       reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    GREATER_THAN    reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    EQUALS          reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    NOT_EQUALS      reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    AND             reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    ANDSYM          reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    OR              reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    ORSYM           reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    IDENTIFIER      reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    FUNCTIONS_JULIA reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    IF              reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    ELSEIF          reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    ELSE            reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    WHILE           reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    FOR             reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    FUNCTION        reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    DO              reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    TRY             reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    MODULE          reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    BEGIN           reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    USING           reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    NUMBER          reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    LEFT_PAREN      reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    LEFT_BRACKET    reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    END             reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    COMMA           reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    NEWLINE         reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    $end            reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    CATCH           reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    RETURN          reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    RIGHT_PAREN     reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    STRING          reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    BOOLEAN         reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    ADMIRATION      reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    RIGHT_BRACKET   reduce using rule 110 (expression_boolean -> expression_number relation expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

  ! MINUS           [ reduce using rule 110 (expression_boolean -> expression_number relation expression_number .) ]
  ! DOUBLEDOT       [ reduce using rule 110 (expression_boolean -> expression_number relation expression_number .) ]

    operator_arithmetic            shift and go to state 61

state 219

    (69) elseif_block -> ELSEIF expression_boolean statement_list END .

    IDENTIFIER      reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    FUNCTIONS_JULIA reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    IF              reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    ELSEIF          reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    ELSE            reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    WHILE           reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    FOR             reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    FUNCTION        reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    DO              reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    TRY             reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    MODULE          reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    BEGIN           reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    USING           reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    NUMBER          reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    MINUS           reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    LEFT_PAREN      reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    LEFT_BRACKET    reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    $end            reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    END             reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    CATCH           reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    RETURN          reduce using rule 69 (elseif_block -> ELSEIF expression_boolean statement_list END .)


state 220

    (70) elseif_block -> ELSEIF expression_boolean statement_list ELSE . statement_list END
    (72) else_statement -> ELSE . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 258
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 221

    (71) elseif_block -> ELSEIF expression_boolean statement_list elseif_block . END
    (10) statement -> elseif_block .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 259
    ELSE            reduce using rule 10 (statement -> elseif_block .)
    ELSEIF          reduce using rule 10 (statement -> elseif_block .)
    IDENTIFIER      reduce using rule 10 (statement -> elseif_block .)
    FUNCTIONS_JULIA reduce using rule 10 (statement -> elseif_block .)
    IF              reduce using rule 10 (statement -> elseif_block .)
    WHILE           reduce using rule 10 (statement -> elseif_block .)
    FOR             reduce using rule 10 (statement -> elseif_block .)
    FUNCTION        reduce using rule 10 (statement -> elseif_block .)
    DO              reduce using rule 10 (statement -> elseif_block .)
    TRY             reduce using rule 10 (statement -> elseif_block .)
    MODULE          reduce using rule 10 (statement -> elseif_block .)
    BEGIN           reduce using rule 10 (statement -> elseif_block .)
    USING           reduce using rule 10 (statement -> elseif_block .)
    NUMBER          reduce using rule 10 (statement -> elseif_block .)
    MINUS           reduce using rule 10 (statement -> elseif_block .)
    LEFT_PAREN      reduce using rule 10 (statement -> elseif_block .)
    LEFT_BRACKET    reduce using rule 10 (statement -> elseif_block .)

  ! END             [ reduce using rule 10 (statement -> elseif_block .) ]


state 222

    (75) while_statement -> WHILE expression_boolean statement_list END .

    IDENTIFIER      reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    FUNCTIONS_JULIA reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    IF              reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    ELSEIF          reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    ELSE            reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    WHILE           reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    FOR             reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    FUNCTION        reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    DO              reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    TRY             reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    MODULE          reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    BEGIN           reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    USING           reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    NUMBER          reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    MINUS           reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    LEFT_PAREN      reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    LEFT_BRACKET    reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    $end            reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    END             reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    CATCH           reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)
    RETURN          reduce using rule 75 (while_statement -> WHILE expression_boolean statement_list END .)


state 223

    (76) while_statement -> WHILE IDENTIFIER relation NUMBER . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 260
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 224

    (77) for_statement -> FOR IDENTIFIER IN expression . DOUBLEDOT expression_number statement_list END

    DOUBLEDOT       shift and go to state 261


state 225

    (78) for_statement -> FOR IDENTIFIER IN expression_number . DOUBLEDOT expression_number statement_list END
    (100) expression -> expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (110) expression_boolean -> expression_number . relation expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

  ! shift/reduce conflict for DOUBLEDOT resolved as shift
    DOUBLEDOT       shift and go to state 262
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

  ! DOUBLEDOT       [ reduce using rule 100 (expression -> expression_number .) ]

    operator_arithmetic            shift and go to state 61
    relation                       shift and go to state 164

state 226

    (79) for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements . RIGHT_BRACKET statement_list END
    (87) array_elements -> array_elements . COMMA expression_number
    (89) array_elements -> array_elements . COMMA expression_string
    (90) array_elements -> array_elements . COMMA expression_boolean

    RIGHT_BRACKET   shift and go to state 263
    COMMA           shift and go to state 237


state 227

    (83) array_elements -> expression_number .
    (88) array_elements -> expression_number . SEMICOLON expression_number
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (110) expression_boolean -> expression_number . relation expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_BRACKET   reduce using rule 83 (array_elements -> expression_number .)
    COMMA           reduce using rule 83 (array_elements -> expression_number .)
    SEMICOLON       shift and go to state 238
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    operator_arithmetic            shift and go to state 61
    relation                       shift and go to state 164

state 228

    (53) function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN statement_list END
    (54) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN statement_list END
    (55) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN statement_list RETURN expression END

    RIGHT_PAREN     shift and go to state 264


state 229

    (95) statement_try -> TRY statement_list CATCH IDENTIFIER . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 265
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 230

    (96) statement_module -> MODULE IDENTIFIER statement_list END .

    IDENTIFIER      reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    FUNCTIONS_JULIA reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    IF              reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    ELSEIF          reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    ELSE            reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    WHILE           reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    FOR             reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    FUNCTION        reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    DO              reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    TRY             reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    MODULE          reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    BEGIN           reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    USING           reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    NUMBER          reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    MINUS           reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    LEFT_PAREN      reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    LEFT_BRACKET    reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    $end            reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    END             reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    CATCH           reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)
    RETURN          reduce using rule 96 (statement_module -> MODULE IDENTIFIER statement_list END .)


state 231

    (98) statement_using -> USING IDENTIFIER AS IDENTIFIER .

    IDENTIFIER      reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    IF              reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    ELSEIF          reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    ELSE            reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    WHILE           reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    FOR             reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    FUNCTION        reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    DO              reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    TRY             reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    MODULE          reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    BEGIN           reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    USING           reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    NUMBER          reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    MINUS           reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    LEFT_PAREN      reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    $end            reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    END             reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    CATCH           reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    RETURN          reduce using rule 98 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)


state 232

    (81) identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET . array_elements RIGHT_BRACKET
    (83) array_elements -> . expression_number
    (84) array_elements -> . expression_string
    (85) array_elements -> . expression_boolean
    (86) array_elements -> . empty
    (87) array_elements -> . array_elements COMMA expression_number
    (88) array_elements -> . expression_number SEMICOLON expression_number
    (89) array_elements -> . array_elements COMMA expression_string
    (90) array_elements -> . array_elements COMMA expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (91) empty -> .

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    RIGHT_BRACKET   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)

    array_elements                 shift and go to state 266
    expression_number              shift and go to state 227
    expression_string              shift and go to state 186
    expression_boolean             shift and go to state 187
    empty                          shift and go to state 188

state 233

    (82) identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET . array_elements RIGHT_BRACKET
    (83) array_elements -> . expression_number
    (84) array_elements -> . expression_string
    (85) array_elements -> . expression_boolean
    (86) array_elements -> . empty
    (87) array_elements -> . array_elements COMMA expression_number
    (88) array_elements -> . expression_number SEMICOLON expression_number
    (89) array_elements -> . array_elements COMMA expression_string
    (90) array_elements -> . array_elements COMMA expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (91) empty -> .

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    RIGHT_BRACKET   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)

    array_elements                 shift and go to state 267
    expression_number              shift and go to state 227
    expression_string              shift and go to state 186
    expression_boolean             shift and go to state 187
    empty                          shift and go to state 188

state 234

    (124) expression_number -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN
    (106) expression_boolean -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 268


state 235

    (28) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER . RIGHT_PAREN
    (29) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER . COMMA IDENTIFIER RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 269
    COMMA           shift and go to state 270


state 236

    (80) identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .

    COMMA           reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NEWLINE         reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTIONS_JULIA reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IF              reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSEIF          reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSE            reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    WHILE           reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FOR             reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTION        reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    DO              reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    TRY             reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MODULE          reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    BEGIN           reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    USING           reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NUMBER          reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MINUS           reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    $end            reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    END             reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    CATCH           reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RETURN          reduce using rule 80 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 237

    (87) array_elements -> array_elements COMMA . expression_number
    (89) array_elements -> array_elements COMMA . expression_string
    (90) array_elements -> array_elements COMMA . expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    expression_number              shift and go to state 271
    expression_string              shift and go to state 272
    expression_boolean             shift and go to state 273

state 238

    (88) array_elements -> expression_number SEMICOLON . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 274

state 239

    (62) argument_list -> expression COMMA argument_list .

    RIGHT_PAREN     reduce using rule 62 (argument_list -> expression COMMA argument_list .)


state 240

    (45) array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .

    IDENTIFIER      reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    FUNCTIONS_JULIA reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    IF              reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    ELSEIF          reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    ELSE            reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    WHILE           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    FOR             reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    FUNCTION        reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    DO              reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    TRY             reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    MODULE          reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    BEGIN           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    USING           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    NUMBER          reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    MINUS           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    $end            reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    END             reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    CATCH           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    RETURN          reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)


state 241

    (46) array_values -> array_values COMMA . NUMBER

    NUMBER          shift and go to state 275


state 242

    (56) statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN . ARROW expression

    ARROW           shift and go to state 276


state 243

    (48) array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA . NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    NUMBER          shift and go to state 277


state 244

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET . array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (83) array_elements -> . expression_number
    (84) array_elements -> . expression_string
    (85) array_elements -> . expression_boolean
    (86) array_elements -> . empty
    (87) array_elements -> . array_elements COMMA expression_number
    (88) array_elements -> . expression_number SEMICOLON expression_number
    (89) array_elements -> . array_elements COMMA expression_string
    (90) array_elements -> . array_elements COMMA expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (91) empty -> .

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    RIGHT_BRACKET   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)

    array_elements                 shift and go to state 278
    expression_number              shift and go to state 227
    expression_string              shift and go to state 186
    expression_boolean             shift and go to state 187
    empty                          shift and go to state 188

state 245

    (57) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN IDENTIFIER RIGHT_PAREN

    LEFT_PAREN      shift and go to state 71


state 246

    (30) identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .

    COMMA           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    NEWLINE         reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    IDENTIFIER      reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    FUNCTIONS_JULIA reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    IF              reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    ELSEIF          reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    ELSE            reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    WHILE           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    FOR             reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    FUNCTION        reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    DO              reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    TRY             reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    MODULE          reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    BEGIN           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    USING           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    NUMBER          reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    MINUS           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    LEFT_PAREN      reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    LEFT_BRACKET    reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    $end            reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    END             reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    CATCH           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    RETURN          reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)


state 247

    (31) identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET . array_elements RIGHT_BRACKET array_estatement_julia
    (83) array_elements -> . expression_number
    (84) array_elements -> . expression_string
    (85) array_elements -> . expression_boolean
    (86) array_elements -> . empty
    (87) array_elements -> . array_elements COMMA expression_number
    (88) array_elements -> . expression_number SEMICOLON expression_number
    (89) array_elements -> . array_elements COMMA expression_string
    (90) array_elements -> . array_elements COMMA expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number
    (91) empty -> .

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96
    RIGHT_BRACKET   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)

    array_elements                 shift and go to state 279
    expression_number              shift and go to state 227
    expression_string              shift and go to state 186
    expression_boolean             shift and go to state 187
    empty                          shift and go to state 188

state 248

    (59) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 280


state 249

    (124) expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .

    RIGHT_PAREN     reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOT             reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PLUS            reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MULTIPLY        reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PERCENT         reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN       reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EQUALS          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    AND             reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ANDSYM          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    OR              reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ORSYM           reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    COMMA           reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NEWLINE         reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    STRING          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BOOLEAN         reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ADMIRATION      reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SEMICOLON       reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)


state 250

    (36) expression_number_list -> expression_number_list COMMA expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    NEWLINE         reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    IDENTIFIER      reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    FUNCTIONS_JULIA reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    IF              reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    ELSEIF          reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    ELSE            reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    WHILE           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    FOR             reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    FUNCTION        reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    DO              reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    TRY             reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    MODULE          reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    BEGIN           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    USING           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    NUMBER          reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    LEFT_PAREN      reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    LEFT_BRACKET    reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    $end            reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    END             reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    CATCH           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    RETURN          reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

  ! MINUS           [ reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .) ]

    operator_arithmetic            shift and go to state 61

state 251

    (38) expression_string_list -> expression_string_list COMMA expression_string .
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string

    COMMA           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    NEWLINE         reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    IDENTIFIER      reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    FUNCTIONS_JULIA reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    IF              reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    ELSEIF          reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    ELSE            reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    WHILE           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    FOR             reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    FUNCTION        reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    DO              reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    TRY             reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    MODULE          reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    BEGIN           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    USING           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    NUMBER          reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    MINUS           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    LEFT_PAREN      reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    LEFT_BRACKET    reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    $end            reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    END             reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    CATCH           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    RETURN          reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    MULTIPLY        shift and go to state 163


state 252

    (40) expression_boolean_list -> expression_boolean_list COMMA expression_boolean .
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    COMMA           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    NEWLINE         reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    IDENTIFIER      reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    IF              reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    ELSEIF          reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    ELSE            reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    WHILE           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    FOR             reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    FUNCTION        reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    DO              reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    TRY             reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    MODULE          reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    BEGIN           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    USING           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    NUMBER          reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    MINUS           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    LEFT_PAREN      reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    LEFT_BRACKET    reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    $end            reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    END             reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    CATCH           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    RETURN          reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 156

state 253

    (49) array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE . IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    IDENTIFIER      shift and go to state 281


state 254

    (66) if_statement -> IF expression_boolean statement_list ELSE statement_list . END
    (72) else_statement -> ELSE statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 282
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 255

    (67) if_statement -> IF expression_boolean statement_list elseif_block statement_list . ELSE statement_list END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ELSE            shift and go to state 283
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    elseif_block                   shift and go to state 9
    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 256

    (68) if_statement -> IF expression_boolean statement_list elseif_block END .

    IDENTIFIER      reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    FUNCTIONS_JULIA reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    IF              reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    ELSEIF          reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    ELSE            reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    WHILE           reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    FOR             reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    FUNCTION        reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    DO              reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    TRY             reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    MODULE          reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    BEGIN           reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    USING           reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    NUMBER          reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    MINUS           reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    LEFT_PAREN      reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    LEFT_BRACKET    reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    $end            reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    END             reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    CATCH           reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    RETURN          reduce using rule 68 (if_statement -> IF expression_boolean statement_list elseif_block END .)


state 257

    (106) expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .
    (124) expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .

  ! reduce/reduce conflict for DOUBLEDOT resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for AND resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for OR resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ORSYM resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN       reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EQUALS          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    AND             reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ANDSYM          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    OR              reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ORSYM           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    COMMA           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NEWLINE         reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    STRING          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BOOLEAN         reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ADMIRATION      reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOT             reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PLUS            reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MULTIPLY        reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PERCENT         reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)

  ! DOUBLEDOT       [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LESS_THAN       [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! GREATER_THAN    [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! EQUALS          [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! NOT_EQUALS      [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! AND             [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ANDSYM          [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! OR              [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ORSYM           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! MINUS           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! RIGHT_PAREN     [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]


state 258

    (70) elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list . END
    (72) else_statement -> ELSE statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 284
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 259

    (71) elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .

    IDENTIFIER      reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    FUNCTIONS_JULIA reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    IF              reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    ELSEIF          reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    ELSE            reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    WHILE           reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    FOR             reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    FUNCTION        reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    DO              reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    TRY             reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    MODULE          reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    BEGIN           reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    USING           reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    NUMBER          reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    MINUS           reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    LEFT_PAREN      reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    LEFT_BRACKET    reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    $end            reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    END             reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    CATCH           reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    RETURN          reduce using rule 71 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)


state 260

    (76) while_statement -> WHILE IDENTIFIER relation NUMBER statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 285
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 261

    (77) for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT . expression_number statement_list END
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 286

state 262

    (78) for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT . expression_number statement_list END
    (121) expression_number -> expression_number DOUBLEDOT . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 287

state 263

    (79) for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 288
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 264

    (53) function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN . statement_list END
    (54) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN . statement_list END
    (55) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN . statement_list RETURN expression END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 289
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 265

    (95) statement_try -> TRY statement_list CATCH IDENTIFIER statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 290
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 266

    (81) identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements . RIGHT_BRACKET
    (87) array_elements -> array_elements . COMMA expression_number
    (89) array_elements -> array_elements . COMMA expression_string
    (90) array_elements -> array_elements . COMMA expression_boolean

    RIGHT_BRACKET   shift and go to state 291
    COMMA           shift and go to state 237


state 267

    (82) identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements . RIGHT_BRACKET
    (87) array_elements -> array_elements . COMMA expression_number
    (89) array_elements -> array_elements . COMMA expression_string
    (90) array_elements -> array_elements . COMMA expression_boolean

    RIGHT_BRACKET   shift and go to state 292
    COMMA           shift and go to state 237


state 268

    (124) expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .
    (106) expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .

  ! reduce/reduce conflict for LESS_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for AND resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for OR resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ORSYM resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for IF resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for DO resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for TRY resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for MODULE resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for BEGIN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for USING resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for NUMBER resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for $end resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for END resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for CATCH resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ADMIRATION resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for DOUBLEDOT resolved using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOT             reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PLUS            reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MULTIPLY        reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PERCENT         reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SEMICOLON       reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN       reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EQUALS          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    AND             reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ANDSYM          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    OR              reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ORSYM           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    COMMA           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NEWLINE         reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    STRING          reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BOOLEAN         reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ADMIRATION      reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 106 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)

  ! DOUBLEDOT       [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! MINUS           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LESS_THAN       [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! GREATER_THAN    [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! EQUALS          [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! NOT_EQUALS      [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! AND             [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ANDSYM          [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! OR              [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ORSYM           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! COMMA           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! NEWLINE         [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! IDENTIFIER      [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! IF              [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ELSEIF          [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ELSE            [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! WHILE           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! FOR             [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! FUNCTION        [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! DO              [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! TRY             [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! MODULE          [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! BEGIN           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! USING           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! NUMBER          [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LEFT_PAREN      [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LEFT_BRACKET    [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! $end            [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! END             [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! CATCH           [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! RETURN          [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! RIGHT_PAREN     [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! STRING          [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! BOOLEAN         [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ADMIRATION      [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! RIGHT_BRACKET   [ reduce using rule 124 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]


state 269

    (28) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .

    COMMA           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    NEWLINE         reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    IF              reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    ELSEIF          reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    ELSE            reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    WHILE           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FOR             reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FUNCTION        reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    DO              reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    TRY             reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    MODULE          reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    BEGIN           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    USING           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    NUMBER          reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    MINUS           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    $end            reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    END             reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    CATCH           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    RETURN          reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)


state 270

    (29) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA . IDENTIFIER RIGHT_PAREN

    IDENTIFIER      shift and go to state 293


state 271

    (87) array_elements -> array_elements COMMA expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (110) expression_boolean -> expression_number . relation expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_BRACKET   reduce using rule 87 (array_elements -> array_elements COMMA expression_number .)
    COMMA           reduce using rule 87 (array_elements -> array_elements COMMA expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    operator_arithmetic            shift and go to state 61
    relation                       shift and go to state 164

state 272

    (89) array_elements -> array_elements COMMA expression_string .
    (129) expression_string -> expression_string . MULTIPLY expression_number
    (130) expression_string -> expression_string . MULTIPLY expression_string
    (109) expression_boolean -> expression_string . relation expression_string
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_BRACKET   reduce using rule 89 (array_elements -> array_elements COMMA expression_string .)
    COMMA           reduce using rule 89 (array_elements -> array_elements COMMA expression_string .)
    MULTIPLY        shift and go to state 163
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 162

state 273

    (90) array_elements -> array_elements COMMA expression_boolean .
    (107) expression_boolean -> expression_boolean . relation expression_boolean
    (138) relation -> . LESS_THAN
    (139) relation -> . LESS_THAN_OR_EQUAL
    (140) relation -> . GREATER_THAN
    (141) relation -> . GREATER_THAN_OR_EQUAL
    (142) relation -> . EQUALS
    (143) relation -> . NOT_EQUALS
    (144) relation -> . AND
    (145) relation -> . ANDSYM
    (146) relation -> . OR
    (147) relation -> . ORSYM

    RIGHT_BRACKET   reduce using rule 90 (array_elements -> array_elements COMMA expression_boolean .)
    COMMA           reduce using rule 90 (array_elements -> array_elements COMMA expression_boolean .)
    LESS_THAN       shift and go to state 72
    LESS_THAN_OR_EQUAL shift and go to state 73
    GREATER_THAN    shift and go to state 74
    GREATER_THAN_OR_EQUAL shift and go to state 75
    EQUALS          shift and go to state 76
    NOT_EQUALS      shift and go to state 77
    AND             shift and go to state 78
    ANDSYM          shift and go to state 79
    OR              shift and go to state 80
    ORSYM           shift and go to state 81

    relation                       shift and go to state 156

state 274

    (88) array_elements -> expression_number SEMICOLON expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT

    RIGHT_BRACKET   reduce using rule 88 (array_elements -> expression_number SEMICOLON expression_number .)
    COMMA           reduce using rule 88 (array_elements -> expression_number SEMICOLON expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69

    operator_arithmetic            shift and go to state 61

state 275

    (46) array_values -> array_values COMMA NUMBER .

    RIGHT_BRACKET   reduce using rule 46 (array_values -> array_values COMMA NUMBER .)
    COMMA           reduce using rule 46 (array_values -> array_values COMMA NUMBER .)


state 276

    (56) statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW . expression
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    expression                     shift and go to state 294
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 277

    (48) array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER . RIGHT_BRACE DOUBLEDOT array_content_julia

    RIGHT_BRACE     shift and go to state 295


state 278

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements . RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (87) array_elements -> array_elements . COMMA expression_number
    (89) array_elements -> array_elements . COMMA expression_string
    (90) array_elements -> array_elements . COMMA expression_boolean

    RIGHT_BRACKET   shift and go to state 296
    COMMA           shift and go to state 237


state 279

    (31) identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements . RIGHT_BRACKET array_estatement_julia
    (87) array_elements -> array_elements . COMMA expression_number
    (89) array_elements -> array_elements . COMMA expression_string
    (90) array_elements -> array_elements . COMMA expression_boolean

    RIGHT_BRACKET   shift and go to state 297
    COMMA           shift and go to state 237


state 280

    (59) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .

    IDENTIFIER      reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    IF              reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    ELSEIF          reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    ELSE            reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    WHILE           reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    FOR             reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    FUNCTION        reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    DO              reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    TRY             reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    MODULE          reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    BEGIN           reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    USING           reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    NUMBER          reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    MINUS           reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    $end            reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    END             reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    CATCH           reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    RETURN          reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    COMMA           reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)
    NEWLINE         reduce using rule 59 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN .)


state 281

    (49) array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER . COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    COMMA           shift and go to state 298


state 282

    (66) if_statement -> IF expression_boolean statement_list ELSE statement_list END .
    (72) else_statement -> ELSE statement_list END .

  ! reduce/reduce conflict for END resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSE resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IF resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for WHILE resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FOR resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for DO resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for TRY resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MODULE resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for BEGIN resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for USING resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for NUMBER resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MINUS resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    IDENTIFIER      reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    FUNCTIONS_JULIA reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    IF              reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    ELSEIF          reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    ELSE            reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    WHILE           reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    FOR             reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    FUNCTION        reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    DO              reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    TRY             reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    MODULE          reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    BEGIN           reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    USING           reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    NUMBER          reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    MINUS           reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    LEFT_PAREN      reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    LEFT_BRACKET    reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    $end            reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    END             reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    CATCH           reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    RETURN          reduce using rule 66 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)

  ! END             [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! ELSE            [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! ELSEIF          [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! IDENTIFIER      [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! IF              [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! WHILE           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! FOR             [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTION        [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! DO              [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! TRY             [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! MODULE          [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! BEGIN           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! USING           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! NUMBER          [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! MINUS           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_PAREN      [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_BRACKET    [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]


state 283

    (67) if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE . statement_list END
    (72) else_statement -> ELSE . statement_list END
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement_list                 shift and go to state 299
    elseif_block                   shift and go to state 9
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 284

    (70) elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .
    (72) else_statement -> ELSE statement_list END .

  ! reduce/reduce conflict for END resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSE resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IF resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for WHILE resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FOR resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for DO resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for TRY resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MODULE resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for BEGIN resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for USING resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for NUMBER resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MINUS resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    IDENTIFIER      reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    FUNCTIONS_JULIA reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    IF              reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    ELSEIF          reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    ELSE            reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    WHILE           reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    FOR             reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    FUNCTION        reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    DO              reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    TRY             reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    MODULE          reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    BEGIN           reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    USING           reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    NUMBER          reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    MINUS           reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    LEFT_PAREN      reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    LEFT_BRACKET    reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    $end            reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    END             reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    CATCH           reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    RETURN          reduce using rule 70 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)

  ! END             [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! ELSE            [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! ELSEIF          [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! IDENTIFIER      [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! IF              [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! WHILE           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! FOR             [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTION        [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! DO              [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! TRY             [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! MODULE          [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! BEGIN           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! USING           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! NUMBER          [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! MINUS           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_PAREN      [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_BRACKET    [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]


state 285

    (76) while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .

    IDENTIFIER      reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    FUNCTIONS_JULIA reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    IF              reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    ELSEIF          reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    ELSE            reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    WHILE           reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    FOR             reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    FUNCTION        reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    DO              reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    TRY             reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    MODULE          reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    BEGIN           reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    USING           reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    NUMBER          reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    MINUS           reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    LEFT_PAREN      reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    LEFT_BRACKET    reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    $end            reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    END             reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    CATCH           reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    RETURN          reduce using rule 76 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)


state 286

    (77) for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number . statement_list END
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 301
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    expression_number              shift and go to state 24
    statement_list                 shift and go to state 300
    operator_arithmetic            shift and go to state 61
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 287

    (78) for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number . statement_list END
    (121) expression_number -> expression_number DOUBLEDOT expression_number .
    (120) expression_number -> expression_number . operator_arithmetic expression_number
    (121) expression_number -> expression_number . DOUBLEDOT expression_number
    (122) expression_number -> expression_number . DOT expression_number
    (4) statement_list -> . statement
    (5) statement_list -> . statement statement_list
    (6) statement_list -> . statement_list statement
    (131) operator_arithmetic -> . PLUS
    (132) operator_arithmetic -> . MINUS
    (133) operator_arithmetic -> . MULTIPLY
    (134) operator_arithmetic -> . DIVIDE
    (135) operator_arithmetic -> . PERCENT
    (136) operator_arithmetic -> . SQUAREROOT
    (137) operator_arithmetic -> . EXPONENT
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LESS_THAN       reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    GREATER_THAN    reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    EQUALS          reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    NOT_EQUALS      reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    AND             reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ANDSYM          reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    OR              reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ORSYM           reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .)
    DOUBLEDOT       shift and go to state 60
    DOT             shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 301
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    SQUAREROOT      shift and go to state 68
    EXPONENT        shift and go to state 69
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    END             reduce using rule 91 (empty -> .)

  ! DOUBLEDOT       [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! DOT             [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! PLUS            [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! MINUS           [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! MULTIPLY        [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! DIVIDE          [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! PERCENT         [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! EXPONENT        [ reduce using rule 121 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    expression_number              shift and go to state 24
    statement_list                 shift and go to state 302
    operator_arithmetic            shift and go to state 61
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 288

    (79) for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 303
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 289

    (53) function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list . END
    (54) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list . END
    (55) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list . RETURN expression END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 304
    RETURN          shift and go to state 305
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! RETURN          [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 290

    (95) statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .

    IDENTIFIER      reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    FUNCTIONS_JULIA reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    IF              reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    ELSEIF          reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    ELSE            reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    WHILE           reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    FOR             reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    FUNCTION        reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    DO              reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    TRY             reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    MODULE          reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    BEGIN           reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    USING           reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    NUMBER          reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    MINUS           reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    LEFT_PAREN      reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    LEFT_BRACKET    reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    $end            reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    END             reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    CATCH           reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    RETURN          reduce using rule 95 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)


state 291

    (81) identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .

    COMMA           reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NEWLINE         reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTIONS_JULIA reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IF              reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSEIF          reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSE            reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    WHILE           reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FOR             reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTION        reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    DO              reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    TRY             reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MODULE          reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    BEGIN           reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    USING           reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NUMBER          reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MINUS           reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    $end            reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    END             reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    CATCH           reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RETURN          reduce using rule 81 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 292

    (82) identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .

    COMMA           reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NEWLINE         reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTIONS_JULIA reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IF              reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSEIF          reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSE            reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    WHILE           reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FOR             reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTION        reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    DO              reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    TRY             reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MODULE          reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    BEGIN           reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    USING           reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NUMBER          reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MINUS           reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    $end            reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    END             reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    CATCH           reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RETURN          reduce using rule 82 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 293

    (29) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 306


state 294

    (56) statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .

    IDENTIFIER      reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    FUNCTIONS_JULIA reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    IF              reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    ELSEIF          reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    ELSE            reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    WHILE           reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    FOR             reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    FUNCTION        reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    DO              reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    TRY             reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    MODULE          reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    BEGIN           reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    USING           reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    NUMBER          reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    MINUS           reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    LEFT_PAREN      reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    LEFT_BRACKET    reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    $end            reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    END             reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    CATCH           reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    RETURN          reduce using rule 56 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)


state 295

    (48) array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE . DOUBLEDOT array_content_julia

    DOUBLEDOT       shift and go to state 307


state 296

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET . COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia

    COMMA           shift and go to state 308


state 297

    (31) identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET . array_estatement_julia
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    array_estatement_julia         shift and go to state 309
    expression_number              shift and go to state 24
    values                         shift and go to state 30

state 298

    (49) array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA . NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia

    NUMBER          shift and go to state 310


state 299

    (67) if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list . END
    (72) else_statement -> ELSE statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 311
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    elseif_block                   shift and go to state 9
    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 300

    (77) for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 312
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    expression_number              shift and go to state 24
    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 301

    (132) operator_arithmetic -> MINUS .
    (123) expression_number -> MINUS . expression_number
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET

    IDENTIFIER      reduce using rule 132 (operator_arithmetic -> MINUS .)
    NUMBER          reduce using rule 132 (operator_arithmetic -> MINUS .)
    MINUS           reduce using rule 132 (operator_arithmetic -> MINUS .)
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! LEFT_PAREN      [ reduce using rule 132 (operator_arithmetic -> MINUS .) ]
  ! LEFT_BRACKET    [ reduce using rule 132 (operator_arithmetic -> MINUS .) ]
  ! IDENTIFIER      [ shift and go to state 83 ]
  ! NUMBER          [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 31 ]

    expression_number              shift and go to state 91

state 302

    (78) for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (80) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (81) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (82) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (65) if_statement -> . IF expression_boolean statement_list END
    (66) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (67) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (68) if_statement -> . IF expression_boolean statement_list elseif_block END
    (69) elseif_block -> . ELSEIF expression_boolean statement_list END
    (70) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (71) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (72) else_statement -> . ELSE statement_list END
    (73) else_statement -> . empty
    (75) while_statement -> . WHILE expression_boolean statement_list END
    (76) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (77) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (78) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (79) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (53) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (54) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (55) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (56) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (92) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (57) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (58) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER RIGHT_PAREN
    (59) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN NUMBER DOT NUMBER RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (93) statement_do -> . DO statement_list END
    (95) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (96) statement_module -> . MODULE IDENTIFIER statement_list END
    (94) statement_begin -> . BEGIN statement_list END
    (97) statement_using -> . USING IDENTIFIER
    (98) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER
    (91) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    END             shift and go to state 313
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    FUNCTION        shift and go to state 37
    DO              shift and go to state 38
    TRY             shift and go to state 39
    MODULE          shift and go to state 40
    BEGIN           shift and go to state 41
    USING           shift and go to state 42
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! END             [ reduce using rule 91 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 91 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 91 (empty -> .) ]
  ! IF              [ reduce using rule 91 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 91 (empty -> .) ]
  ! ELSE            [ reduce using rule 91 (empty -> .) ]
  ! WHILE           [ reduce using rule 91 (empty -> .) ]
  ! FOR             [ reduce using rule 91 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 91 (empty -> .) ]
  ! DO              [ reduce using rule 91 (empty -> .) ]
  ! TRY             [ reduce using rule 91 (empty -> .) ]
  ! MODULE          [ reduce using rule 91 (empty -> .) ]
  ! BEGIN           [ reduce using rule 91 (empty -> .) ]
  ! USING           [ reduce using rule 91 (empty -> .) ]
  ! NUMBER          [ reduce using rule 91 (empty -> .) ]
  ! MINUS           [ reduce using rule 91 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 91 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 91 (empty -> .) ]

    expression_number              shift and go to state 24
    statement                      shift and go to state 43
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 44

state 303

    (79) for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .

    IDENTIFIER      reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    FUNCTIONS_JULIA reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    IF              reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    ELSEIF          reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    ELSE            reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    WHILE           reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    FOR             reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    FUNCTION        reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    DO              reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    TRY             reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    MODULE          reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    BEGIN           reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    USING           reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    NUMBER          reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    MINUS           reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    LEFT_PAREN      reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    LEFT_BRACKET    reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    $end            reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    END             reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    CATCH           reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    RETURN          reduce using rule 79 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)


state 304

    (53) function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .
    (54) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for IF resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for ELSE resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for WHILE resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for FOR resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for DO resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for TRY resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for MODULE resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for BEGIN resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for USING resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for NUMBER resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for MINUS resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for $end resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for END resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for CATCH resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for RETURN resolved using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    IDENTIFIER      reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    FUNCTIONS_JULIA reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    IF              reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    ELSEIF          reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    ELSE            reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    WHILE           reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    FOR             reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    FUNCTION        reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    DO              reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    TRY             reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    MODULE          reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    BEGIN           reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    USING           reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    NUMBER          reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    MINUS           reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    LEFT_PAREN      reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    LEFT_BRACKET    reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    $end            reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    END             reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    CATCH           reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    RETURN          reduce using rule 53 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)

  ! IDENTIFIER      [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! IF              [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! ELSEIF          [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! ELSE            [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! WHILE           [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! FOR             [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! FUNCTION        [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! DO              [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! TRY             [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! MODULE          [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! BEGIN           [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! USING           [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! NUMBER          [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! MINUS           [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! LEFT_PAREN      [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! LEFT_BRACKET    [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! $end            [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! END             [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! CATCH           [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! RETURN          [ reduce using rule 54 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]


state 305

    (55) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN . expression END
    (100) expression -> . expression_number
    (101) expression -> . expression_string
    (102) expression -> . expression_boolean
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (127) expression_string -> . STRING
    (128) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (129) expression_string -> . expression_string MULTIPLY expression_number
    (130) expression_string -> . expression_string MULTIPLY expression_string
    (103) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (104) expression_boolean -> . IDENTIFIER
    (105) expression_boolean -> . BOOLEAN
    (106) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (107) expression_boolean -> . expression_boolean relation expression_boolean
    (108) expression_boolean -> . ADMIRATION expression_boolean
    (109) expression_boolean -> . expression_string relation expression_string
    (110) expression_boolean -> . expression_number relation expression_number

    IDENTIFIER      shift and go to state 115
    NUMBER          shift and go to state 84
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 120
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 95
    ADMIRATION      shift and go to state 96

    expression                     shift and go to state 314
    expression_number              shift and go to state 126
    expression_string              shift and go to state 127
    expression_boolean             shift and go to state 128

state 306

    (29) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .

    COMMA           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    NEWLINE         reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    IF              reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    ELSEIF          reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    ELSE            reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    WHILE           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    FOR             reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    FUNCTION        reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    DO              reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    TRY             reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    MODULE          reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    BEGIN           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    USING           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    NUMBER          reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    MINUS           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    $end            reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    END             reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    CATCH           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    RETURN          reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)


state 307

    (48) array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT . array_content_julia
    (50) array_content_julia -> . values
    (51) array_content_julia -> . values NEWLINE
    (52) values -> . NUMBER

    NUMBER          shift and go to state 315

    array_content_julia            shift and go to state 316
    values                         shift and go to state 317

state 308

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA . FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia

    FUNCTIONS_JULIA shift and go to state 318


state 309

    (31) identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .

    COMMA           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    NEWLINE         reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    IDENTIFIER      reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    FUNCTIONS_JULIA reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    IF              reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    ELSEIF          reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    ELSE            reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    WHILE           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    FOR             reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    FUNCTION        reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    DO              reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    TRY             reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    MODULE          reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    BEGIN           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    USING           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    NUMBER          reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    MINUS           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    LEFT_PAREN      reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    LEFT_BRACKET    reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    $end            reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    END             reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    CATCH           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    RETURN          reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)


state 310

    (49) array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER . RIGHT_BRACE DOUBLEDOT array_content_julia

    RIGHT_BRACE     shift and go to state 319


state 311

    (67) if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .
    (72) else_statement -> ELSE statement_list END .

  ! reduce/reduce conflict for ELSE resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IF resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for WHILE resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FOR resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for DO resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for TRY resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MODULE resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for BEGIN resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for USING resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for NUMBER resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MINUS resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    IDENTIFIER      reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    FUNCTIONS_JULIA reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    IF              reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    ELSEIF          reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    ELSE            reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    WHILE           reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    FOR             reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    FUNCTION        reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    DO              reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    TRY             reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    MODULE          reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    BEGIN           reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    USING           reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    NUMBER          reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    MINUS           reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    LEFT_PAREN      reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    LEFT_BRACKET    reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    $end            reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    END             reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    CATCH           reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    RETURN          reduce using rule 67 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)

  ! ELSE            [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! IDENTIFIER      [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! IF              [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! ELSEIF          [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! WHILE           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! FOR             [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTION        [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! DO              [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! TRY             [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! MODULE          [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! BEGIN           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! USING           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! NUMBER          [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! MINUS           [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_PAREN      [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_BRACKET    [ reduce using rule 72 (else_statement -> ELSE statement_list END .) ]


state 312

    (77) for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .

    IDENTIFIER      reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    FUNCTIONS_JULIA reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    IF              reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    ELSEIF          reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    ELSE            reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    WHILE           reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    FOR             reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    FUNCTION        reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    DO              reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    TRY             reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    MODULE          reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    BEGIN           reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    USING           reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    NUMBER          reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    MINUS           reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    LEFT_PAREN      reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    LEFT_BRACKET    reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    $end            reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    END             reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    CATCH           reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    RETURN          reduce using rule 77 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)


state 313

    (78) for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .

    IDENTIFIER      reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    FUNCTIONS_JULIA reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    IF              reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    ELSEIF          reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    ELSE            reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    WHILE           reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    FOR             reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    FUNCTION        reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    DO              reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    TRY             reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    MODULE          reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    BEGIN           reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    USING           reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    NUMBER          reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    MINUS           reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    LEFT_PAREN      reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    LEFT_BRACKET    reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    $end            reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    END             reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    CATCH           reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    RETURN          reduce using rule 78 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)


state 314

    (55) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression . END

    END             shift and go to state 320


state 315

    (52) values -> NUMBER .

    NEWLINE         reduce using rule 52 (values -> NUMBER .)
    IDENTIFIER      reduce using rule 52 (values -> NUMBER .)
    FUNCTIONS_JULIA reduce using rule 52 (values -> NUMBER .)
    IF              reduce using rule 52 (values -> NUMBER .)
    ELSEIF          reduce using rule 52 (values -> NUMBER .)
    ELSE            reduce using rule 52 (values -> NUMBER .)
    WHILE           reduce using rule 52 (values -> NUMBER .)
    FOR             reduce using rule 52 (values -> NUMBER .)
    FUNCTION        reduce using rule 52 (values -> NUMBER .)
    DO              reduce using rule 52 (values -> NUMBER .)
    TRY             reduce using rule 52 (values -> NUMBER .)
    MODULE          reduce using rule 52 (values -> NUMBER .)
    BEGIN           reduce using rule 52 (values -> NUMBER .)
    USING           reduce using rule 52 (values -> NUMBER .)
    NUMBER          reduce using rule 52 (values -> NUMBER .)
    MINUS           reduce using rule 52 (values -> NUMBER .)
    LEFT_PAREN      reduce using rule 52 (values -> NUMBER .)
    LEFT_BRACKET    reduce using rule 52 (values -> NUMBER .)
    $end            reduce using rule 52 (values -> NUMBER .)
    END             reduce using rule 52 (values -> NUMBER .)
    CATCH           reduce using rule 52 (values -> NUMBER .)
    RETURN          reduce using rule 52 (values -> NUMBER .)
    COMMA           reduce using rule 52 (values -> NUMBER .)


state 316

    (48) array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .

    IDENTIFIER      reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FUNCTIONS_JULIA reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    IF              reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    ELSEIF          reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    ELSE            reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    WHILE           reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FOR             reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FUNCTION        reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    DO              reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    TRY             reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    MODULE          reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    BEGIN           reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    USING           reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    NUMBER          reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    MINUS           reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    LEFT_PAREN      reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    LEFT_BRACKET    reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    $end            reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    END             reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    CATCH           reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    RETURN          reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    COMMA           reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    NEWLINE         reduce using rule 48 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)


state 317

    (50) array_content_julia -> values .
    (51) array_content_julia -> values . NEWLINE

  ! shift/reduce conflict for NEWLINE resolved as shift
    IDENTIFIER      reduce using rule 50 (array_content_julia -> values .)
    FUNCTIONS_JULIA reduce using rule 50 (array_content_julia -> values .)
    IF              reduce using rule 50 (array_content_julia -> values .)
    ELSEIF          reduce using rule 50 (array_content_julia -> values .)
    ELSE            reduce using rule 50 (array_content_julia -> values .)
    WHILE           reduce using rule 50 (array_content_julia -> values .)
    FOR             reduce using rule 50 (array_content_julia -> values .)
    FUNCTION        reduce using rule 50 (array_content_julia -> values .)
    DO              reduce using rule 50 (array_content_julia -> values .)
    TRY             reduce using rule 50 (array_content_julia -> values .)
    MODULE          reduce using rule 50 (array_content_julia -> values .)
    BEGIN           reduce using rule 50 (array_content_julia -> values .)
    USING           reduce using rule 50 (array_content_julia -> values .)
    NUMBER          reduce using rule 50 (array_content_julia -> values .)
    MINUS           reduce using rule 50 (array_content_julia -> values .)
    LEFT_PAREN      reduce using rule 50 (array_content_julia -> values .)
    LEFT_BRACKET    reduce using rule 50 (array_content_julia -> values .)
    $end            reduce using rule 50 (array_content_julia -> values .)
    END             reduce using rule 50 (array_content_julia -> values .)
    CATCH           reduce using rule 50 (array_content_julia -> values .)
    RETURN          reduce using rule 50 (array_content_julia -> values .)
    COMMA           reduce using rule 50 (array_content_julia -> values .)
    NEWLINE         shift and go to state 321

  ! NEWLINE         [ reduce using rule 50 (array_content_julia -> values .) ]


state 318

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA . ASSIGN NUMBER RIGHT_PAREN array_estatement_julia

    ASSIGN          shift and go to state 322


state 319

    (49) array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE . DOUBLEDOT array_content_julia

    DOUBLEDOT       shift and go to state 323


state 320

    (55) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .

    IDENTIFIER      reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    FUNCTIONS_JULIA reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    IF              reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    ELSEIF          reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    ELSE            reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    WHILE           reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    FOR             reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    FUNCTION        reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    DO              reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    TRY             reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    MODULE          reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    BEGIN           reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    USING           reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    NUMBER          reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    MINUS           reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    LEFT_PAREN      reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    LEFT_BRACKET    reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    $end            reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    END             reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    CATCH           reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    RETURN          reduce using rule 55 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)


state 321

    (51) array_content_julia -> values NEWLINE .

    IDENTIFIER      reduce using rule 51 (array_content_julia -> values NEWLINE .)
    FUNCTIONS_JULIA reduce using rule 51 (array_content_julia -> values NEWLINE .)
    IF              reduce using rule 51 (array_content_julia -> values NEWLINE .)
    ELSEIF          reduce using rule 51 (array_content_julia -> values NEWLINE .)
    ELSE            reduce using rule 51 (array_content_julia -> values NEWLINE .)
    WHILE           reduce using rule 51 (array_content_julia -> values NEWLINE .)
    FOR             reduce using rule 51 (array_content_julia -> values NEWLINE .)
    FUNCTION        reduce using rule 51 (array_content_julia -> values NEWLINE .)
    DO              reduce using rule 51 (array_content_julia -> values NEWLINE .)
    TRY             reduce using rule 51 (array_content_julia -> values NEWLINE .)
    MODULE          reduce using rule 51 (array_content_julia -> values NEWLINE .)
    BEGIN           reduce using rule 51 (array_content_julia -> values NEWLINE .)
    USING           reduce using rule 51 (array_content_julia -> values NEWLINE .)
    NUMBER          reduce using rule 51 (array_content_julia -> values NEWLINE .)
    MINUS           reduce using rule 51 (array_content_julia -> values NEWLINE .)
    LEFT_PAREN      reduce using rule 51 (array_content_julia -> values NEWLINE .)
    LEFT_BRACKET    reduce using rule 51 (array_content_julia -> values NEWLINE .)
    $end            reduce using rule 51 (array_content_julia -> values NEWLINE .)
    END             reduce using rule 51 (array_content_julia -> values NEWLINE .)
    CATCH           reduce using rule 51 (array_content_julia -> values NEWLINE .)
    RETURN          reduce using rule 51 (array_content_julia -> values NEWLINE .)
    COMMA           reduce using rule 51 (array_content_julia -> values NEWLINE .)
    NEWLINE         reduce using rule 51 (array_content_julia -> values NEWLINE .)


state 322

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN . NUMBER RIGHT_PAREN array_estatement_julia

    NUMBER          shift and go to state 324


state 323

    (49) array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT . array_content_julia
    (50) array_content_julia -> . values
    (51) array_content_julia -> . values NEWLINE
    (52) values -> . NUMBER

    NUMBER          shift and go to state 315

    values                         shift and go to state 317
    array_content_julia            shift and go to state 325

state 324

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER . RIGHT_PAREN array_estatement_julia

    RIGHT_PAREN     shift and go to state 326


state 325

    (49) array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .

    IDENTIFIER      reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FUNCTIONS_JULIA reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    IF              reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    ELSEIF          reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    ELSE            reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    WHILE           reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FOR             reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FUNCTION        reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    DO              reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    TRY             reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    MODULE          reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    BEGIN           reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    USING           reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    NUMBER          reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    MINUS           reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    LEFT_PAREN      reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    LEFT_BRACKET    reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    $end            reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    END             reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    CATCH           reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    RETURN          reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    COMMA           reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    NEWLINE         reduce using rule 49 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia .)


state 326

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN . array_estatement_julia
    (48) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (49) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA NUMBER RIGHT_BRACE DOUBLEDOT array_content_julia
    (118) expression_number -> . IDENTIFIER
    (119) expression_number -> . NUMBER
    (120) expression_number -> . expression_number operator_arithmetic expression_number
    (121) expression_number -> . expression_number DOUBLEDOT expression_number
    (122) expression_number -> . expression_number DOT expression_number
    (123) expression_number -> . MINUS expression_number
    (124) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (125) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (126) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (52) values -> . NUMBER

    IDENTIFIER      shift and go to state 83
    NUMBER          shift and go to state 28
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    array_estatement_julia         shift and go to state 327
    expression_number              shift and go to state 24
    values                         shift and go to state 30

state 327

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .

    COMMA           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    NEWLINE         reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    IDENTIFIER      reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    FUNCTIONS_JULIA reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    IF              reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    ELSEIF          reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    ELSE            reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    WHILE           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    FOR             reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    FUNCTION        reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    DO              reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    TRY             reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    MODULE          reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    BEGIN           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    USING           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    NUMBER          reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    MINUS           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    LEFT_PAREN      reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    LEFT_BRACKET    reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    $end            reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    END             reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    CATCH           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)
    RETURN          reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN NUMBER RIGHT_PAREN array_estatement_julia .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 0 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 0 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 0 resolved as shift
WARNING: shift/reduce conflict for USING in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for TRY in state 3 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 3 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 3 resolved as shift
WARNING: shift/reduce conflict for USING in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 3 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 5 resolved as shift
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 5 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 5 resolved as shift
WARNING: shift/reduce conflict for FOR in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for DO in state 5 resolved as shift
WARNING: shift/reduce conflict for TRY in state 5 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 5 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 5 resolved as shift
WARNING: shift/reduce conflict for USING in state 5 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 5 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 5 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 5 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 5 resolved as shift
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 5 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 5 resolved as shift
WARNING: shift/reduce conflict for FOR in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for DO in state 5 resolved as shift
WARNING: shift/reduce conflict for TRY in state 5 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 5 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 5 resolved as shift
WARNING: shift/reduce conflict for USING in state 5 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 5 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 5 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 5 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 33 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 33 resolved as shift
WARNING: shift/reduce conflict for IF in state 33 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 33 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 33 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 33 resolved as shift
WARNING: shift/reduce conflict for FOR in state 33 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 33 resolved as shift
WARNING: shift/reduce conflict for DO in state 33 resolved as shift
WARNING: shift/reduce conflict for TRY in state 33 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 33 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 33 resolved as shift
WARNING: shift/reduce conflict for USING in state 33 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 33 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 33 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 33 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 33 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 38 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 38 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 38 resolved as shift
WARNING: shift/reduce conflict for DO in state 38 resolved as shift
WARNING: shift/reduce conflict for TRY in state 38 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 38 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 38 resolved as shift
WARNING: shift/reduce conflict for USING in state 38 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 38 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 38 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 38 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 38 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 39 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 39 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 39 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 39 resolved as shift
WARNING: shift/reduce conflict for FOR in state 39 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 39 resolved as shift
WARNING: shift/reduce conflict for DO in state 39 resolved as shift
WARNING: shift/reduce conflict for TRY in state 39 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 39 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 39 resolved as shift
WARNING: shift/reduce conflict for USING in state 39 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 39 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 39 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 39 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 39 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 41 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 41 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 41 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 41 resolved as shift
WARNING: shift/reduce conflict for DO in state 41 resolved as shift
WARNING: shift/reduce conflict for TRY in state 41 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 41 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 41 resolved as shift
WARNING: shift/reduce conflict for USING in state 41 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 41 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 41 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 41 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 41 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 45 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 45 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 45 resolved as shift
WARNING: shift/reduce conflict for DO in state 45 resolved as shift
WARNING: shift/reduce conflict for TRY in state 45 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 45 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 45 resolved as shift
WARNING: shift/reduce conflict for USING in state 45 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 45 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 45 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 45 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 45 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 45 resolved as shift
WARNING: shift/reduce conflict for DO in state 45 resolved as shift
WARNING: shift/reduce conflict for TRY in state 45 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 45 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 45 resolved as shift
WARNING: shift/reduce conflict for USING in state 45 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 45 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 45 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 92 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 92 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 92 resolved as shift
WARNING: shift/reduce conflict for FOR in state 92 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 92 resolved as shift
WARNING: shift/reduce conflict for DO in state 92 resolved as shift
WARNING: shift/reduce conflict for TRY in state 92 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 92 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 92 resolved as shift
WARNING: shift/reduce conflict for USING in state 92 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 92 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 92 resolved as shift
WARNING: shift/reduce conflict for END in state 100 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 100 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 100 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for FOR in state 100 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 100 resolved as shift
WARNING: shift/reduce conflict for DO in state 100 resolved as shift
WARNING: shift/reduce conflict for TRY in state 100 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 100 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 100 resolved as shift
WARNING: shift/reduce conflict for USING in state 100 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 100 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 100 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 101 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 101 resolved as shift
WARNING: shift/reduce conflict for IF in state 101 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 101 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 101 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 101 resolved as shift
WARNING: shift/reduce conflict for FOR in state 101 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 101 resolved as shift
WARNING: shift/reduce conflict for DO in state 101 resolved as shift
WARNING: shift/reduce conflict for TRY in state 101 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 101 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 101 resolved as shift
WARNING: shift/reduce conflict for USING in state 101 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 101 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 101 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 102 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 102 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 102 resolved as shift
WARNING: shift/reduce conflict for DO in state 102 resolved as shift
WARNING: shift/reduce conflict for TRY in state 102 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 102 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 102 resolved as shift
WARNING: shift/reduce conflict for USING in state 102 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 102 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 102 resolved as shift
WARNING: shift/reduce conflict for END in state 106 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 106 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 106 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 106 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 106 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 106 resolved as shift
WARNING: shift/reduce conflict for FOR in state 106 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 106 resolved as shift
WARNING: shift/reduce conflict for DO in state 106 resolved as shift
WARNING: shift/reduce conflict for TRY in state 106 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 106 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 106 resolved as shift
WARNING: shift/reduce conflict for USING in state 106 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 106 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 106 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 107 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 107 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 107 resolved as shift
WARNING: shift/reduce conflict for IF in state 107 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 107 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 107 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 107 resolved as shift
WARNING: shift/reduce conflict for FOR in state 107 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 107 resolved as shift
WARNING: shift/reduce conflict for DO in state 107 resolved as shift
WARNING: shift/reduce conflict for TRY in state 107 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 107 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 107 resolved as shift
WARNING: shift/reduce conflict for USING in state 107 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 107 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 107 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 108 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 108 resolved as shift
WARNING: shift/reduce conflict for IF in state 108 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 108 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 108 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 108 resolved as shift
WARNING: shift/reduce conflict for FOR in state 108 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 108 resolved as shift
WARNING: shift/reduce conflict for DO in state 108 resolved as shift
WARNING: shift/reduce conflict for TRY in state 108 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 108 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 108 resolved as shift
WARNING: shift/reduce conflict for USING in state 108 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 108 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 108 resolved as shift
WARNING: shift/reduce conflict for END in state 109 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 109 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 109 resolved as shift
WARNING: shift/reduce conflict for IF in state 109 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 109 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 109 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 109 resolved as shift
WARNING: shift/reduce conflict for FOR in state 109 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 109 resolved as shift
WARNING: shift/reduce conflict for DO in state 109 resolved as shift
WARNING: shift/reduce conflict for TRY in state 109 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 109 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 109 resolved as shift
WARNING: shift/reduce conflict for USING in state 109 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 109 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for DOUBLEDOT in state 132 resolved as shift
WARNING: shift/reduce conflict for DOT in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 132 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 132 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 132 resolved as shift
WARNING: shift/reduce conflict for SQUAREROOT in state 132 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 132 resolved as shift
WARNING: shift/reduce conflict for DOUBLEDOT in state 133 resolved as shift
WARNING: shift/reduce conflict for DOT in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 133 resolved as shift
WARNING: shift/reduce conflict for SQUAREROOT in state 133 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 133 resolved as shift
WARNING: shift/reduce conflict for DOUBLEDOT in state 134 resolved as shift
WARNING: shift/reduce conflict for DOT in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 134 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 134 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 134 resolved as shift
WARNING: shift/reduce conflict for SQUAREROOT in state 134 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 134 resolved as shift
WARNING: shift/reduce conflict for DOT in state 138 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 138 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 143 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 144 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 145 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 148 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for END in state 155 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 155 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 155 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 155 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 155 resolved as shift
WARNING: shift/reduce conflict for FOR in state 155 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 155 resolved as shift
WARNING: shift/reduce conflict for DO in state 155 resolved as shift
WARNING: shift/reduce conflict for TRY in state 155 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 155 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 155 resolved as shift
WARNING: shift/reduce conflict for USING in state 155 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 155 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 155 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 161 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 161 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 161 resolved as shift
WARNING: shift/reduce conflict for AND in state 161 resolved as shift
WARNING: shift/reduce conflict for ANDSYM in state 161 resolved as shift
WARNING: shift/reduce conflict for OR in state 161 resolved as shift
WARNING: shift/reduce conflict for ORSYM in state 161 resolved as shift
WARNING: shift/reduce conflict for END in state 166 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 166 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 166 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 166 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 166 resolved as shift
WARNING: shift/reduce conflict for IF in state 166 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 166 resolved as shift
WARNING: shift/reduce conflict for FOR in state 166 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 166 resolved as shift
WARNING: shift/reduce conflict for DO in state 166 resolved as shift
WARNING: shift/reduce conflict for TRY in state 166 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 166 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 166 resolved as shift
WARNING: shift/reduce conflict for USING in state 166 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 166 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 166 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 166 resolved as shift
WARNING: shift/reduce conflict for END in state 167 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 167 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 167 resolved as shift
WARNING: shift/reduce conflict for IF in state 167 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 167 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 167 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 167 resolved as shift
WARNING: shift/reduce conflict for FOR in state 167 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 167 resolved as shift
WARNING: shift/reduce conflict for DO in state 167 resolved as shift
WARNING: shift/reduce conflict for TRY in state 167 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 167 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 167 resolved as shift
WARNING: shift/reduce conflict for USING in state 167 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 167 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 167 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 167 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 167 resolved as shift
WARNING: shift/reduce conflict for END in state 174 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 174 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 174 resolved as shift
WARNING: shift/reduce conflict for IF in state 174 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 174 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 174 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 174 resolved as shift
WARNING: shift/reduce conflict for FOR in state 174 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 174 resolved as shift
WARNING: shift/reduce conflict for DO in state 174 resolved as shift
WARNING: shift/reduce conflict for TRY in state 174 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 174 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 174 resolved as shift
WARNING: shift/reduce conflict for USING in state 174 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 174 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 174 resolved as shift
WARNING: shift/reduce conflict for RIGHT_BRACKET in state 185 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 208 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 208 resolved as shift
WARNING: shift/reduce conflict for IF in state 208 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 208 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 208 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 208 resolved as shift
WARNING: shift/reduce conflict for FOR in state 208 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 208 resolved as shift
WARNING: shift/reduce conflict for DO in state 208 resolved as shift
WARNING: shift/reduce conflict for TRY in state 208 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 208 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 208 resolved as shift
WARNING: shift/reduce conflict for USING in state 208 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 208 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 208 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 208 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 208 resolved as shift
WARNING: shift/reduce conflict for END in state 209 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 209 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 209 resolved as shift
WARNING: shift/reduce conflict for IF in state 209 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 209 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 209 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 209 resolved as shift
WARNING: shift/reduce conflict for FOR in state 209 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 209 resolved as shift
WARNING: shift/reduce conflict for DO in state 209 resolved as shift
WARNING: shift/reduce conflict for TRY in state 209 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 209 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 209 resolved as shift
WARNING: shift/reduce conflict for USING in state 209 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 209 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 209 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 209 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 209 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 209 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 209 resolved as shift
WARNING: shift/reduce conflict for IF in state 209 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 209 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 209 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 209 resolved as shift
WARNING: shift/reduce conflict for FOR in state 209 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 209 resolved as shift
WARNING: shift/reduce conflict for DO in state 209 resolved as shift
WARNING: shift/reduce conflict for TRY in state 209 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 209 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 209 resolved as shift
WARNING: shift/reduce conflict for USING in state 209 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 209 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 209 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 209 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 209 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 210 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUAL in state 210 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 210 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 210 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 210 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 210 resolved as shift
WARNING: shift/reduce conflict for AND in state 210 resolved as shift
WARNING: shift/reduce conflict for ANDSYM in state 210 resolved as shift
WARNING: shift/reduce conflict for OR in state 210 resolved as shift
WARNING: shift/reduce conflict for ORSYM in state 210 resolved as shift
WARNING: shift/reduce conflict for DOUBLEDOT in state 218 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 218 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 220 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 220 resolved as shift
WARNING: shift/reduce conflict for IF in state 220 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 220 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 220 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 220 resolved as shift
WARNING: shift/reduce conflict for FOR in state 220 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 220 resolved as shift
WARNING: shift/reduce conflict for DO in state 220 resolved as shift
WARNING: shift/reduce conflict for TRY in state 220 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 220 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 220 resolved as shift
WARNING: shift/reduce conflict for USING in state 220 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 220 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 220 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 220 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 220 resolved as shift
WARNING: shift/reduce conflict for END in state 221 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 223 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 223 resolved as shift
WARNING: shift/reduce conflict for IF in state 223 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 223 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 223 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 223 resolved as shift
WARNING: shift/reduce conflict for FOR in state 223 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 223 resolved as shift
WARNING: shift/reduce conflict for DO in state 223 resolved as shift
WARNING: shift/reduce conflict for TRY in state 223 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 223 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 223 resolved as shift
WARNING: shift/reduce conflict for USING in state 223 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 223 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 223 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 223 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 223 resolved as shift
WARNING: shift/reduce conflict for DOUBLEDOT in state 225 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 229 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 229 resolved as shift
WARNING: shift/reduce conflict for IF in state 229 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 229 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 229 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 229 resolved as shift
WARNING: shift/reduce conflict for FOR in state 229 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 229 resolved as shift
WARNING: shift/reduce conflict for DO in state 229 resolved as shift
WARNING: shift/reduce conflict for TRY in state 229 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 229 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 229 resolved as shift
WARNING: shift/reduce conflict for USING in state 229 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 229 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 229 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 229 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 229 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 250 resolved as shift
WARNING: shift/reduce conflict for END in state 254 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 254 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 254 resolved as shift
WARNING: shift/reduce conflict for IF in state 254 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 254 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 254 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 254 resolved as shift
WARNING: shift/reduce conflict for FOR in state 254 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 254 resolved as shift
WARNING: shift/reduce conflict for DO in state 254 resolved as shift
WARNING: shift/reduce conflict for TRY in state 254 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 254 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 254 resolved as shift
WARNING: shift/reduce conflict for USING in state 254 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 254 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 254 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 254 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 254 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 255 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 255 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 255 resolved as shift
WARNING: shift/reduce conflict for IF in state 255 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 255 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 255 resolved as shift
WARNING: shift/reduce conflict for FOR in state 255 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 255 resolved as shift
WARNING: shift/reduce conflict for DO in state 255 resolved as shift
WARNING: shift/reduce conflict for TRY in state 255 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 255 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 255 resolved as shift
WARNING: shift/reduce conflict for USING in state 255 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 255 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 255 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 255 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 255 resolved as shift
WARNING: shift/reduce conflict for END in state 258 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 258 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 258 resolved as shift
WARNING: shift/reduce conflict for IF in state 258 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 258 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 258 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 258 resolved as shift
WARNING: shift/reduce conflict for FOR in state 258 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 258 resolved as shift
WARNING: shift/reduce conflict for DO in state 258 resolved as shift
WARNING: shift/reduce conflict for TRY in state 258 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 258 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 258 resolved as shift
WARNING: shift/reduce conflict for USING in state 258 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 258 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 258 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 258 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 258 resolved as shift
WARNING: shift/reduce conflict for END in state 260 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 260 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 260 resolved as shift
WARNING: shift/reduce conflict for IF in state 260 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 260 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 260 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 260 resolved as shift
WARNING: shift/reduce conflict for FOR in state 260 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 260 resolved as shift
WARNING: shift/reduce conflict for DO in state 260 resolved as shift
WARNING: shift/reduce conflict for TRY in state 260 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 260 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 260 resolved as shift
WARNING: shift/reduce conflict for USING in state 260 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 260 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 260 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 260 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 260 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 263 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 263 resolved as shift
WARNING: shift/reduce conflict for IF in state 263 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 263 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 263 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 263 resolved as shift
WARNING: shift/reduce conflict for FOR in state 263 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 263 resolved as shift
WARNING: shift/reduce conflict for DO in state 263 resolved as shift
WARNING: shift/reduce conflict for TRY in state 263 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 263 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 263 resolved as shift
WARNING: shift/reduce conflict for USING in state 263 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 263 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 263 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 263 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 263 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 264 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 264 resolved as shift
WARNING: shift/reduce conflict for IF in state 264 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 264 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 264 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 264 resolved as shift
WARNING: shift/reduce conflict for FOR in state 264 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 264 resolved as shift
WARNING: shift/reduce conflict for DO in state 264 resolved as shift
WARNING: shift/reduce conflict for TRY in state 264 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 264 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 264 resolved as shift
WARNING: shift/reduce conflict for USING in state 264 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 264 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 264 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 264 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 264 resolved as shift
WARNING: shift/reduce conflict for END in state 265 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 265 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 265 resolved as shift
WARNING: shift/reduce conflict for IF in state 265 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 265 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 265 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 265 resolved as shift
WARNING: shift/reduce conflict for FOR in state 265 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 265 resolved as shift
WARNING: shift/reduce conflict for DO in state 265 resolved as shift
WARNING: shift/reduce conflict for TRY in state 265 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 265 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 265 resolved as shift
WARNING: shift/reduce conflict for USING in state 265 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 265 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 265 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 265 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 265 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 283 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 283 resolved as shift
WARNING: shift/reduce conflict for IF in state 283 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 283 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 283 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 283 resolved as shift
WARNING: shift/reduce conflict for FOR in state 283 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 283 resolved as shift
WARNING: shift/reduce conflict for DO in state 283 resolved as shift
WARNING: shift/reduce conflict for TRY in state 283 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 283 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 283 resolved as shift
WARNING: shift/reduce conflict for USING in state 283 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 283 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 283 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 283 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 283 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 286 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 286 resolved as shift
WARNING: shift/reduce conflict for IF in state 286 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 286 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 286 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 286 resolved as shift
WARNING: shift/reduce conflict for FOR in state 286 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 286 resolved as shift
WARNING: shift/reduce conflict for DO in state 286 resolved as shift
WARNING: shift/reduce conflict for TRY in state 286 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 286 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 286 resolved as shift
WARNING: shift/reduce conflict for USING in state 286 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 286 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 286 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 286 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 286 resolved as shift
WARNING: shift/reduce conflict for DOUBLEDOT in state 287 resolved as shift
WARNING: shift/reduce conflict for DOT in state 287 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 287 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 287 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 287 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 287 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 287 resolved as shift
WARNING: shift/reduce conflict for SQUAREROOT in state 287 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 287 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 287 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 287 resolved as shift
WARNING: shift/reduce conflict for IF in state 287 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 287 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 287 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 287 resolved as shift
WARNING: shift/reduce conflict for FOR in state 287 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 287 resolved as shift
WARNING: shift/reduce conflict for DO in state 287 resolved as shift
WARNING: shift/reduce conflict for TRY in state 287 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 287 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 287 resolved as shift
WARNING: shift/reduce conflict for USING in state 287 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 287 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 287 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 287 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 287 resolved as shift
WARNING: shift/reduce conflict for END in state 288 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 288 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 288 resolved as shift
WARNING: shift/reduce conflict for IF in state 288 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 288 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 288 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 288 resolved as shift
WARNING: shift/reduce conflict for FOR in state 288 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 288 resolved as shift
WARNING: shift/reduce conflict for DO in state 288 resolved as shift
WARNING: shift/reduce conflict for TRY in state 288 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 288 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 288 resolved as shift
WARNING: shift/reduce conflict for USING in state 288 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 288 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 288 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 288 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 288 resolved as shift
WARNING: shift/reduce conflict for END in state 289 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 289 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 289 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 289 resolved as shift
WARNING: shift/reduce conflict for IF in state 289 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 289 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 289 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 289 resolved as shift
WARNING: shift/reduce conflict for FOR in state 289 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 289 resolved as shift
WARNING: shift/reduce conflict for DO in state 289 resolved as shift
WARNING: shift/reduce conflict for TRY in state 289 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 289 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 289 resolved as shift
WARNING: shift/reduce conflict for USING in state 289 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 289 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 289 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 289 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 289 resolved as shift
WARNING: shift/reduce conflict for END in state 299 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 299 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 299 resolved as shift
WARNING: shift/reduce conflict for IF in state 299 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 299 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 299 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 299 resolved as shift
WARNING: shift/reduce conflict for FOR in state 299 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 299 resolved as shift
WARNING: shift/reduce conflict for DO in state 299 resolved as shift
WARNING: shift/reduce conflict for TRY in state 299 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 299 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 299 resolved as shift
WARNING: shift/reduce conflict for USING in state 299 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 299 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 299 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 299 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 299 resolved as shift
WARNING: shift/reduce conflict for END in state 300 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 300 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 300 resolved as shift
WARNING: shift/reduce conflict for IF in state 300 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 300 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 300 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 300 resolved as shift
WARNING: shift/reduce conflict for FOR in state 300 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 300 resolved as shift
WARNING: shift/reduce conflict for DO in state 300 resolved as shift
WARNING: shift/reduce conflict for TRY in state 300 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 300 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 300 resolved as shift
WARNING: shift/reduce conflict for USING in state 300 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 300 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 300 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 300 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 300 resolved as shift
WARNING: shift/reduce conflict for END in state 302 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 302 resolved as shift
WARNING: shift/reduce conflict for FUNCTIONS_JULIA in state 302 resolved as shift
WARNING: shift/reduce conflict for IF in state 302 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 302 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 302 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 302 resolved as shift
WARNING: shift/reduce conflict for FOR in state 302 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 302 resolved as shift
WARNING: shift/reduce conflict for DO in state 302 resolved as shift
WARNING: shift/reduce conflict for TRY in state 302 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 302 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 302 resolved as shift
WARNING: shift/reduce conflict for USING in state 302 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 302 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 302 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 302 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 302 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 317 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (block -> statement_list)
WARNING: rejected rule (empty -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (block -> empty)
WARNING: rejected rule (else_statement -> empty) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (statement_list -> statement)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 28 resolved using rule (values -> NUMBER)
WARNING: rejected rule (expression_number -> NUMBER) in state 28
WARNING: reduce/reduce conflict in state 45 resolved using rule (statement_list -> statement statement_list)
WARNING: rejected rule (empty -> <empty>) in state 45
WARNING: reduce/reduce conflict in state 94 resolved using rule (expression_boolean -> IDENTIFIER)
WARNING: rejected rule (expression_number -> IDENTIFIER) in state 94
WARNING: reduce/reduce conflict in state 103 resolved using rule (expression_boolean -> IDENTIFIER)
WARNING: rejected rule (expression_number -> IDENTIFIER) in state 103
WARNING: reduce/reduce conflict in state 115 resolved using rule (expression_boolean -> IDENTIFIER)
WARNING: rejected rule (expression_number -> IDENTIFIER) in state 115
WARNING: reduce/reduce conflict in state 139 resolved using rule (expression_boolean -> IDENTIFIER)
WARNING: rejected rule (expression_number -> IDENTIFIER) in state 139
WARNING: reduce/reduce conflict in state 189 resolved using rule (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN)
WARNING: rejected rule (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN) in state 189
WARNING: reduce/reduce conflict in state 257 resolved using rule (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN)
WARNING: rejected rule (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN) in state 257
WARNING: reduce/reduce conflict in state 268 resolved using rule (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN)
WARNING: rejected rule (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN) in state 268
WARNING: reduce/reduce conflict in state 282 resolved using rule (if_statement -> IF expression_boolean statement_list ELSE statement_list END)
WARNING: rejected rule (else_statement -> ELSE statement_list END) in state 282
WARNING: reduce/reduce conflict in state 284 resolved using rule (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END)
WARNING: rejected rule (else_statement -> ELSE statement_list END) in state 284
WARNING: reduce/reduce conflict in state 304 resolved using rule (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END)
WARNING: rejected rule (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END) in state 304
WARNING: reduce/reduce conflict in state 311 resolved using rule (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END)
WARNING: rejected rule (else_statement -> ELSE statement_list END) in state 311
WARNING: Rule (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END) is never reduced
