Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    COMMENT
    CONTINUE
    DOUBLEPERCENT
    FLOAT64
    IMPORT
    INCLUDE
    MACRO
    MUT
    NOT
    PRINTLN
    REQUIRE
    STRUCT
    SYMBOL

Terminals, with rules where they appear

Parsing method: LALR

state 0

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    $end            reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    program                        shift and go to state 1
    block                          shift and go to state 2
    statement_list                 shift and go to state 3
    empty                          shift and go to state 4
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (block -> statement_list .)
    $end            reduce using rule 2 (block -> statement_list .)
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]
  ! $end            [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 4

  ! reduce/reduce conflict for $end resolved using rule 3 (block -> empty .)
    $end            reduce using rule 3 (block -> empty .)
    IDENTIFIER      reduce using rule 76 (else_statement -> empty .)
    FUNCTIONS_JULIA reduce using rule 76 (else_statement -> empty .)
    IF              reduce using rule 76 (else_statement -> empty .)
    ELSEIF          reduce using rule 76 (else_statement -> empty .)
    ELSE            reduce using rule 76 (else_statement -> empty .)
    WHILE           reduce using rule 76 (else_statement -> empty .)
    FOR             reduce using rule 76 (else_statement -> empty .)
    FUNCTION        reduce using rule 76 (else_statement -> empty .)
    DO              reduce using rule 76 (else_statement -> empty .)
    TRY             reduce using rule 76 (else_statement -> empty .)
    MODULE          reduce using rule 76 (else_statement -> empty .)
    BEGIN           reduce using rule 76 (else_statement -> empty .)
    USING           reduce using rule 76 (else_statement -> empty .)
    NUMBER          reduce using rule 76 (else_statement -> empty .)
    MINUS           reduce using rule 76 (else_statement -> empty .)
    LEFT_PAREN      reduce using rule 76 (else_statement -> empty .)
    LEFT_BRACKET    reduce using rule 76 (else_statement -> empty .)
    INTEGER         reduce using rule 76 (else_statement -> empty .)

  ! $end            [ reduce using rule 76 (else_statement -> empty .) ]


state 5

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (statement_list -> statement .)
  ! reduce/reduce conflict for END resolved using rule 4 (statement_list -> statement .)
  ! reduce/reduce conflict for CATCH resolved using rule 4 (statement_list -> statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    END             reduce using rule 4 (statement_list -> statement .)
    CATCH           reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! IDENTIFIER      [ reduce using rule 4 (statement_list -> statement .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 4 (statement_list -> statement .) ]
  ! IF              [ reduce using rule 4 (statement_list -> statement .) ]
  ! ELSEIF          [ reduce using rule 4 (statement_list -> statement .) ]
  ! ELSE            [ reduce using rule 4 (statement_list -> statement .) ]
  ! WHILE           [ reduce using rule 4 (statement_list -> statement .) ]
  ! FOR             [ reduce using rule 4 (statement_list -> statement .) ]
  ! FUNCTION        [ reduce using rule 4 (statement_list -> statement .) ]
  ! DO              [ reduce using rule 4 (statement_list -> statement .) ]
  ! TRY             [ reduce using rule 4 (statement_list -> statement .) ]
  ! MODULE          [ reduce using rule 4 (statement_list -> statement .) ]
  ! BEGIN           [ reduce using rule 4 (statement_list -> statement .) ]
  ! USING           [ reduce using rule 4 (statement_list -> statement .) ]
  ! NUMBER          [ reduce using rule 4 (statement_list -> statement .) ]
  ! MINUS           [ reduce using rule 4 (statement_list -> statement .) ]
  ! LEFT_PAREN      [ reduce using rule 4 (statement_list -> statement .) ]
  ! LEFT_BRACKET    [ reduce using rule 4 (statement_list -> statement .) ]
  ! INTEGER         [ reduce using rule 4 (statement_list -> statement .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]
  ! $end            [ reduce using rule 94 (empty -> .) ]
  ! END             [ reduce using rule 94 (empty -> .) ]
  ! CATCH           [ reduce using rule 94 (empty -> .) ]
  ! RETURN          [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 5
    statement_list                 shift and go to state 46
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 6

    IDENTIFIER      reduce using rule 7 (statement -> identifierDecl .)
    FUNCTIONS_JULIA reduce using rule 7 (statement -> identifierDecl .)
    IF              reduce using rule 7 (statement -> identifierDecl .)
    ELSEIF          reduce using rule 7 (statement -> identifierDecl .)
    ELSE            reduce using rule 7 (statement -> identifierDecl .)
    WHILE           reduce using rule 7 (statement -> identifierDecl .)
    FOR             reduce using rule 7 (statement -> identifierDecl .)
    FUNCTION        reduce using rule 7 (statement -> identifierDecl .)
    DO              reduce using rule 7 (statement -> identifierDecl .)
    TRY             reduce using rule 7 (statement -> identifierDecl .)
    MODULE          reduce using rule 7 (statement -> identifierDecl .)
    BEGIN           reduce using rule 7 (statement -> identifierDecl .)
    USING           reduce using rule 7 (statement -> identifierDecl .)
    NUMBER          reduce using rule 7 (statement -> identifierDecl .)
    MINUS           reduce using rule 7 (statement -> identifierDecl .)
    LEFT_PAREN      reduce using rule 7 (statement -> identifierDecl .)
    LEFT_BRACKET    reduce using rule 7 (statement -> identifierDecl .)
    INTEGER         reduce using rule 7 (statement -> identifierDecl .)
    $end            reduce using rule 7 (statement -> identifierDecl .)
    END             reduce using rule 7 (statement -> identifierDecl .)
    CATCH           reduce using rule 7 (statement -> identifierDecl .)
    RETURN          reduce using rule 7 (statement -> identifierDecl .)
    COMMA           shift and go to state 47
    NEWLINE         shift and go to state 48


state 7

    IDENTIFIER      reduce using rule 8 (statement -> array_estatement_julia .)
    FUNCTIONS_JULIA reduce using rule 8 (statement -> array_estatement_julia .)
    IF              reduce using rule 8 (statement -> array_estatement_julia .)
    ELSEIF          reduce using rule 8 (statement -> array_estatement_julia .)
    ELSE            reduce using rule 8 (statement -> array_estatement_julia .)
    WHILE           reduce using rule 8 (statement -> array_estatement_julia .)
    FOR             reduce using rule 8 (statement -> array_estatement_julia .)
    FUNCTION        reduce using rule 8 (statement -> array_estatement_julia .)
    DO              reduce using rule 8 (statement -> array_estatement_julia .)
    TRY             reduce using rule 8 (statement -> array_estatement_julia .)
    MODULE          reduce using rule 8 (statement -> array_estatement_julia .)
    BEGIN           reduce using rule 8 (statement -> array_estatement_julia .)
    USING           reduce using rule 8 (statement -> array_estatement_julia .)
    NUMBER          reduce using rule 8 (statement -> array_estatement_julia .)
    MINUS           reduce using rule 8 (statement -> array_estatement_julia .)
    LEFT_PAREN      reduce using rule 8 (statement -> array_estatement_julia .)
    LEFT_BRACKET    reduce using rule 8 (statement -> array_estatement_julia .)
    INTEGER         reduce using rule 8 (statement -> array_estatement_julia .)
    $end            reduce using rule 8 (statement -> array_estatement_julia .)
    END             reduce using rule 8 (statement -> array_estatement_julia .)
    CATCH           reduce using rule 8 (statement -> array_estatement_julia .)
    RETURN          reduce using rule 8 (statement -> array_estatement_julia .)


state 8

    IDENTIFIER      reduce using rule 9 (statement -> if_statement .)
    FUNCTIONS_JULIA reduce using rule 9 (statement -> if_statement .)
    IF              reduce using rule 9 (statement -> if_statement .)
    ELSEIF          reduce using rule 9 (statement -> if_statement .)
    ELSE            reduce using rule 9 (statement -> if_statement .)
    WHILE           reduce using rule 9 (statement -> if_statement .)
    FOR             reduce using rule 9 (statement -> if_statement .)
    FUNCTION        reduce using rule 9 (statement -> if_statement .)
    DO              reduce using rule 9 (statement -> if_statement .)
    TRY             reduce using rule 9 (statement -> if_statement .)
    MODULE          reduce using rule 9 (statement -> if_statement .)
    BEGIN           reduce using rule 9 (statement -> if_statement .)
    USING           reduce using rule 9 (statement -> if_statement .)
    NUMBER          reduce using rule 9 (statement -> if_statement .)
    MINUS           reduce using rule 9 (statement -> if_statement .)
    LEFT_PAREN      reduce using rule 9 (statement -> if_statement .)
    LEFT_BRACKET    reduce using rule 9 (statement -> if_statement .)
    INTEGER         reduce using rule 9 (statement -> if_statement .)
    $end            reduce using rule 9 (statement -> if_statement .)
    END             reduce using rule 9 (statement -> if_statement .)
    CATCH           reduce using rule 9 (statement -> if_statement .)
    RETURN          reduce using rule 9 (statement -> if_statement .)


state 9

    (10) statement -> elseif_block .

    IDENTIFIER      reduce using rule 10 (statement -> elseif_block .)
    FUNCTIONS_JULIA reduce using rule 10 (statement -> elseif_block .)
    IF              reduce using rule 10 (statement -> elseif_block .)
    ELSEIF          reduce using rule 10 (statement -> elseif_block .)
    ELSE            reduce using rule 10 (statement -> elseif_block .)
    WHILE           reduce using rule 10 (statement -> elseif_block .)
    FOR             reduce using rule 10 (statement -> elseif_block .)
    FUNCTION        reduce using rule 10 (statement -> elseif_block .)
    DO              reduce using rule 10 (statement -> elseif_block .)
    TRY             reduce using rule 10 (statement -> elseif_block .)
    MODULE          reduce using rule 10 (statement -> elseif_block .)
    BEGIN           reduce using rule 10 (statement -> elseif_block .)
    USING           reduce using rule 10 (statement -> elseif_block .)
    NUMBER          reduce using rule 10 (statement -> elseif_block .)
    MINUS           reduce using rule 10 (statement -> elseif_block .)
    LEFT_PAREN      reduce using rule 10 (statement -> elseif_block .)
    LEFT_BRACKET    reduce using rule 10 (statement -> elseif_block .)
    INTEGER         reduce using rule 10 (statement -> elseif_block .)
    $end            reduce using rule 10 (statement -> elseif_block .)
    END             reduce using rule 10 (statement -> elseif_block .)
    CATCH           reduce using rule 10 (statement -> elseif_block .)
    RETURN          reduce using rule 10 (statement -> elseif_block .)


state 10

    (11) statement -> else_statement .

    IDENTIFIER      reduce using rule 11 (statement -> else_statement .)
    FUNCTIONS_JULIA reduce using rule 11 (statement -> else_statement .)
    IF              reduce using rule 11 (statement -> else_statement .)
    ELSEIF          reduce using rule 11 (statement -> else_statement .)
    ELSE            reduce using rule 11 (statement -> else_statement .)
    WHILE           reduce using rule 11 (statement -> else_statement .)
    FOR             reduce using rule 11 (statement -> else_statement .)
    FUNCTION        reduce using rule 11 (statement -> else_statement .)
    DO              reduce using rule 11 (statement -> else_statement .)
    TRY             reduce using rule 11 (statement -> else_statement .)
    MODULE          reduce using rule 11 (statement -> else_statement .)
    BEGIN           reduce using rule 11 (statement -> else_statement .)
    USING           reduce using rule 11 (statement -> else_statement .)
    NUMBER          reduce using rule 11 (statement -> else_statement .)
    MINUS           reduce using rule 11 (statement -> else_statement .)
    LEFT_PAREN      reduce using rule 11 (statement -> else_statement .)
    LEFT_BRACKET    reduce using rule 11 (statement -> else_statement .)
    INTEGER         reduce using rule 11 (statement -> else_statement .)
    $end            reduce using rule 11 (statement -> else_statement .)
    END             reduce using rule 11 (statement -> else_statement .)
    CATCH           reduce using rule 11 (statement -> else_statement .)
    RETURN          reduce using rule 11 (statement -> else_statement .)


state 11

    (12) statement -> while_statement .

    IDENTIFIER      reduce using rule 12 (statement -> while_statement .)
    FUNCTIONS_JULIA reduce using rule 12 (statement -> while_statement .)
    IF              reduce using rule 12 (statement -> while_statement .)
    ELSEIF          reduce using rule 12 (statement -> while_statement .)
    ELSE            reduce using rule 12 (statement -> while_statement .)
    WHILE           reduce using rule 12 (statement -> while_statement .)
    FOR             reduce using rule 12 (statement -> while_statement .)
    FUNCTION        reduce using rule 12 (statement -> while_statement .)
    DO              reduce using rule 12 (statement -> while_statement .)
    TRY             reduce using rule 12 (statement -> while_statement .)
    MODULE          reduce using rule 12 (statement -> while_statement .)
    BEGIN           reduce using rule 12 (statement -> while_statement .)
    USING           reduce using rule 12 (statement -> while_statement .)
    NUMBER          reduce using rule 12 (statement -> while_statement .)
    MINUS           reduce using rule 12 (statement -> while_statement .)
    LEFT_PAREN      reduce using rule 12 (statement -> while_statement .)
    LEFT_BRACKET    reduce using rule 12 (statement -> while_statement .)
    INTEGER         reduce using rule 12 (statement -> while_statement .)
    $end            reduce using rule 12 (statement -> while_statement .)
    END             reduce using rule 12 (statement -> while_statement .)
    CATCH           reduce using rule 12 (statement -> while_statement .)
    RETURN          reduce using rule 12 (statement -> while_statement .)


state 12

    (13) statement -> for_statement .

    IDENTIFIER      reduce using rule 13 (statement -> for_statement .)
    FUNCTIONS_JULIA reduce using rule 13 (statement -> for_statement .)
    IF              reduce using rule 13 (statement -> for_statement .)
    ELSEIF          reduce using rule 13 (statement -> for_statement .)
    ELSE            reduce using rule 13 (statement -> for_statement .)
    WHILE           reduce using rule 13 (statement -> for_statement .)
    FOR             reduce using rule 13 (statement -> for_statement .)
    FUNCTION        reduce using rule 13 (statement -> for_statement .)
    DO              reduce using rule 13 (statement -> for_statement .)
    TRY             reduce using rule 13 (statement -> for_statement .)
    MODULE          reduce using rule 13 (statement -> for_statement .)
    BEGIN           reduce using rule 13 (statement -> for_statement .)
    USING           reduce using rule 13 (statement -> for_statement .)
    NUMBER          reduce using rule 13 (statement -> for_statement .)
    MINUS           reduce using rule 13 (statement -> for_statement .)
    LEFT_PAREN      reduce using rule 13 (statement -> for_statement .)
    LEFT_BRACKET    reduce using rule 13 (statement -> for_statement .)
    INTEGER         reduce using rule 13 (statement -> for_statement .)
    $end            reduce using rule 13 (statement -> for_statement .)
    END             reduce using rule 13 (statement -> for_statement .)
    CATCH           reduce using rule 13 (statement -> for_statement .)
    RETURN          reduce using rule 13 (statement -> for_statement .)


state 13

    (14) statement -> array_estatement .

    IDENTIFIER      reduce using rule 14 (statement -> array_estatement .)
    FUNCTIONS_JULIA reduce using rule 14 (statement -> array_estatement .)
    IF              reduce using rule 14 (statement -> array_estatement .)
    ELSEIF          reduce using rule 14 (statement -> array_estatement .)
    ELSE            reduce using rule 14 (statement -> array_estatement .)
    WHILE           reduce using rule 14 (statement -> array_estatement .)
    FOR             reduce using rule 14 (statement -> array_estatement .)
    FUNCTION        reduce using rule 14 (statement -> array_estatement .)
    DO              reduce using rule 14 (statement -> array_estatement .)
    TRY             reduce using rule 14 (statement -> array_estatement .)
    MODULE          reduce using rule 14 (statement -> array_estatement .)
    BEGIN           reduce using rule 14 (statement -> array_estatement .)
    USING           reduce using rule 14 (statement -> array_estatement .)
    NUMBER          reduce using rule 14 (statement -> array_estatement .)
    MINUS           reduce using rule 14 (statement -> array_estatement .)
    LEFT_PAREN      reduce using rule 14 (statement -> array_estatement .)
    LEFT_BRACKET    reduce using rule 14 (statement -> array_estatement .)
    INTEGER         reduce using rule 14 (statement -> array_estatement .)
    $end            reduce using rule 14 (statement -> array_estatement .)
    END             reduce using rule 14 (statement -> array_estatement .)
    CATCH           reduce using rule 14 (statement -> array_estatement .)
    RETURN          reduce using rule 14 (statement -> array_estatement .)


state 14

    (15) statement -> function_definition .

    IDENTIFIER      reduce using rule 15 (statement -> function_definition .)
    FUNCTIONS_JULIA reduce using rule 15 (statement -> function_definition .)
    IF              reduce using rule 15 (statement -> function_definition .)
    ELSEIF          reduce using rule 15 (statement -> function_definition .)
    ELSE            reduce using rule 15 (statement -> function_definition .)
    WHILE           reduce using rule 15 (statement -> function_definition .)
    FOR             reduce using rule 15 (statement -> function_definition .)
    FUNCTION        reduce using rule 15 (statement -> function_definition .)
    DO              reduce using rule 15 (statement -> function_definition .)
    TRY             reduce using rule 15 (statement -> function_definition .)
    MODULE          reduce using rule 15 (statement -> function_definition .)
    BEGIN           reduce using rule 15 (statement -> function_definition .)
    USING           reduce using rule 15 (statement -> function_definition .)
    NUMBER          reduce using rule 15 (statement -> function_definition .)
    MINUS           reduce using rule 15 (statement -> function_definition .)
    LEFT_PAREN      reduce using rule 15 (statement -> function_definition .)
    LEFT_BRACKET    reduce using rule 15 (statement -> function_definition .)
    INTEGER         reduce using rule 15 (statement -> function_definition .)
    $end            reduce using rule 15 (statement -> function_definition .)
    END             reduce using rule 15 (statement -> function_definition .)
    CATCH           reduce using rule 15 (statement -> function_definition .)
    RETURN          reduce using rule 15 (statement -> function_definition .)


state 15

    (16) statement -> statement_function .

    IDENTIFIER      reduce using rule 16 (statement -> statement_function .)
    FUNCTIONS_JULIA reduce using rule 16 (statement -> statement_function .)
    IF              reduce using rule 16 (statement -> statement_function .)
    ELSEIF          reduce using rule 16 (statement -> statement_function .)
    ELSE            reduce using rule 16 (statement -> statement_function .)
    WHILE           reduce using rule 16 (statement -> statement_function .)
    FOR             reduce using rule 16 (statement -> statement_function .)
    FUNCTION        reduce using rule 16 (statement -> statement_function .)
    DO              reduce using rule 16 (statement -> statement_function .)
    TRY             reduce using rule 16 (statement -> statement_function .)
    MODULE          reduce using rule 16 (statement -> statement_function .)
    BEGIN           reduce using rule 16 (statement -> statement_function .)
    USING           reduce using rule 16 (statement -> statement_function .)
    NUMBER          reduce using rule 16 (statement -> statement_function .)
    MINUS           reduce using rule 16 (statement -> statement_function .)
    LEFT_PAREN      reduce using rule 16 (statement -> statement_function .)
    LEFT_BRACKET    reduce using rule 16 (statement -> statement_function .)
    INTEGER         reduce using rule 16 (statement -> statement_function .)
    $end            reduce using rule 16 (statement -> statement_function .)
    END             reduce using rule 16 (statement -> statement_function .)
    CATCH           reduce using rule 16 (statement -> statement_function .)
    RETURN          reduce using rule 16 (statement -> statement_function .)


state 16

    (17) statement -> statement_call_function .

    IDENTIFIER      reduce using rule 17 (statement -> statement_call_function .)
    FUNCTIONS_JULIA reduce using rule 17 (statement -> statement_call_function .)
    IF              reduce using rule 17 (statement -> statement_call_function .)
    ELSEIF          reduce using rule 17 (statement -> statement_call_function .)
    ELSE            reduce using rule 17 (statement -> statement_call_function .)
    WHILE           reduce using rule 17 (statement -> statement_call_function .)
    FOR             reduce using rule 17 (statement -> statement_call_function .)
    FUNCTION        reduce using rule 17 (statement -> statement_call_function .)
    DO              reduce using rule 17 (statement -> statement_call_function .)
    TRY             reduce using rule 17 (statement -> statement_call_function .)
    MODULE          reduce using rule 17 (statement -> statement_call_function .)
    BEGIN           reduce using rule 17 (statement -> statement_call_function .)
    USING           reduce using rule 17 (statement -> statement_call_function .)
    NUMBER          reduce using rule 17 (statement -> statement_call_function .)
    MINUS           reduce using rule 17 (statement -> statement_call_function .)
    LEFT_PAREN      reduce using rule 17 (statement -> statement_call_function .)
    LEFT_BRACKET    reduce using rule 17 (statement -> statement_call_function .)
    INTEGER         reduce using rule 17 (statement -> statement_call_function .)
    $end            reduce using rule 17 (statement -> statement_call_function .)
    END             reduce using rule 17 (statement -> statement_call_function .)
    CATCH           reduce using rule 17 (statement -> statement_call_function .)
    RETURN          reduce using rule 17 (statement -> statement_call_function .)


state 17

    (18) statement -> statement_function_julia .

    IDENTIFIER      reduce using rule 18 (statement -> statement_function_julia .)
    FUNCTIONS_JULIA reduce using rule 18 (statement -> statement_function_julia .)
    IF              reduce using rule 18 (statement -> statement_function_julia .)
    ELSEIF          reduce using rule 18 (statement -> statement_function_julia .)
    ELSE            reduce using rule 18 (statement -> statement_function_julia .)
    WHILE           reduce using rule 18 (statement -> statement_function_julia .)
    FOR             reduce using rule 18 (statement -> statement_function_julia .)
    FUNCTION        reduce using rule 18 (statement -> statement_function_julia .)
    DO              reduce using rule 18 (statement -> statement_function_julia .)
    TRY             reduce using rule 18 (statement -> statement_function_julia .)
    MODULE          reduce using rule 18 (statement -> statement_function_julia .)
    BEGIN           reduce using rule 18 (statement -> statement_function_julia .)
    USING           reduce using rule 18 (statement -> statement_function_julia .)
    NUMBER          reduce using rule 18 (statement -> statement_function_julia .)
    MINUS           reduce using rule 18 (statement -> statement_function_julia .)
    LEFT_PAREN      reduce using rule 18 (statement -> statement_function_julia .)
    LEFT_BRACKET    reduce using rule 18 (statement -> statement_function_julia .)
    INTEGER         reduce using rule 18 (statement -> statement_function_julia .)
    $end            reduce using rule 18 (statement -> statement_function_julia .)
    END             reduce using rule 18 (statement -> statement_function_julia .)
    CATCH           reduce using rule 18 (statement -> statement_function_julia .)
    RETURN          reduce using rule 18 (statement -> statement_function_julia .)


state 18

    (19) statement -> statement_do .

    IDENTIFIER      reduce using rule 19 (statement -> statement_do .)
    FUNCTIONS_JULIA reduce using rule 19 (statement -> statement_do .)
    IF              reduce using rule 19 (statement -> statement_do .)
    ELSEIF          reduce using rule 19 (statement -> statement_do .)
    ELSE            reduce using rule 19 (statement -> statement_do .)
    WHILE           reduce using rule 19 (statement -> statement_do .)
    FOR             reduce using rule 19 (statement -> statement_do .)
    FUNCTION        reduce using rule 19 (statement -> statement_do .)
    DO              reduce using rule 19 (statement -> statement_do .)
    TRY             reduce using rule 19 (statement -> statement_do .)
    MODULE          reduce using rule 19 (statement -> statement_do .)
    BEGIN           reduce using rule 19 (statement -> statement_do .)
    USING           reduce using rule 19 (statement -> statement_do .)
    NUMBER          reduce using rule 19 (statement -> statement_do .)
    MINUS           reduce using rule 19 (statement -> statement_do .)
    LEFT_PAREN      reduce using rule 19 (statement -> statement_do .)
    LEFT_BRACKET    reduce using rule 19 (statement -> statement_do .)
    INTEGER         reduce using rule 19 (statement -> statement_do .)
    $end            reduce using rule 19 (statement -> statement_do .)
    END             reduce using rule 19 (statement -> statement_do .)
    CATCH           reduce using rule 19 (statement -> statement_do .)
    RETURN          reduce using rule 19 (statement -> statement_do .)


state 19

    (20) statement -> statement_try .

    IDENTIFIER      reduce using rule 20 (statement -> statement_try .)
    FUNCTIONS_JULIA reduce using rule 20 (statement -> statement_try .)
    IF              reduce using rule 20 (statement -> statement_try .)
    ELSEIF          reduce using rule 20 (statement -> statement_try .)
    ELSE            reduce using rule 20 (statement -> statement_try .)
    WHILE           reduce using rule 20 (statement -> statement_try .)
    FOR             reduce using rule 20 (statement -> statement_try .)
    FUNCTION        reduce using rule 20 (statement -> statement_try .)
    DO              reduce using rule 20 (statement -> statement_try .)
    TRY             reduce using rule 20 (statement -> statement_try .)
    MODULE          reduce using rule 20 (statement -> statement_try .)
    BEGIN           reduce using rule 20 (statement -> statement_try .)
    USING           reduce using rule 20 (statement -> statement_try .)
    NUMBER          reduce using rule 20 (statement -> statement_try .)
    MINUS           reduce using rule 20 (statement -> statement_try .)
    LEFT_PAREN      reduce using rule 20 (statement -> statement_try .)
    LEFT_BRACKET    reduce using rule 20 (statement -> statement_try .)
    INTEGER         reduce using rule 20 (statement -> statement_try .)
    $end            reduce using rule 20 (statement -> statement_try .)
    END             reduce using rule 20 (statement -> statement_try .)
    CATCH           reduce using rule 20 (statement -> statement_try .)
    RETURN          reduce using rule 20 (statement -> statement_try .)


state 20

    (21) statement -> statement_module .

    IDENTIFIER      reduce using rule 21 (statement -> statement_module .)
    FUNCTIONS_JULIA reduce using rule 21 (statement -> statement_module .)
    IF              reduce using rule 21 (statement -> statement_module .)
    ELSEIF          reduce using rule 21 (statement -> statement_module .)
    ELSE            reduce using rule 21 (statement -> statement_module .)
    WHILE           reduce using rule 21 (statement -> statement_module .)
    FOR             reduce using rule 21 (statement -> statement_module .)
    FUNCTION        reduce using rule 21 (statement -> statement_module .)
    DO              reduce using rule 21 (statement -> statement_module .)
    TRY             reduce using rule 21 (statement -> statement_module .)
    MODULE          reduce using rule 21 (statement -> statement_module .)
    BEGIN           reduce using rule 21 (statement -> statement_module .)
    USING           reduce using rule 21 (statement -> statement_module .)
    NUMBER          reduce using rule 21 (statement -> statement_module .)
    MINUS           reduce using rule 21 (statement -> statement_module .)
    LEFT_PAREN      reduce using rule 21 (statement -> statement_module .)
    LEFT_BRACKET    reduce using rule 21 (statement -> statement_module .)
    INTEGER         reduce using rule 21 (statement -> statement_module .)
    $end            reduce using rule 21 (statement -> statement_module .)
    END             reduce using rule 21 (statement -> statement_module .)
    CATCH           reduce using rule 21 (statement -> statement_module .)
    RETURN          reduce using rule 21 (statement -> statement_module .)


state 21

    (22) statement -> statement_begin .

    IDENTIFIER      reduce using rule 22 (statement -> statement_begin .)
    FUNCTIONS_JULIA reduce using rule 22 (statement -> statement_begin .)
    IF              reduce using rule 22 (statement -> statement_begin .)
    ELSEIF          reduce using rule 22 (statement -> statement_begin .)
    ELSE            reduce using rule 22 (statement -> statement_begin .)
    WHILE           reduce using rule 22 (statement -> statement_begin .)
    FOR             reduce using rule 22 (statement -> statement_begin .)
    FUNCTION        reduce using rule 22 (statement -> statement_begin .)
    DO              reduce using rule 22 (statement -> statement_begin .)
    TRY             reduce using rule 22 (statement -> statement_begin .)
    MODULE          reduce using rule 22 (statement -> statement_begin .)
    BEGIN           reduce using rule 22 (statement -> statement_begin .)
    USING           reduce using rule 22 (statement -> statement_begin .)
    NUMBER          reduce using rule 22 (statement -> statement_begin .)
    MINUS           reduce using rule 22 (statement -> statement_begin .)
    LEFT_PAREN      reduce using rule 22 (statement -> statement_begin .)
    LEFT_BRACKET    reduce using rule 22 (statement -> statement_begin .)
    INTEGER         reduce using rule 22 (statement -> statement_begin .)
    $end            reduce using rule 22 (statement -> statement_begin .)
    END             reduce using rule 22 (statement -> statement_begin .)
    CATCH           reduce using rule 22 (statement -> statement_begin .)
    RETURN          reduce using rule 22 (statement -> statement_begin .)


state 22

    (23) statement -> statement_using .

    IDENTIFIER      reduce using rule 23 (statement -> statement_using .)
    FUNCTIONS_JULIA reduce using rule 23 (statement -> statement_using .)
    IF              reduce using rule 23 (statement -> statement_using .)
    ELSEIF          reduce using rule 23 (statement -> statement_using .)
    ELSE            reduce using rule 23 (statement -> statement_using .)
    WHILE           reduce using rule 23 (statement -> statement_using .)
    FOR             reduce using rule 23 (statement -> statement_using .)
    FUNCTION        reduce using rule 23 (statement -> statement_using .)
    DO              reduce using rule 23 (statement -> statement_using .)
    TRY             reduce using rule 23 (statement -> statement_using .)
    MODULE          reduce using rule 23 (statement -> statement_using .)
    BEGIN           reduce using rule 23 (statement -> statement_using .)
    USING           reduce using rule 23 (statement -> statement_using .)
    NUMBER          reduce using rule 23 (statement -> statement_using .)
    MINUS           reduce using rule 23 (statement -> statement_using .)
    LEFT_PAREN      reduce using rule 23 (statement -> statement_using .)
    LEFT_BRACKET    reduce using rule 23 (statement -> statement_using .)
    INTEGER         reduce using rule 23 (statement -> statement_using .)
    $end            reduce using rule 23 (statement -> statement_using .)
    END             reduce using rule 23 (statement -> statement_using .)
    CATCH           reduce using rule 23 (statement -> statement_using .)
    RETURN          reduce using rule 23 (statement -> statement_using .)


state 23


    ASSIGN          shift and go to state 53
    LEFT_PAREN      shift and go to state 52
    COMMA           reduce using rule 43 (identifierList -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 120 (expression_number -> IDENTIFIER .)
    DOUBLEDOT       reduce using rule 120 (expression_number -> IDENTIFIER .)
    DOT             reduce using rule 120 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 120 (expression_number -> IDENTIFIER .)
    MINUS           reduce using rule 120 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 120 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 120 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 120 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 120 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 120 (expression_number -> IDENTIFIER .)
    SUMASIGN        shift and go to state 54
    MINASIGN        shift and go to state 55
    MULTASIGN       shift and go to state 56
    DIVASIGN        shift and go to state 57
    MODULEASIGN     shift and go to state 58
    EXPONENTASIGN   shift and go to state 59
    IDENTIFIER      shift and go to state 49

  ! SUMASIGN        [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! MINASIGN        [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! MULTASIGN       [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! DIVASIGN        [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! MODULEASIGN     [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! EXPONENTASIGN   [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]
  ! ASSIGN          [ reduce using rule 43 (identifierList -> IDENTIFIER .) ]

    assignment_number              shift and go to state 50
    assignment                     shift and go to state 51

state 24

    FUNCTIONS_JULIA shift and go to state 60
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

    operator_arithmetic            shift and go to state 62

state 25


    LEFT_PAREN      shift and go to state 72
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 71

state 26

    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 83

state 27

    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 86

state 28

    (54) values -> INTEGER .

    MINUS           reduce using rule 54 (values -> INTEGER .)
    NEWLINE         reduce using rule 54 (values -> INTEGER .)
    IDENTIFIER      reduce using rule 54 (values -> INTEGER .)
    FUNCTIONS_JULIA reduce using rule 54 (values -> INTEGER .)
    IF              reduce using rule 54 (values -> INTEGER .)
    ELSEIF          reduce using rule 54 (values -> INTEGER .)
    ELSE            reduce using rule 54 (values -> INTEGER .)
    WHILE           reduce using rule 54 (values -> INTEGER .)
    FOR             reduce using rule 54 (values -> INTEGER .)
    FUNCTION        reduce using rule 54 (values -> INTEGER .)
    DO              reduce using rule 54 (values -> INTEGER .)
    TRY             reduce using rule 54 (values -> INTEGER .)
    MODULE          reduce using rule 54 (values -> INTEGER .)
    BEGIN           reduce using rule 54 (values -> INTEGER .)
    USING           reduce using rule 54 (values -> INTEGER .)
    NUMBER          reduce using rule 54 (values -> INTEGER .)
    LEFT_PAREN      reduce using rule 54 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 54 (values -> INTEGER .)
    INTEGER         reduce using rule 54 (values -> INTEGER .)
    $end            reduce using rule 54 (values -> INTEGER .)
    END             reduce using rule 54 (values -> INTEGER .)
    CATCH           reduce using rule 54 (values -> INTEGER .)
    RETURN          reduce using rule 54 (values -> INTEGER .)
    COMMA           reduce using rule 54 (values -> INTEGER .)


state 29


    COMMA           shift and go to state 89
    SUMASIGN        shift and go to state 54
    MINASIGN        shift and go to state 55
    MULTASIGN       shift and go to state 56
    DIVASIGN        shift and go to state 57
    MODULEASIGN     shift and go to state 58
    EXPONENTASIGN   shift and go to state 59
    IDENTIFIER      shift and go to state 49
    ASSIGN          shift and go to state 90

    assignment_number              shift and go to state 87
    assignment                     shift and go to state 88

state 30

    (51) array_estatement_julia -> values . MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia

    MINUS           shift and go to state 91


state 31

    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 92

state 32


    LEFT_PAREN      shift and go to state 94
    IDENTIFIER      shift and go to state 95
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    STRING          shift and go to state 100
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 93
    expression_string              shift and go to state 98
    expression_number              shift and go to state 99

state 33

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 101
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 34


    LEFT_PAREN      shift and go to state 94
    IDENTIFIER      shift and go to state 95
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    STRING          shift and go to state 100
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 102
    expression_string              shift and go to state 98
    expression_number              shift and go to state 99

state 35


    IDENTIFIER      shift and go to state 104
    LEFT_PAREN      shift and go to state 94
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    STRING          shift and go to state 100
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 103
    expression_string              shift and go to state 98
    expression_number              shift and go to state 99

state 36

    (121) expression_number -> NUMBER .
    (55) values -> NUMBER .

  ! reduce/reduce conflict for MINUS resolved using rule 55 (values -> NUMBER .)
    FUNCTIONS_JULIA reduce using rule 121 (expression_number -> NUMBER .)
    DOUBLEDOT       reduce using rule 121 (expression_number -> NUMBER .)
    DOT             reduce using rule 121 (expression_number -> NUMBER .)
    PLUS            reduce using rule 121 (expression_number -> NUMBER .)
    MULTIPLY        reduce using rule 121 (expression_number -> NUMBER .)
    DIVIDE          reduce using rule 121 (expression_number -> NUMBER .)
    PERCENT         reduce using rule 121 (expression_number -> NUMBER .)
    SQUAREROOT      reduce using rule 121 (expression_number -> NUMBER .)
    EXPONENT        reduce using rule 121 (expression_number -> NUMBER .)
    MINUS           reduce using rule 55 (values -> NUMBER .)

  ! MINUS           [ reduce using rule 121 (expression_number -> NUMBER .) ]


state 37

    IDENTIFIER      shift and go to state 105


state 38

    IDENTIFIER      shift and go to state 106


state 39

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 107
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 40

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    CATCH           reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 108
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 41

    (99) statement_module -> MODULE . IDENTIFIER statement_list END

    IDENTIFIER      shift and go to state 109


state 42


  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 110
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 43

    (100) statement_using -> USING . IDENTIFIER
    (101) statement_using -> USING . IDENTIFIER AS IDENTIFIER

    IDENTIFIER      shift and go to state 111


state 44

    (6) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 6 (statement_list -> statement_list statement .)
    FUNCTIONS_JULIA reduce using rule 6 (statement_list -> statement_list statement .)
    IF              reduce using rule 6 (statement_list -> statement_list statement .)
    ELSEIF          reduce using rule 6 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 6 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 6 (statement_list -> statement_list statement .)
    FOR             reduce using rule 6 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 6 (statement_list -> statement_list statement .)
    DO              reduce using rule 6 (statement_list -> statement_list statement .)
    TRY             reduce using rule 6 (statement_list -> statement_list statement .)
    MODULE          reduce using rule 6 (statement_list -> statement_list statement .)
    BEGIN           reduce using rule 6 (statement_list -> statement_list statement .)
    USING           reduce using rule 6 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 6 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 6 (statement_list -> statement_list statement .)
    LEFT_PAREN      reduce using rule 6 (statement_list -> statement_list statement .)
    LEFT_BRACKET    reduce using rule 6 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 6 (statement_list -> statement_list statement .)
    $end            reduce using rule 6 (statement_list -> statement_list statement .)
    END             reduce using rule 6 (statement_list -> statement_list statement .)
    CATCH           reduce using rule 6 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 6 (statement_list -> statement_list statement .)


state 45

    (76) else_statement -> empty .

    IDENTIFIER      reduce using rule 76 (else_statement -> empty .)
    FUNCTIONS_JULIA reduce using rule 76 (else_statement -> empty .)
    IF              reduce using rule 76 (else_statement -> empty .)
    ELSEIF          reduce using rule 76 (else_statement -> empty .)
    ELSE            reduce using rule 76 (else_statement -> empty .)
    WHILE           reduce using rule 76 (else_statement -> empty .)
    FOR             reduce using rule 76 (else_statement -> empty .)
    FUNCTION        reduce using rule 76 (else_statement -> empty .)
    DO              reduce using rule 76 (else_statement -> empty .)
    TRY             reduce using rule 76 (else_statement -> empty .)
    MODULE          reduce using rule 76 (else_statement -> empty .)
    BEGIN           reduce using rule 76 (else_statement -> empty .)
    USING           reduce using rule 76 (else_statement -> empty .)
    NUMBER          reduce using rule 76 (else_statement -> empty .)
    MINUS           reduce using rule 76 (else_statement -> empty .)
    LEFT_PAREN      reduce using rule 76 (else_statement -> empty .)
    LEFT_BRACKET    reduce using rule 76 (else_statement -> empty .)
    INTEGER         reduce using rule 76 (else_statement -> empty .)
    $end            reduce using rule 76 (else_statement -> empty .)
    END             reduce using rule 76 (else_statement -> empty .)
    CATCH           reduce using rule 76 (else_statement -> empty .)
    RETURN          reduce using rule 76 (else_statement -> empty .)


state 46


  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 5 (statement_list -> statement statement_list .)
  ! reduce/reduce conflict for END resolved using rule 5 (statement_list -> statement statement_list .)
  ! reduce/reduce conflict for CATCH resolved using rule 5 (statement_list -> statement statement_list .)
  ! reduce/reduce conflict for RETURN resolved using rule 5 (statement_list -> statement statement_list .)
    $end            reduce using rule 5 (statement_list -> statement statement_list .)
    END             reduce using rule 5 (statement_list -> statement statement_list .)
    CATCH           reduce using rule 5 (statement_list -> statement statement_list .)
    RETURN          reduce using rule 5 (statement_list -> statement statement_list .)
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! IDENTIFIER      [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! IF              [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! ELSEIF          [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! ELSE            [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! WHILE           [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! FOR             [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! FUNCTION        [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! DO              [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! TRY             [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! MODULE          [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! BEGIN           [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! USING           [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! NUMBER          [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! MINUS           [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! LEFT_PAREN      [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! LEFT_BRACKET    [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! INTEGER         [ reduce using rule 5 (statement_list -> statement statement_list .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]
  ! $end            [ reduce using rule 94 (empty -> .) ]
  ! END             [ reduce using rule 94 (empty -> .) ]
  ! CATCH           [ reduce using rule 94 (empty -> .) ]
  ! RETURN          [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 47

    (84) identifierDecl -> identifierDecl COMMA . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET

    IDENTIFIER      shift and go to state 112


state 48

    (85) identifierDecl -> identifierDecl NEWLINE . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET

    IDENTIFIER      shift and go to state 113


state 49

    (77) assignment -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 114


state 50


    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 115

state 51


    FUNCTIONS_JULIA shift and go to state 120
    LEFT_BRACKET    shift and go to state 122
    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    expression_number              shift and go to state 117
    expression_string              shift and go to state 118
    expression_boolean             shift and go to state 119

state 52


    DO              shift and go to state 39
    RIGHT_PAREN     reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    argument_list                  shift and go to state 123
    expression                     shift and go to state 124
    statement_do                   shift and go to state 125
    empty                          shift and go to state 126
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 53


    LEFT_BRACKET    shift and go to state 130
    LEFT_PAREN      shift and go to state 131
    FUNCTIONS_JULIA reduce using rule 113 (assignment -> ASSIGN .)
    IDENTIFIER      reduce using rule 113 (assignment -> ASSIGN .)
    NUMBER          reduce using rule 113 (assignment -> ASSIGN .)
    MINUS           reduce using rule 113 (assignment -> ASSIGN .)
    STRING          reduce using rule 113 (assignment -> ASSIGN .)
    BOOLEAN         reduce using rule 113 (assignment -> ASSIGN .)
    ADMIRATION      reduce using rule 113 (assignment -> ASSIGN .)

  ! LEFT_BRACKET    [ reduce using rule 113 (assignment -> ASSIGN .) ]
  ! LEFT_PAREN      [ reduce using rule 113 (assignment -> ASSIGN .) ]


state 54

    (114) assignment_number -> SUMASIGN .

    IDENTIFIER      reduce using rule 114 (assignment_number -> SUMASIGN .)
    NUMBER          reduce using rule 114 (assignment_number -> SUMASIGN .)
    MINUS           reduce using rule 114 (assignment_number -> SUMASIGN .)
    LEFT_PAREN      reduce using rule 114 (assignment_number -> SUMASIGN .)
    LEFT_BRACKET    reduce using rule 114 (assignment_number -> SUMASIGN .)
    STRING          reduce using rule 114 (assignment_number -> SUMASIGN .)


state 55

    (115) assignment_number -> MINASIGN .

    IDENTIFIER      reduce using rule 115 (assignment_number -> MINASIGN .)
    NUMBER          reduce using rule 115 (assignment_number -> MINASIGN .)
    MINUS           reduce using rule 115 (assignment_number -> MINASIGN .)
    LEFT_PAREN      reduce using rule 115 (assignment_number -> MINASIGN .)
    LEFT_BRACKET    reduce using rule 115 (assignment_number -> MINASIGN .)
    STRING          reduce using rule 115 (assignment_number -> MINASIGN .)


state 56

    (116) assignment_number -> MULTASIGN .

    IDENTIFIER      reduce using rule 116 (assignment_number -> MULTASIGN .)
    NUMBER          reduce using rule 116 (assignment_number -> MULTASIGN .)
    MINUS           reduce using rule 116 (assignment_number -> MULTASIGN .)
    LEFT_PAREN      reduce using rule 116 (assignment_number -> MULTASIGN .)
    LEFT_BRACKET    reduce using rule 116 (assignment_number -> MULTASIGN .)
    STRING          reduce using rule 116 (assignment_number -> MULTASIGN .)


state 57

    (117) assignment_number -> DIVASIGN .

    IDENTIFIER      reduce using rule 117 (assignment_number -> DIVASIGN .)
    NUMBER          reduce using rule 117 (assignment_number -> DIVASIGN .)
    MINUS           reduce using rule 117 (assignment_number -> DIVASIGN .)
    LEFT_PAREN      reduce using rule 117 (assignment_number -> DIVASIGN .)
    LEFT_BRACKET    reduce using rule 117 (assignment_number -> DIVASIGN .)
    STRING          reduce using rule 117 (assignment_number -> DIVASIGN .)


state 58

    (118) assignment_number -> MODULEASIGN .

    IDENTIFIER      reduce using rule 118 (assignment_number -> MODULEASIGN .)
    NUMBER          reduce using rule 118 (assignment_number -> MODULEASIGN .)
    MINUS           reduce using rule 118 (assignment_number -> MODULEASIGN .)
    LEFT_PAREN      reduce using rule 118 (assignment_number -> MODULEASIGN .)
    LEFT_BRACKET    reduce using rule 118 (assignment_number -> MODULEASIGN .)
    STRING          reduce using rule 118 (assignment_number -> MODULEASIGN .)


state 59

    (119) assignment_number -> EXPONENTASIGN .

    IDENTIFIER      reduce using rule 119 (assignment_number -> EXPONENTASIGN .)
    NUMBER          reduce using rule 119 (assignment_number -> EXPONENTASIGN .)
    MINUS           reduce using rule 119 (assignment_number -> EXPONENTASIGN .)
    LEFT_PAREN      reduce using rule 119 (assignment_number -> EXPONENTASIGN .)
    LEFT_BRACKET    reduce using rule 119 (assignment_number -> EXPONENTASIGN .)
    STRING          reduce using rule 119 (assignment_number -> EXPONENTASIGN .)


state 60

    (50) array_estatement_julia -> expression_number FUNCTIONS_JULIA . LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia

    LEFT_BRACE      shift and go to state 132


state 61


    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 133

state 62


    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 134

state 63

    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 135

state 64

    (133) operator_arithmetic -> PLUS .

    IDENTIFIER      reduce using rule 133 (operator_arithmetic -> PLUS .)
    NUMBER          reduce using rule 133 (operator_arithmetic -> PLUS .)
    MINUS           reduce using rule 133 (operator_arithmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 133 (operator_arithmetic -> PLUS .)
    LEFT_BRACKET    reduce using rule 133 (operator_arithmetic -> PLUS .)


state 65

    (134) operator_arithmetic -> MINUS .

    IDENTIFIER      reduce using rule 134 (operator_arithmetic -> MINUS .)
    NUMBER          reduce using rule 134 (operator_arithmetic -> MINUS .)
    MINUS           reduce using rule 134 (operator_arithmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 134 (operator_arithmetic -> MINUS .)
    LEFT_BRACKET    reduce using rule 134 (operator_arithmetic -> MINUS .)


state 66

    (135) operator_arithmetic -> MULTIPLY .

    IDENTIFIER      reduce using rule 135 (operator_arithmetic -> MULTIPLY .)
    NUMBER          reduce using rule 135 (operator_arithmetic -> MULTIPLY .)
    MINUS           reduce using rule 135 (operator_arithmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 135 (operator_arithmetic -> MULTIPLY .)
    LEFT_BRACKET    reduce using rule 135 (operator_arithmetic -> MULTIPLY .)


state 67

    (136) operator_arithmetic -> DIVIDE .

    IDENTIFIER      reduce using rule 136 (operator_arithmetic -> DIVIDE .)
    NUMBER          reduce using rule 136 (operator_arithmetic -> DIVIDE .)
    MINUS           reduce using rule 136 (operator_arithmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 136 (operator_arithmetic -> DIVIDE .)
    LEFT_BRACKET    reduce using rule 136 (operator_arithmetic -> DIVIDE .)


state 68

    (137) operator_arithmetic -> PERCENT .

    IDENTIFIER      reduce using rule 137 (operator_arithmetic -> PERCENT .)
    NUMBER          reduce using rule 137 (operator_arithmetic -> PERCENT .)
    MINUS           reduce using rule 137 (operator_arithmetic -> PERCENT .)
    LEFT_PAREN      reduce using rule 137 (operator_arithmetic -> PERCENT .)
    LEFT_BRACKET    reduce using rule 137 (operator_arithmetic -> PERCENT .)


state 69

    (138) operator_arithmetic -> SQUAREROOT .

    IDENTIFIER      reduce using rule 138 (operator_arithmetic -> SQUAREROOT .)
    NUMBER          reduce using rule 138 (operator_arithmetic -> SQUAREROOT .)
    MINUS           reduce using rule 138 (operator_arithmetic -> SQUAREROOT .)
    LEFT_PAREN      reduce using rule 138 (operator_arithmetic -> SQUAREROOT .)
    LEFT_BRACKET    reduce using rule 138 (operator_arithmetic -> SQUAREROOT .)


state 70

    (139) operator_arithmetic -> EXPONENT .

    IDENTIFIER      reduce using rule 139 (operator_arithmetic -> EXPONENT .)
    NUMBER          reduce using rule 139 (operator_arithmetic -> EXPONENT .)
    MINUS           reduce using rule 139 (operator_arithmetic -> EXPONENT .)
    LEFT_PAREN      reduce using rule 139 (operator_arithmetic -> EXPONENT .)
    LEFT_BRACKET    reduce using rule 139 (operator_arithmetic -> EXPONENT .)


state 71

    IDENTIFIER      shift and go to state 137
    FUNCTIONS_JULIA shift and go to state 136


state 72


    INTEGER         shift and go to state 139
    IDENTIFIER      shift and go to state 140
    DO              shift and go to state 39
    RIGHT_PAREN     reduce using rule 94 (empty -> .)
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    argument_list                  shift and go to state 138
    expression                     shift and go to state 124
    statement_do                   shift and go to state 125
    empty                          shift and go to state 126
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 73

    (140) relation -> LESS_THAN .

    IDENTIFIER      reduce using rule 140 (relation -> LESS_THAN .)
    FUNCTIONS_JULIA reduce using rule 140 (relation -> LESS_THAN .)
    LEFT_PAREN      reduce using rule 140 (relation -> LESS_THAN .)
    BOOLEAN         reduce using rule 140 (relation -> LESS_THAN .)
    ADMIRATION      reduce using rule 140 (relation -> LESS_THAN .)
    STRING          reduce using rule 140 (relation -> LESS_THAN .)
    NUMBER          reduce using rule 140 (relation -> LESS_THAN .)
    MINUS           reduce using rule 140 (relation -> LESS_THAN .)
    LEFT_BRACKET    reduce using rule 140 (relation -> LESS_THAN .)


state 74

    (141) relation -> LESS_THAN_OR_EQUAL .

    IDENTIFIER      reduce using rule 141 (relation -> LESS_THAN_OR_EQUAL .)
    FUNCTIONS_JULIA reduce using rule 141 (relation -> LESS_THAN_OR_EQUAL .)
    LEFT_PAREN      reduce using rule 141 (relation -> LESS_THAN_OR_EQUAL .)
    BOOLEAN         reduce using rule 141 (relation -> LESS_THAN_OR_EQUAL .)
    ADMIRATION      reduce using rule 141 (relation -> LESS_THAN_OR_EQUAL .)
    STRING          reduce using rule 141 (relation -> LESS_THAN_OR_EQUAL .)
    NUMBER          reduce using rule 141 (relation -> LESS_THAN_OR_EQUAL .)
    MINUS           reduce using rule 141 (relation -> LESS_THAN_OR_EQUAL .)
    LEFT_BRACKET    reduce using rule 141 (relation -> LESS_THAN_OR_EQUAL .)


state 75

    (142) relation -> GREATER_THAN .

    IDENTIFIER      reduce using rule 142 (relation -> GREATER_THAN .)
    FUNCTIONS_JULIA reduce using rule 142 (relation -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 142 (relation -> GREATER_THAN .)
    BOOLEAN         reduce using rule 142 (relation -> GREATER_THAN .)
    ADMIRATION      reduce using rule 142 (relation -> GREATER_THAN .)
    STRING          reduce using rule 142 (relation -> GREATER_THAN .)
    NUMBER          reduce using rule 142 (relation -> GREATER_THAN .)
    MINUS           reduce using rule 142 (relation -> GREATER_THAN .)
    LEFT_BRACKET    reduce using rule 142 (relation -> GREATER_THAN .)


state 76

    (143) relation -> GREATER_THAN_OR_EQUAL .

    IDENTIFIER      reduce using rule 143 (relation -> GREATER_THAN_OR_EQUAL .)
    FUNCTIONS_JULIA reduce using rule 143 (relation -> GREATER_THAN_OR_EQUAL .)
    LEFT_PAREN      reduce using rule 143 (relation -> GREATER_THAN_OR_EQUAL .)
    BOOLEAN         reduce using rule 143 (relation -> GREATER_THAN_OR_EQUAL .)
    ADMIRATION      reduce using rule 143 (relation -> GREATER_THAN_OR_EQUAL .)
    STRING          reduce using rule 143 (relation -> GREATER_THAN_OR_EQUAL .)
    NUMBER          reduce using rule 143 (relation -> GREATER_THAN_OR_EQUAL .)
    MINUS           reduce using rule 143 (relation -> GREATER_THAN_OR_EQUAL .)
    LEFT_BRACKET    reduce using rule 143 (relation -> GREATER_THAN_OR_EQUAL .)


state 77

    (144) relation -> EQUALS .

    IDENTIFIER      reduce using rule 144 (relation -> EQUALS .)
    FUNCTIONS_JULIA reduce using rule 144 (relation -> EQUALS .)
    LEFT_PAREN      reduce using rule 144 (relation -> EQUALS .)
    BOOLEAN         reduce using rule 144 (relation -> EQUALS .)
    ADMIRATION      reduce using rule 144 (relation -> EQUALS .)
    STRING          reduce using rule 144 (relation -> EQUALS .)
    NUMBER          reduce using rule 144 (relation -> EQUALS .)
    MINUS           reduce using rule 144 (relation -> EQUALS .)
    LEFT_BRACKET    reduce using rule 144 (relation -> EQUALS .)


state 78

    (145) relation -> NOT_EQUALS .

    IDENTIFIER      reduce using rule 145 (relation -> NOT_EQUALS .)
    FUNCTIONS_JULIA reduce using rule 145 (relation -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 145 (relation -> NOT_EQUALS .)
    BOOLEAN         reduce using rule 145 (relation -> NOT_EQUALS .)
    ADMIRATION      reduce using rule 145 (relation -> NOT_EQUALS .)
    STRING          reduce using rule 145 (relation -> NOT_EQUALS .)
    NUMBER          reduce using rule 145 (relation -> NOT_EQUALS .)
    MINUS           reduce using rule 145 (relation -> NOT_EQUALS .)
    LEFT_BRACKET    reduce using rule 145 (relation -> NOT_EQUALS .)


state 79

    (146) relation -> AND .

    IDENTIFIER      reduce using rule 146 (relation -> AND .)
    FUNCTIONS_JULIA reduce using rule 146 (relation -> AND .)
    LEFT_PAREN      reduce using rule 146 (relation -> AND .)
    BOOLEAN         reduce using rule 146 (relation -> AND .)
    ADMIRATION      reduce using rule 146 (relation -> AND .)
    STRING          reduce using rule 146 (relation -> AND .)
    NUMBER          reduce using rule 146 (relation -> AND .)
    MINUS           reduce using rule 146 (relation -> AND .)
    LEFT_BRACKET    reduce using rule 146 (relation -> AND .)


state 80

    (147) relation -> ANDSYM .

    IDENTIFIER      reduce using rule 147 (relation -> ANDSYM .)
    FUNCTIONS_JULIA reduce using rule 147 (relation -> ANDSYM .)
    LEFT_PAREN      reduce using rule 147 (relation -> ANDSYM .)
    BOOLEAN         reduce using rule 147 (relation -> ANDSYM .)
    ADMIRATION      reduce using rule 147 (relation -> ANDSYM .)
    STRING          reduce using rule 147 (relation -> ANDSYM .)
    NUMBER          reduce using rule 147 (relation -> ANDSYM .)
    MINUS           reduce using rule 147 (relation -> ANDSYM .)
    LEFT_BRACKET    reduce using rule 147 (relation -> ANDSYM .)


state 81

    (148) relation -> OR .

    IDENTIFIER      reduce using rule 148 (relation -> OR .)
    FUNCTIONS_JULIA reduce using rule 148 (relation -> OR .)
    LEFT_PAREN      reduce using rule 148 (relation -> OR .)
    BOOLEAN         reduce using rule 148 (relation -> OR .)
    ADMIRATION      reduce using rule 148 (relation -> OR .)
    STRING          reduce using rule 148 (relation -> OR .)
    NUMBER          reduce using rule 148 (relation -> OR .)
    MINUS           reduce using rule 148 (relation -> OR .)
    LEFT_BRACKET    reduce using rule 148 (relation -> OR .)


state 82

    (149) relation -> ORSYM .

    IDENTIFIER      reduce using rule 149 (relation -> ORSYM .)
    FUNCTIONS_JULIA reduce using rule 149 (relation -> ORSYM .)
    LEFT_PAREN      reduce using rule 149 (relation -> ORSYM .)
    BOOLEAN         reduce using rule 149 (relation -> ORSYM .)
    ADMIRATION      reduce using rule 149 (relation -> ORSYM .)
    STRING          reduce using rule 149 (relation -> ORSYM .)
    NUMBER          reduce using rule 149 (relation -> ORSYM .)
    MINUS           reduce using rule 149 (relation -> ORSYM .)
    LEFT_BRACKET    reduce using rule 149 (relation -> ORSYM .)


state 83


    RIGHT_PAREN     shift and go to state 141
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

    operator_arithmetic            shift and go to state 62

state 84

    (120) expression_number -> IDENTIFIER .
    (126) expression_number -> IDENTIFIER . LEFT_PAREN argument_list RIGHT_PAREN

    RIGHT_PAREN     reduce using rule 120 (expression_number -> IDENTIFIER .)
    DOUBLEDOT       reduce using rule 120 (expression_number -> IDENTIFIER .)
    DOT             reduce using rule 120 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 120 (expression_number -> IDENTIFIER .)
    MINUS           reduce using rule 120 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 120 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 120 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 120 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 120 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 120 (expression_number -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 120 (expression_number -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 120 (expression_number -> IDENTIFIER .)
    LESS_THAN       reduce using rule 120 (expression_number -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL reduce using rule 120 (expression_number -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 120 (expression_number -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL reduce using rule 120 (expression_number -> IDENTIFIER .)
    EQUALS          reduce using rule 120 (expression_number -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 120 (expression_number -> IDENTIFIER .)
    AND             reduce using rule 120 (expression_number -> IDENTIFIER .)
    ANDSYM          reduce using rule 120 (expression_number -> IDENTIFIER .)
    OR              reduce using rule 120 (expression_number -> IDENTIFIER .)
    ORSYM           reduce using rule 120 (expression_number -> IDENTIFIER .)
    COMMA           reduce using rule 120 (expression_number -> IDENTIFIER .)
    NEWLINE         reduce using rule 120 (expression_number -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 120 (expression_number -> IDENTIFIER .)
    IF              reduce using rule 120 (expression_number -> IDENTIFIER .)
    ELSEIF          reduce using rule 120 (expression_number -> IDENTIFIER .)
    ELSE            reduce using rule 120 (expression_number -> IDENTIFIER .)
    WHILE           reduce using rule 120 (expression_number -> IDENTIFIER .)
    FOR             reduce using rule 120 (expression_number -> IDENTIFIER .)
    FUNCTION        reduce using rule 120 (expression_number -> IDENTIFIER .)
    DO              reduce using rule 120 (expression_number -> IDENTIFIER .)
    TRY             reduce using rule 120 (expression_number -> IDENTIFIER .)
    MODULE          reduce using rule 120 (expression_number -> IDENTIFIER .)
    BEGIN           reduce using rule 120 (expression_number -> IDENTIFIER .)
    USING           reduce using rule 120 (expression_number -> IDENTIFIER .)
    NUMBER          reduce using rule 120 (expression_number -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 120 (expression_number -> IDENTIFIER .)
    INTEGER         reduce using rule 120 (expression_number -> IDENTIFIER .)
    $end            reduce using rule 120 (expression_number -> IDENTIFIER .)
    END             reduce using rule 120 (expression_number -> IDENTIFIER .)
    CATCH           reduce using rule 120 (expression_number -> IDENTIFIER .)
    RETURN          reduce using rule 120 (expression_number -> IDENTIFIER .)
    STRING          reduce using rule 120 (expression_number -> IDENTIFIER .)
    BOOLEAN         reduce using rule 120 (expression_number -> IDENTIFIER .)
    ADMIRATION      reduce using rule 120 (expression_number -> IDENTIFIER .)
    SEMICOLON       reduce using rule 120 (expression_number -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 142

  ! LEFT_PAREN      [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]


state 85

    (121) expression_number -> NUMBER .

    RIGHT_PAREN     reduce using rule 121 (expression_number -> NUMBER .)
    DOUBLEDOT       reduce using rule 121 (expression_number -> NUMBER .)
    DOT             reduce using rule 121 (expression_number -> NUMBER .)
    PLUS            reduce using rule 121 (expression_number -> NUMBER .)
    MINUS           reduce using rule 121 (expression_number -> NUMBER .)
    MULTIPLY        reduce using rule 121 (expression_number -> NUMBER .)
    DIVIDE          reduce using rule 121 (expression_number -> NUMBER .)
    PERCENT         reduce using rule 121 (expression_number -> NUMBER .)
    SQUAREROOT      reduce using rule 121 (expression_number -> NUMBER .)
    EXPONENT        reduce using rule 121 (expression_number -> NUMBER .)
    RIGHT_BRACKET   reduce using rule 121 (expression_number -> NUMBER .)
    FUNCTIONS_JULIA reduce using rule 121 (expression_number -> NUMBER .)
    LESS_THAN       reduce using rule 121 (expression_number -> NUMBER .)
    LESS_THAN_OR_EQUAL reduce using rule 121 (expression_number -> NUMBER .)
    GREATER_THAN    reduce using rule 121 (expression_number -> NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 121 (expression_number -> NUMBER .)
    EQUALS          reduce using rule 121 (expression_number -> NUMBER .)
    NOT_EQUALS      reduce using rule 121 (expression_number -> NUMBER .)
    AND             reduce using rule 121 (expression_number -> NUMBER .)
    ANDSYM          reduce using rule 121 (expression_number -> NUMBER .)
    OR              reduce using rule 121 (expression_number -> NUMBER .)
    ORSYM           reduce using rule 121 (expression_number -> NUMBER .)
    COMMA           reduce using rule 121 (expression_number -> NUMBER .)
    NEWLINE         reduce using rule 121 (expression_number -> NUMBER .)
    IDENTIFIER      reduce using rule 121 (expression_number -> NUMBER .)
    IF              reduce using rule 121 (expression_number -> NUMBER .)
    ELSEIF          reduce using rule 121 (expression_number -> NUMBER .)
    ELSE            reduce using rule 121 (expression_number -> NUMBER .)
    WHILE           reduce using rule 121 (expression_number -> NUMBER .)
    FOR             reduce using rule 121 (expression_number -> NUMBER .)
    FUNCTION        reduce using rule 121 (expression_number -> NUMBER .)
    DO              reduce using rule 121 (expression_number -> NUMBER .)
    TRY             reduce using rule 121 (expression_number -> NUMBER .)
    MODULE          reduce using rule 121 (expression_number -> NUMBER .)
    BEGIN           reduce using rule 121 (expression_number -> NUMBER .)
    USING           reduce using rule 121 (expression_number -> NUMBER .)
    NUMBER          reduce using rule 121 (expression_number -> NUMBER .)
    LEFT_PAREN      reduce using rule 121 (expression_number -> NUMBER .)
    LEFT_BRACKET    reduce using rule 121 (expression_number -> NUMBER .)
    INTEGER         reduce using rule 121 (expression_number -> NUMBER .)
    $end            reduce using rule 121 (expression_number -> NUMBER .)
    END             reduce using rule 121 (expression_number -> NUMBER .)
    CATCH           reduce using rule 121 (expression_number -> NUMBER .)
    RETURN          reduce using rule 121 (expression_number -> NUMBER .)
    STRING          reduce using rule 121 (expression_number -> NUMBER .)
    BOOLEAN         reduce using rule 121 (expression_number -> NUMBER .)
    ADMIRATION      reduce using rule 121 (expression_number -> NUMBER .)
    SEMICOLON       reduce using rule 121 (expression_number -> NUMBER .)


state 86

    RIGHT_BRACKET   shift and go to state 143
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

    operator_arithmetic            shift and go to state 62

state 87

    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 148
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100

    expression_number_list         shift and go to state 144
    expression_string_list         shift and go to state 145
    expression_number              shift and go to state 146
    expression_string              shift and go to state 147

state 88


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 153
    LEFT_BRACKET    shift and go to state 27
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    STRING          shift and go to state 100

    expression_number_list         shift and go to state 149
    expression_boolean_list        shift and go to state 150
    expression_number              shift and go to state 151
    expression_boolean             shift and go to state 152
    expression_string              shift and go to state 98

state 89

    (44) identifierList -> identifierList COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 154


state 90

    (113) assignment -> ASSIGN .

    IDENTIFIER      reduce using rule 113 (assignment -> ASSIGN .)
    NUMBER          reduce using rule 113 (assignment -> ASSIGN .)
    MINUS           reduce using rule 113 (assignment -> ASSIGN .)
    LEFT_PAREN      reduce using rule 113 (assignment -> ASSIGN .)
    LEFT_BRACKET    reduce using rule 113 (assignment -> ASSIGN .)
    BOOLEAN         reduce using rule 113 (assignment -> ASSIGN .)
    ADMIRATION      reduce using rule 113 (assignment -> ASSIGN .)
    STRING          reduce using rule 113 (assignment -> ASSIGN .)


state 91

    FUNCTIONS_JULIA shift and go to state 155


state 92

    FUNCTIONS_JULIA reduce using rule 125 (expression_number -> MINUS expression_number .)
    DOUBLEDOT       reduce using rule 125 (expression_number -> MINUS expression_number .)
    DOT             reduce using rule 125 (expression_number -> MINUS expression_number .)
    PLUS            reduce using rule 125 (expression_number -> MINUS expression_number .)
    MINUS           reduce using rule 125 (expression_number -> MINUS expression_number .)
    RIGHT_PAREN     reduce using rule 125 (expression_number -> MINUS expression_number .)
    RIGHT_BRACKET   reduce using rule 125 (expression_number -> MINUS expression_number .)
    LESS_THAN       reduce using rule 125 (expression_number -> MINUS expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 125 (expression_number -> MINUS expression_number .)
    GREATER_THAN    reduce using rule 125 (expression_number -> MINUS expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 125 (expression_number -> MINUS expression_number .)
    EQUALS          reduce using rule 125 (expression_number -> MINUS expression_number .)
    NOT_EQUALS      reduce using rule 125 (expression_number -> MINUS expression_number .)
    AND             reduce using rule 125 (expression_number -> MINUS expression_number .)
    ANDSYM          reduce using rule 125 (expression_number -> MINUS expression_number .)
    OR              reduce using rule 125 (expression_number -> MINUS expression_number .)
    ORSYM           reduce using rule 125 (expression_number -> MINUS expression_number .)
    COMMA           reduce using rule 125 (expression_number -> MINUS expression_number .)
    NEWLINE         reduce using rule 125 (expression_number -> MINUS expression_number .)
    IDENTIFIER      reduce using rule 125 (expression_number -> MINUS expression_number .)
    IF              reduce using rule 125 (expression_number -> MINUS expression_number .)
    ELSEIF          reduce using rule 125 (expression_number -> MINUS expression_number .)
    ELSE            reduce using rule 125 (expression_number -> MINUS expression_number .)
    WHILE           reduce using rule 125 (expression_number -> MINUS expression_number .)
    FOR             reduce using rule 125 (expression_number -> MINUS expression_number .)
    FUNCTION        reduce using rule 125 (expression_number -> MINUS expression_number .)
    DO              reduce using rule 125 (expression_number -> MINUS expression_number .)
    TRY             reduce using rule 125 (expression_number -> MINUS expression_number .)
    MODULE          reduce using rule 125 (expression_number -> MINUS expression_number .)
    BEGIN           reduce using rule 125 (expression_number -> MINUS expression_number .)
    USING           reduce using rule 125 (expression_number -> MINUS expression_number .)
    NUMBER          reduce using rule 125 (expression_number -> MINUS expression_number .)
    LEFT_PAREN      reduce using rule 125 (expression_number -> MINUS expression_number .)
    LEFT_BRACKET    reduce using rule 125 (expression_number -> MINUS expression_number .)
    INTEGER         reduce using rule 125 (expression_number -> MINUS expression_number .)
    $end            reduce using rule 125 (expression_number -> MINUS expression_number .)
    END             reduce using rule 125 (expression_number -> MINUS expression_number .)
    CATCH           reduce using rule 125 (expression_number -> MINUS expression_number .)
    RETURN          reduce using rule 125 (expression_number -> MINUS expression_number .)
    STRING          reduce using rule 125 (expression_number -> MINUS expression_number .)
    BOOLEAN         reduce using rule 125 (expression_number -> MINUS expression_number .)
    ADMIRATION      reduce using rule 125 (expression_number -> MINUS expression_number .)
    SEMICOLON       reduce using rule 125 (expression_number -> MINUS expression_number .)
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

  ! MULTIPLY        [ reduce using rule 125 (expression_number -> MINUS expression_number .) ]
  ! DIVIDE          [ reduce using rule 125 (expression_number -> MINUS expression_number .) ]
  ! PERCENT         [ reduce using rule 125 (expression_number -> MINUS expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 125 (expression_number -> MINUS expression_number .) ]
  ! EXPONENT        [ reduce using rule 125 (expression_number -> MINUS expression_number .) ]
  ! DOUBLEDOT       [ shift and go to state 61 ]
  ! DOT             [ shift and go to state 63 ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]

    operator_arithmetic            shift and go to state 62

state 93


  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 156
    elseif_block                   shift and go to state 9
    relation                       shift and go to state 157
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 94


    LEFT_PAREN      shift and go to state 94
    IDENTIFIER      shift and go to state 95
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    STRING          shift and go to state 100
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 158
    expression_string              shift and go to state 159
    expression_number              shift and go to state 160

state 95


  ! reduce/reduce conflict for DOUBLEDOT resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ORSYM resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
    LESS_THAN       reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    EQUALS          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    AND             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ANDSYM          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    OR              reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ORSYM           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    IF              reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ELSEIF          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ELSE            reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    WHILE           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    FOR             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    FUNCTION        reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    DO              reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    TRY             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    MODULE          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    BEGIN           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    USING           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    NUMBER          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    MINUS           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    INTEGER         reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    END             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    COMMA           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    NEWLINE         reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    $end            reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    CATCH           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    RETURN          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    STRING          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    BOOLEAN         reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ADMIRATION      reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    DOUBLEDOT       reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 161
    DOT             reduce using rule 120 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 120 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 120 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 120 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 120 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 120 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 120 (expression_number -> IDENTIFIER .)

  ! LEFT_PAREN      [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! DOUBLEDOT       [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN       [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]


state 96

    (107) expression_boolean -> BOOLEAN .

    LESS_THAN       reduce using rule 107 (expression_boolean -> BOOLEAN .)
    LESS_THAN_OR_EQUAL reduce using rule 107 (expression_boolean -> BOOLEAN .)
    GREATER_THAN    reduce using rule 107 (expression_boolean -> BOOLEAN .)
    GREATER_THAN_OR_EQUAL reduce using rule 107 (expression_boolean -> BOOLEAN .)
    EQUALS          reduce using rule 107 (expression_boolean -> BOOLEAN .)
    NOT_EQUALS      reduce using rule 107 (expression_boolean -> BOOLEAN .)
    AND             reduce using rule 107 (expression_boolean -> BOOLEAN .)
    ANDSYM          reduce using rule 107 (expression_boolean -> BOOLEAN .)
    OR              reduce using rule 107 (expression_boolean -> BOOLEAN .)
    ORSYM           reduce using rule 107 (expression_boolean -> BOOLEAN .)
    IDENTIFIER      reduce using rule 107 (expression_boolean -> BOOLEAN .)
    FUNCTIONS_JULIA reduce using rule 107 (expression_boolean -> BOOLEAN .)
    IF              reduce using rule 107 (expression_boolean -> BOOLEAN .)
    ELSEIF          reduce using rule 107 (expression_boolean -> BOOLEAN .)
    ELSE            reduce using rule 107 (expression_boolean -> BOOLEAN .)
    WHILE           reduce using rule 107 (expression_boolean -> BOOLEAN .)
    FOR             reduce using rule 107 (expression_boolean -> BOOLEAN .)
    FUNCTION        reduce using rule 107 (expression_boolean -> BOOLEAN .)
    DO              reduce using rule 107 (expression_boolean -> BOOLEAN .)
    TRY             reduce using rule 107 (expression_boolean -> BOOLEAN .)
    MODULE          reduce using rule 107 (expression_boolean -> BOOLEAN .)
    BEGIN           reduce using rule 107 (expression_boolean -> BOOLEAN .)
    USING           reduce using rule 107 (expression_boolean -> BOOLEAN .)
    NUMBER          reduce using rule 107 (expression_boolean -> BOOLEAN .)
    MINUS           reduce using rule 107 (expression_boolean -> BOOLEAN .)
    LEFT_PAREN      reduce using rule 107 (expression_boolean -> BOOLEAN .)
    LEFT_BRACKET    reduce using rule 107 (expression_boolean -> BOOLEAN .)
    INTEGER         reduce using rule 107 (expression_boolean -> BOOLEAN .)
    END             reduce using rule 107 (expression_boolean -> BOOLEAN .)
    COMMA           reduce using rule 107 (expression_boolean -> BOOLEAN .)
    NEWLINE         reduce using rule 107 (expression_boolean -> BOOLEAN .)
    $end            reduce using rule 107 (expression_boolean -> BOOLEAN .)
    CATCH           reduce using rule 107 (expression_boolean -> BOOLEAN .)
    RETURN          reduce using rule 107 (expression_boolean -> BOOLEAN .)
    RIGHT_PAREN     reduce using rule 107 (expression_boolean -> BOOLEAN .)
    STRING          reduce using rule 107 (expression_boolean -> BOOLEAN .)
    BOOLEAN         reduce using rule 107 (expression_boolean -> BOOLEAN .)
    ADMIRATION      reduce using rule 107 (expression_boolean -> BOOLEAN .)
    RIGHT_BRACKET   reduce using rule 107 (expression_boolean -> BOOLEAN .)
    DOUBLEDOT       reduce using rule 107 (expression_boolean -> BOOLEAN .)


state 97


    LEFT_PAREN      shift and go to state 94
    IDENTIFIER      shift and go to state 95
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    STRING          shift and go to state 100
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 162
    expression_string              shift and go to state 98
    expression_number              shift and go to state 99

state 98

    (111) expression_boolean -> expression_string . relation expression_string
    (131) expression_string -> expression_string . MULTIPLY expression_number
    (132) expression_string -> expression_string . MULTIPLY expression_string
    (140) relation -> . LESS_THAN
    (141) relation -> . LESS_THAN_OR_EQUAL
    (142) relation -> . GREATER_THAN
    (143) relation -> . GREATER_THAN_OR_EQUAL
    (144) relation -> . EQUALS
    (145) relation -> . NOT_EQUALS
    (146) relation -> . AND
    (147) relation -> . ANDSYM
    (148) relation -> . OR
    (149) relation -> . ORSYM

    MULTIPLY        shift and go to state 164
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 163

state 99


    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

    relation                       shift and go to state 165
    operator_arithmetic            shift and go to state 62

state 100

    (129) expression_string -> STRING .

    MULTIPLY        reduce using rule 129 (expression_string -> STRING .)
    LESS_THAN       reduce using rule 129 (expression_string -> STRING .)
    LESS_THAN_OR_EQUAL reduce using rule 129 (expression_string -> STRING .)
    GREATER_THAN    reduce using rule 129 (expression_string -> STRING .)
    GREATER_THAN_OR_EQUAL reduce using rule 129 (expression_string -> STRING .)
    EQUALS          reduce using rule 129 (expression_string -> STRING .)
    NOT_EQUALS      reduce using rule 129 (expression_string -> STRING .)
    AND             reduce using rule 129 (expression_string -> STRING .)
    ANDSYM          reduce using rule 129 (expression_string -> STRING .)
    OR              reduce using rule 129 (expression_string -> STRING .)
    ORSYM           reduce using rule 129 (expression_string -> STRING .)
    COMMA           reduce using rule 129 (expression_string -> STRING .)
    NEWLINE         reduce using rule 129 (expression_string -> STRING .)
    IDENTIFIER      reduce using rule 129 (expression_string -> STRING .)
    FUNCTIONS_JULIA reduce using rule 129 (expression_string -> STRING .)
    IF              reduce using rule 129 (expression_string -> STRING .)
    ELSEIF          reduce using rule 129 (expression_string -> STRING .)
    ELSE            reduce using rule 129 (expression_string -> STRING .)
    WHILE           reduce using rule 129 (expression_string -> STRING .)
    FOR             reduce using rule 129 (expression_string -> STRING .)
    FUNCTION        reduce using rule 129 (expression_string -> STRING .)
    DO              reduce using rule 129 (expression_string -> STRING .)
    TRY             reduce using rule 129 (expression_string -> STRING .)
    MODULE          reduce using rule 129 (expression_string -> STRING .)
    BEGIN           reduce using rule 129 (expression_string -> STRING .)
    USING           reduce using rule 129 (expression_string -> STRING .)
    NUMBER          reduce using rule 129 (expression_string -> STRING .)
    MINUS           reduce using rule 129 (expression_string -> STRING .)
    LEFT_PAREN      reduce using rule 129 (expression_string -> STRING .)
    LEFT_BRACKET    reduce using rule 129 (expression_string -> STRING .)
    INTEGER         reduce using rule 129 (expression_string -> STRING .)
    $end            reduce using rule 129 (expression_string -> STRING .)
    END             reduce using rule 129 (expression_string -> STRING .)
    CATCH           reduce using rule 129 (expression_string -> STRING .)
    RETURN          reduce using rule 129 (expression_string -> STRING .)
    RIGHT_PAREN     reduce using rule 129 (expression_string -> STRING .)
    STRING          reduce using rule 129 (expression_string -> STRING .)
    BOOLEAN         reduce using rule 129 (expression_string -> STRING .)
    ADMIRATION      reduce using rule 129 (expression_string -> STRING .)
    RIGHT_BRACKET   reduce using rule 129 (expression_string -> STRING .)
    DOUBLEDOT       reduce using rule 129 (expression_string -> STRING .)


state 101


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 166
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 102


  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 167
    elseif_block                   shift and go to state 9
    relation                       shift and go to state 157
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 103


  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 168
    relation                       shift and go to state 157
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 104

  ! reduce/reduce conflict for LESS_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ORSYM resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    IF              reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ELSEIF          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ELSE            reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    WHILE           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    FOR             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    FUNCTION        reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    DO              reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    TRY             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    MODULE          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    BEGIN           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    USING           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    NUMBER          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    MINUS           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    INTEGER         reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    END             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 161
    DOUBLEDOT       reduce using rule 120 (expression_number -> IDENTIFIER .)
    DOT             reduce using rule 120 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 120 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 120 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 120 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 120 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 120 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 120 (expression_number -> IDENTIFIER .)
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

  ! LESS_THAN       [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! LEFT_PAREN      [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]
  ! LESS_THAN       [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]

    relation                       shift and go to state 169

state 105

    IN              shift and go to state 170
    LEFT_BRACKET    shift and go to state 171


state 106

    LEFT_PAREN      shift and go to state 172


state 107


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 173
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 108

  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    CATCH           shift and go to state 174
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! CATCH           [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 109

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 175
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 110

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 176
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 111

    (100) statement_using -> USING IDENTIFIER .
    (101) statement_using -> USING IDENTIFIER . AS IDENTIFIER

    IDENTIFIER      reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    IF              reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    ELSEIF          reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    ELSE            reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    WHILE           reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    FOR             reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    FUNCTION        reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    DO              reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    TRY             reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    MODULE          reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    BEGIN           reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    USING           reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    NUMBER          reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    MINUS           reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    LEFT_PAREN      reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    INTEGER         reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    $end            reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    END             reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    CATCH           reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    RETURN          reduce using rule 100 (statement_using -> USING IDENTIFIER .)
    AS              shift and go to state 177


state 112

    (84) identifierDecl -> identifierDecl COMMA IDENTIFIER . assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (77) assignment -> . IDENTIFIER ASSIGN expression
    (113) assignment -> . ASSIGN

    IDENTIFIER      shift and go to state 49
    ASSIGN          shift and go to state 90

    assignment                     shift and go to state 178

state 113

    (85) identifierDecl -> identifierDecl NEWLINE IDENTIFIER . assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (77) assignment -> . IDENTIFIER ASSIGN expression
    (113) assignment -> . ASSIGN

    IDENTIFIER      shift and go to state 49
    ASSIGN          shift and go to state 90

    assignment                     shift and go to state 179

state 114

    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    expression                     shift and go to state 180
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 115

    COMMA           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    NEWLINE         reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    IDENTIFIER      reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    FUNCTIONS_JULIA reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    IF              reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    ELSEIF          reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    ELSE            reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    WHILE           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    FOR             reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    FUNCTION        reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    DO              reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    TRY             reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    MODULE          reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    BEGIN           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    USING           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    NUMBER          reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    LEFT_PAREN      reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    LEFT_BRACKET    reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    INTEGER         reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    $end            reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    END             reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    CATCH           reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    RETURN          reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

  ! MINUS           [ reduce using rule 24 (identifierDecl -> IDENTIFIER assignment_number expression_number .) ]

    operator_arithmetic            shift and go to state 62

state 116


  ! reduce/reduce conflict for LESS_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ORSYM resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ELSE resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for DO resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for TRY resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULE resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for BEGIN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for USING resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for INTEGER resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for END resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for CATCH resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for RETURN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for STRING resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ADMIRATION resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLEDOT resolved using rule 106 (expression_boolean -> IDENTIFIER .)
    DOT             reduce using rule 120 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 120 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 120 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 120 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 120 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 120 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 120 (expression_number -> IDENTIFIER .)
    SEMICOLON       reduce using rule 120 (expression_number -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 181
    LESS_THAN       reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    EQUALS          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    AND             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ANDSYM          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    OR              reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ORSYM           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    COMMA           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    NEWLINE         reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    IF              reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ELSEIF          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ELSE            reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    WHILE           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    FOR             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    FUNCTION        reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    DO              reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    TRY             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    MODULE          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    BEGIN           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    USING           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    NUMBER          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    MINUS           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    INTEGER         reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    $end            reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    END             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    CATCH           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    RETURN          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    STRING          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    BOOLEAN         reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ADMIRATION      reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    DOUBLEDOT       reduce using rule 106 (expression_boolean -> IDENTIFIER .)

  ! DOUBLEDOT       [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN       [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! NEWLINE         [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ELSEIF          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ELSE            [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! FUNCTION        [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! DO              [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! TRY             [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! MODULE          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! BEGIN           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! USING           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! NUMBER          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! LEFT_PAREN      [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! LEFT_BRACKET    [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! INTEGER         [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! END             [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! CATCH           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! BOOLEAN         [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ADMIRATION      [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_BRACKET   [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! LEFT_PAREN      [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]


state 117

    COMMA           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    NEWLINE         reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    IDENTIFIER      reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    FUNCTIONS_JULIA reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    IF              reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    ELSEIF          reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    ELSE            reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    WHILE           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    FOR             reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    FUNCTION        reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    DO              reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    TRY             reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    MODULE          reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    BEGIN           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    USING           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    NUMBER          reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    LEFT_PAREN      reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    LEFT_BRACKET    reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    INTEGER         reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    $end            reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    END             reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    CATCH           reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    RETURN          reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

  ! MINUS           [ reduce using rule 25 (identifierDecl -> IDENTIFIER assignment expression_number .) ]

    operator_arithmetic            shift and go to state 62
    relation                       shift and go to state 165

state 118

    COMMA           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    NEWLINE         reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    IDENTIFIER      reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    FUNCTIONS_JULIA reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    IF              reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    ELSEIF          reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    ELSE            reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    WHILE           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    FOR             reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    FUNCTION        reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    DO              reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    TRY             reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    MODULE          reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    BEGIN           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    USING           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    NUMBER          reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    MINUS           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    LEFT_PAREN      reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    LEFT_BRACKET    reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    INTEGER         reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    $end            reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    END             reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    CATCH           reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    RETURN          reduce using rule 26 (identifierDecl -> IDENTIFIER assignment expression_string .)
    MULTIPLY        shift and go to state 164
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 163

state 119

    COMMA           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    NEWLINE         reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    IDENTIFIER      reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    IF              reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    ELSEIF          reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    ELSE            reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    WHILE           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    FOR             reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    FUNCTION        reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    DO              reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    TRY             reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    MODULE          reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    BEGIN           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    USING           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    NUMBER          reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    MINUS           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    LEFT_PAREN      reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    LEFT_BRACKET    reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    INTEGER         reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    $end            reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    END             reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    CATCH           reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    RETURN          reduce using rule 27 (identifierDecl -> IDENTIFIER assignment expression_boolean .)
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 157

state 120

    (28) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA . LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA . LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN

    LEFT_PAREN      shift and go to state 182


state 121


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    expression_number              shift and go to state 183
    expression_string              shift and go to state 184
    expression_boolean             shift and go to state 158

state 122


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    RIGHT_BRACKET   reduce using rule 94 (empty -> .)
    COMMA           reduce using rule 94 (empty -> .)

    array_elements                 shift and go to state 185
    expression_number              shift and go to state 186
    expression_string              shift and go to state 187
    expression_boolean             shift and go to state 188
    empty                          shift and go to state 189

state 123

    (95) statement_call_function -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN
    (126) expression_number -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 190


state 124

    (64) argument_list -> expression .
    (65) argument_list -> expression . COMMA argument_list

    RIGHT_PAREN     reduce using rule 64 (argument_list -> expression .)
    COMMA           shift and go to state 191


state 125

    (66) argument_list -> statement_do .

    RIGHT_PAREN     reduce using rule 66 (argument_list -> statement_do .)


state 126

    (67) argument_list -> empty .

    RIGHT_PAREN     reduce using rule 67 (argument_list -> empty .)


state 127


  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 102 (expression -> expression_number .)
    RIGHT_PAREN     reduce using rule 102 (expression -> expression_number .)
    FUNCTIONS_JULIA reduce using rule 102 (expression -> expression_number .)
    LEFT_BRACKET    reduce using rule 102 (expression -> expression_number .)
    IDENTIFIER      reduce using rule 102 (expression -> expression_number .)
    NUMBER          reduce using rule 102 (expression -> expression_number .)
    LEFT_PAREN      reduce using rule 102 (expression -> expression_number .)
    STRING          reduce using rule 102 (expression -> expression_number .)
    BOOLEAN         reduce using rule 102 (expression -> expression_number .)
    ADMIRATION      reduce using rule 102 (expression -> expression_number .)
    IF              reduce using rule 102 (expression -> expression_number .)
    ELSEIF          reduce using rule 102 (expression -> expression_number .)
    ELSE            reduce using rule 102 (expression -> expression_number .)
    WHILE           reduce using rule 102 (expression -> expression_number .)
    FOR             reduce using rule 102 (expression -> expression_number .)
    FUNCTION        reduce using rule 102 (expression -> expression_number .)
    DO              reduce using rule 102 (expression -> expression_number .)
    TRY             reduce using rule 102 (expression -> expression_number .)
    MODULE          reduce using rule 102 (expression -> expression_number .)
    BEGIN           reduce using rule 102 (expression -> expression_number .)
    USING           reduce using rule 102 (expression -> expression_number .)
    INTEGER         reduce using rule 102 (expression -> expression_number .)
    $end            reduce using rule 102 (expression -> expression_number .)
    END             reduce using rule 102 (expression -> expression_number .)
    CATCH           reduce using rule 102 (expression -> expression_number .)
    RETURN          reduce using rule 102 (expression -> expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

  ! MINUS           [ reduce using rule 102 (expression -> expression_number .) ]

    operator_arithmetic            shift and go to state 62
    relation                       shift and go to state 165

state 128


    COMMA           reduce using rule 103 (expression -> expression_string .)
    RIGHT_PAREN     reduce using rule 103 (expression -> expression_string .)
    FUNCTIONS_JULIA reduce using rule 103 (expression -> expression_string .)
    LEFT_BRACKET    reduce using rule 103 (expression -> expression_string .)
    IDENTIFIER      reduce using rule 103 (expression -> expression_string .)
    NUMBER          reduce using rule 103 (expression -> expression_string .)
    MINUS           reduce using rule 103 (expression -> expression_string .)
    LEFT_PAREN      reduce using rule 103 (expression -> expression_string .)
    STRING          reduce using rule 103 (expression -> expression_string .)
    BOOLEAN         reduce using rule 103 (expression -> expression_string .)
    ADMIRATION      reduce using rule 103 (expression -> expression_string .)
    DOUBLEDOT       reduce using rule 103 (expression -> expression_string .)
    IF              reduce using rule 103 (expression -> expression_string .)
    ELSEIF          reduce using rule 103 (expression -> expression_string .)
    ELSE            reduce using rule 103 (expression -> expression_string .)
    WHILE           reduce using rule 103 (expression -> expression_string .)
    FOR             reduce using rule 103 (expression -> expression_string .)
    FUNCTION        reduce using rule 103 (expression -> expression_string .)
    DO              reduce using rule 103 (expression -> expression_string .)
    TRY             reduce using rule 103 (expression -> expression_string .)
    MODULE          reduce using rule 103 (expression -> expression_string .)
    BEGIN           reduce using rule 103 (expression -> expression_string .)
    USING           reduce using rule 103 (expression -> expression_string .)
    INTEGER         reduce using rule 103 (expression -> expression_string .)
    $end            reduce using rule 103 (expression -> expression_string .)
    END             reduce using rule 103 (expression -> expression_string .)
    CATCH           reduce using rule 103 (expression -> expression_string .)
    RETURN          reduce using rule 103 (expression -> expression_string .)
    MULTIPLY        shift and go to state 164
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 163

state 129


    COMMA           reduce using rule 104 (expression -> expression_boolean .)
    RIGHT_PAREN     reduce using rule 104 (expression -> expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 104 (expression -> expression_boolean .)
    LEFT_BRACKET    reduce using rule 104 (expression -> expression_boolean .)
    IDENTIFIER      reduce using rule 104 (expression -> expression_boolean .)
    NUMBER          reduce using rule 104 (expression -> expression_boolean .)
    MINUS           reduce using rule 104 (expression -> expression_boolean .)
    LEFT_PAREN      reduce using rule 104 (expression -> expression_boolean .)
    STRING          reduce using rule 104 (expression -> expression_boolean .)
    BOOLEAN         reduce using rule 104 (expression -> expression_boolean .)
    ADMIRATION      reduce using rule 104 (expression -> expression_boolean .)
    DOUBLEDOT       reduce using rule 104 (expression -> expression_boolean .)
    IF              reduce using rule 104 (expression -> expression_boolean .)
    ELSEIF          reduce using rule 104 (expression -> expression_boolean .)
    ELSE            reduce using rule 104 (expression -> expression_boolean .)
    WHILE           reduce using rule 104 (expression -> expression_boolean .)
    FOR             reduce using rule 104 (expression -> expression_boolean .)
    FUNCTION        reduce using rule 104 (expression -> expression_boolean .)
    DO              reduce using rule 104 (expression -> expression_boolean .)
    TRY             reduce using rule 104 (expression -> expression_boolean .)
    MODULE          reduce using rule 104 (expression -> expression_boolean .)
    BEGIN           reduce using rule 104 (expression -> expression_boolean .)
    USING           reduce using rule 104 (expression -> expression_boolean .)
    INTEGER         reduce using rule 104 (expression -> expression_boolean .)
    $end            reduce using rule 104 (expression -> expression_boolean .)
    END             reduce using rule 104 (expression -> expression_boolean .)
    CATCH           reduce using rule 104 (expression -> expression_boolean .)
    RETURN          reduce using rule 104 (expression -> expression_boolean .)
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 157

state 130


    INTEGER         shift and go to state 193
    NUMBER          shift and go to state 194

    array_values                   shift and go to state 192

state 131

    DO              shift and go to state 39
    RIGHT_PAREN     reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    argument_list                  shift and go to state 195
    expression                     shift and go to state 124
    statement_do                   shift and go to state 125
    empty                          shift and go to state 126
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 132

    (50) array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE . IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia

    IDENTIFIER      shift and go to state 196


state 133

  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    FUNCTIONS_JULIA reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    RIGHT_PAREN     reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    RIGHT_BRACKET   reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LESS_THAN       reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    GREATER_THAN    reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    EQUALS          reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    NOT_EQUALS      reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    AND             reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ANDSYM          reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    OR              reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ORSYM           reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    COMMA           reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    NEWLINE         reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    IDENTIFIER      reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    IF              reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ELSEIF          reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ELSE            reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    WHILE           reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    FOR             reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    FUNCTION        reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    DO              reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    TRY             reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    MODULE          reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    BEGIN           reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    USING           reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    NUMBER          reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LEFT_PAREN      reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LEFT_BRACKET    reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    INTEGER         reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    $end            reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    END             reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    CATCH           reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    RETURN          reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    STRING          reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    BOOLEAN         reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ADMIRATION      reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    SEMICOLON       reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

  ! DOUBLEDOT       [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! DOT             [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! PLUS            [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! MINUS           [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! MULTIPLY        [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! DIVIDE          [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! PERCENT         [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! EXPONENT        [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]

    operator_arithmetic            shift and go to state 62

state 134


  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    FUNCTIONS_JULIA reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    RIGHT_PAREN     reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    RIGHT_BRACKET   reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    LESS_THAN       reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    GREATER_THAN    reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    EQUALS          reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    NOT_EQUALS      reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    AND             reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    ANDSYM          reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    OR              reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    ORSYM           reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    COMMA           reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    NEWLINE         reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    IDENTIFIER      reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    IF              reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    ELSEIF          reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    ELSE            reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    WHILE           reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    FOR             reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    FUNCTION        reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    DO              reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    TRY             reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    MODULE          reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    BEGIN           reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    USING           reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    NUMBER          reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    LEFT_PAREN      reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    LEFT_BRACKET    reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    INTEGER         reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    $end            reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    END             reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    CATCH           reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    RETURN          reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    STRING          reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    BOOLEAN         reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    ADMIRATION      reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    SEMICOLON       reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

  ! DOUBLEDOT       [ reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! DOT             [ reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! PLUS            [ reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! MINUS           [ reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! MULTIPLY        [ reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! DIVIDE          [ reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! PERCENT         [ reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! EXPONENT        [ reduce using rule 122 (expression_number -> expression_number operator_arithmetic expression_number .) ]

    operator_arithmetic            shift and go to state 62

state 135


  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    FUNCTIONS_JULIA reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    RIGHT_PAREN     reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    RIGHT_BRACKET   reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    LESS_THAN       reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    GREATER_THAN    reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    EQUALS          reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    NOT_EQUALS      reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    AND             reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    ANDSYM          reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    OR              reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    ORSYM           reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    COMMA           reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    NEWLINE         reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    IDENTIFIER      reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    IF              reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    ELSEIF          reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    ELSE            reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    WHILE           reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    FOR             reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    FUNCTION        reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    DO              reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    TRY             reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    MODULE          reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    BEGIN           reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    USING           reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    NUMBER          reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    LEFT_PAREN      reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    LEFT_BRACKET    reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    INTEGER         reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    $end            reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    END             reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    CATCH           reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    RETURN          reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    STRING          reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    BOOLEAN         reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    ADMIRATION      reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    SEMICOLON       reduce using rule 124 (expression_number -> expression_number DOT expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

  ! DOUBLEDOT       [ reduce using rule 124 (expression_number -> expression_number DOT expression_number .) ]
  ! DOT             [ reduce using rule 124 (expression_number -> expression_number DOT expression_number .) ]
  ! PLUS            [ reduce using rule 124 (expression_number -> expression_number DOT expression_number .) ]
  ! MINUS           [ reduce using rule 124 (expression_number -> expression_number DOT expression_number .) ]
  ! MULTIPLY        [ reduce using rule 124 (expression_number -> expression_number DOT expression_number .) ]
  ! DIVIDE          [ reduce using rule 124 (expression_number -> expression_number DOT expression_number .) ]
  ! PERCENT         [ reduce using rule 124 (expression_number -> expression_number DOT expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 124 (expression_number -> expression_number DOT expression_number .) ]
  ! EXPONENT        [ reduce using rule 124 (expression_number -> expression_number DOT expression_number .) ]

    operator_arithmetic            shift and go to state 62

state 136

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA . LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia

    LEFT_PAREN      shift and go to state 197


state 137

    ASSIGN          shift and go to state 198


state 138

    (60) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 199


state 139

    RIGHT_PAREN     shift and go to state 200
    DOT             shift and go to state 201


state 140


  ! reduce/reduce conflict for LESS_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for OR resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for ORSYM resolved using rule 106 (expression_boolean -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 106 (expression_boolean -> IDENTIFIER .)
    RIGHT_PAREN     shift and go to state 202
    DOUBLEDOT       reduce using rule 120 (expression_number -> IDENTIFIER .)
    DOT             reduce using rule 120 (expression_number -> IDENTIFIER .)
    PLUS            reduce using rule 120 (expression_number -> IDENTIFIER .)
    MINUS           reduce using rule 120 (expression_number -> IDENTIFIER .)
    MULTIPLY        reduce using rule 120 (expression_number -> IDENTIFIER .)
    DIVIDE          reduce using rule 120 (expression_number -> IDENTIFIER .)
    PERCENT         reduce using rule 120 (expression_number -> IDENTIFIER .)
    SQUAREROOT      reduce using rule 120 (expression_number -> IDENTIFIER .)
    EXPONENT        reduce using rule 120 (expression_number -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 181
    LESS_THAN       reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    LESS_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    GREATER_THAN_OR_EQUAL reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    EQUALS          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    AND             reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ANDSYM          reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    OR              reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    ORSYM           reduce using rule 106 (expression_boolean -> IDENTIFIER .)
    COMMA           reduce using rule 106 (expression_boolean -> IDENTIFIER .)

  ! LESS_THAN       [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN    [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! EQUALS          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! NOT_EQUALS      [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! AND             [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ANDSYM          [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! OR              [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! ORSYM           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 120 (expression_number -> IDENTIFIER .) ]
  ! RIGHT_PAREN     [ reduce using rule 106 (expression_boolean -> IDENTIFIER .) ]


state 141

    (127) expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .

    FUNCTIONS_JULIA reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    DOT             reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    PLUS            reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    MINUS           reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    MULTIPLY        reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    DIVIDE          reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    PERCENT         reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    EXPONENT        reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    LESS_THAN       reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    EQUALS          reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    AND             reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ANDSYM          reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    OR              reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ORSYM           reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    COMMA           reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    NEWLINE         reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    IF              reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ELSEIF          reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ELSE            reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    WHILE           reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    FOR             reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    FUNCTION        reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    DO              reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    TRY             reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    MODULE          reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    BEGIN           reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    USING           reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    NUMBER          reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    INTEGER         reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    $end            reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    END             reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    CATCH           reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    RETURN          reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    STRING          reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    BOOLEAN         reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    ADMIRATION      reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)
    SEMICOLON       reduce using rule 127 (expression_number -> LEFT_PAREN expression_number RIGHT_PAREN .)


state 142


    DO              shift and go to state 39
    RIGHT_PAREN     reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    argument_list                  shift and go to state 203
    expression                     shift and go to state 124
    statement_do                   shift and go to state 125
    empty                          shift and go to state 126
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 143

    (128) expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .

    FUNCTIONS_JULIA reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    DOUBLEDOT       reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    DOT             reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    PLUS            reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    MINUS           reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    DIVIDE          reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    PERCENT         reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    SQUAREROOT      reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    EXPONENT        reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    LESS_THAN_OR_EQUAL reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    GREATER_THAN_OR_EQUAL reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    EQUALS          reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    NOT_EQUALS      reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    AND             reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ANDSYM          reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    OR              reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ORSYM           reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    COMMA           reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    NEWLINE         reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    IF              reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ELSEIF          reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ELSE            reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    WHILE           reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    FOR             reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    FUNCTION        reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    DO              reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    TRY             reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    MODULE          reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    BEGIN           reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    USING           reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    NUMBER          reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    INTEGER         reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    $end            reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    END             reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    CATCH           reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    RETURN          reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    STRING          reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    BOOLEAN         reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    ADMIRATION      reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 128 (expression_number -> LEFT_BRACKET expression_number RIGHT_BRACKET .)


state 144

    (33) identifierDecl -> identifierList assignment_number expression_number_list .
    (36) expression_number_list -> expression_number_list . COMMA expression_number

  ! shift/reduce conflict for COMMA resolved as shift
    NEWLINE         reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    IDENTIFIER      reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    FUNCTIONS_JULIA reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    IF              reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    ELSEIF          reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    ELSE            reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    WHILE           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    FOR             reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    FUNCTION        reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    DO              reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    TRY             reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    MODULE          reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    BEGIN           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    USING           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    NUMBER          reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    MINUS           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    LEFT_PAREN      reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    LEFT_BRACKET    reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    INTEGER         reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    $end            reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    END             reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    CATCH           reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    RETURN          reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .)
    COMMA           shift and go to state 204

  ! COMMA           [ reduce using rule 33 (identifierDecl -> identifierList assignment_number expression_number_list .) ]


state 145

    (41) identifierDecl -> identifierList assignment_number expression_string_list .
    (38) expression_string_list -> expression_string_list . COMMA expression_string

  ! shift/reduce conflict for COMMA resolved as shift
    NEWLINE         reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    IDENTIFIER      reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    FUNCTIONS_JULIA reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    IF              reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    ELSEIF          reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    ELSE            reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    WHILE           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    FOR             reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    FUNCTION        reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    DO              reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    TRY             reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    MODULE          reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    BEGIN           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    USING           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    NUMBER          reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    MINUS           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    LEFT_PAREN      reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    LEFT_BRACKET    reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    INTEGER         reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    $end            reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    END             reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    CATCH           reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    RETURN          reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .)
    COMMA           shift and go to state 205

  ! COMMA           [ reduce using rule 41 (identifierDecl -> identifierList assignment_number expression_string_list .) ]


state 146

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 35 (expression_number_list -> expression_number .)
    NEWLINE         reduce using rule 35 (expression_number_list -> expression_number .)
    IDENTIFIER      reduce using rule 35 (expression_number_list -> expression_number .)
    FUNCTIONS_JULIA reduce using rule 35 (expression_number_list -> expression_number .)
    IF              reduce using rule 35 (expression_number_list -> expression_number .)
    ELSEIF          reduce using rule 35 (expression_number_list -> expression_number .)
    ELSE            reduce using rule 35 (expression_number_list -> expression_number .)
    WHILE           reduce using rule 35 (expression_number_list -> expression_number .)
    FOR             reduce using rule 35 (expression_number_list -> expression_number .)
    FUNCTION        reduce using rule 35 (expression_number_list -> expression_number .)
    DO              reduce using rule 35 (expression_number_list -> expression_number .)
    TRY             reduce using rule 35 (expression_number_list -> expression_number .)
    MODULE          reduce using rule 35 (expression_number_list -> expression_number .)
    BEGIN           reduce using rule 35 (expression_number_list -> expression_number .)
    USING           reduce using rule 35 (expression_number_list -> expression_number .)
    NUMBER          reduce using rule 35 (expression_number_list -> expression_number .)
    LEFT_PAREN      reduce using rule 35 (expression_number_list -> expression_number .)
    LEFT_BRACKET    reduce using rule 35 (expression_number_list -> expression_number .)
    INTEGER         reduce using rule 35 (expression_number_list -> expression_number .)
    $end            reduce using rule 35 (expression_number_list -> expression_number .)
    END             reduce using rule 35 (expression_number_list -> expression_number .)
    CATCH           reduce using rule 35 (expression_number_list -> expression_number .)
    RETURN          reduce using rule 35 (expression_number_list -> expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

  ! MINUS           [ reduce using rule 35 (expression_number_list -> expression_number .) ]

    operator_arithmetic            shift and go to state 62

state 147

    COMMA           reduce using rule 37 (expression_string_list -> expression_string .)
    NEWLINE         reduce using rule 37 (expression_string_list -> expression_string .)
    IDENTIFIER      reduce using rule 37 (expression_string_list -> expression_string .)
    FUNCTIONS_JULIA reduce using rule 37 (expression_string_list -> expression_string .)
    IF              reduce using rule 37 (expression_string_list -> expression_string .)
    ELSEIF          reduce using rule 37 (expression_string_list -> expression_string .)
    ELSE            reduce using rule 37 (expression_string_list -> expression_string .)
    WHILE           reduce using rule 37 (expression_string_list -> expression_string .)
    FOR             reduce using rule 37 (expression_string_list -> expression_string .)
    FUNCTION        reduce using rule 37 (expression_string_list -> expression_string .)
    DO              reduce using rule 37 (expression_string_list -> expression_string .)
    TRY             reduce using rule 37 (expression_string_list -> expression_string .)
    MODULE          reduce using rule 37 (expression_string_list -> expression_string .)
    BEGIN           reduce using rule 37 (expression_string_list -> expression_string .)
    USING           reduce using rule 37 (expression_string_list -> expression_string .)
    NUMBER          reduce using rule 37 (expression_string_list -> expression_string .)
    MINUS           reduce using rule 37 (expression_string_list -> expression_string .)
    LEFT_PAREN      reduce using rule 37 (expression_string_list -> expression_string .)
    LEFT_BRACKET    reduce using rule 37 (expression_string_list -> expression_string .)
    INTEGER         reduce using rule 37 (expression_string_list -> expression_string .)
    $end            reduce using rule 37 (expression_string_list -> expression_string .)
    END             reduce using rule 37 (expression_string_list -> expression_string .)
    CATCH           reduce using rule 37 (expression_string_list -> expression_string .)
    RETURN          reduce using rule 37 (expression_string_list -> expression_string .)
    MULTIPLY        shift and go to state 164


state 148


    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 148
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100

    expression_number              shift and go to state 83
    expression_string              shift and go to state 206

state 149

    (34) identifierDecl -> identifierList assignment expression_number_list .
    (36) expression_number_list -> expression_number_list . COMMA expression_number

  ! shift/reduce conflict for COMMA resolved as shift
    NEWLINE         reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    IDENTIFIER      reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    FUNCTIONS_JULIA reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    IF              reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    ELSEIF          reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    ELSE            reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    WHILE           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    FOR             reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    FUNCTION        reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    DO              reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    TRY             reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    MODULE          reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    BEGIN           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    USING           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    NUMBER          reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    MINUS           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    LEFT_PAREN      reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    LEFT_BRACKET    reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    INTEGER         reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    $end            reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    END             reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    CATCH           reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    RETURN          reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .)
    COMMA           shift and go to state 204

  ! COMMA           [ reduce using rule 34 (identifierDecl -> identifierList assignment expression_number_list .) ]


state 150

  ! shift/reduce conflict for COMMA resolved as shift
    NEWLINE         reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    IDENTIFIER      reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    FUNCTIONS_JULIA reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    IF              reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    ELSEIF          reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    ELSE            reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    WHILE           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    FOR             reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    FUNCTION        reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    DO              reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    TRY             reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    MODULE          reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    BEGIN           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    USING           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    NUMBER          reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    MINUS           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    LEFT_PAREN      reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    LEFT_BRACKET    reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    INTEGER         reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    $end            reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    END             reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    CATCH           reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    RETURN          reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .)
    COMMA           shift and go to state 207

  ! COMMA           [ reduce using rule 42 (identifierDecl -> identifierList assignment expression_boolean_list .) ]


state 151


  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 35 (expression_number_list -> expression_number .)
    NEWLINE         reduce using rule 35 (expression_number_list -> expression_number .)
    IDENTIFIER      reduce using rule 35 (expression_number_list -> expression_number .)
    FUNCTIONS_JULIA reduce using rule 35 (expression_number_list -> expression_number .)
    IF              reduce using rule 35 (expression_number_list -> expression_number .)
    ELSEIF          reduce using rule 35 (expression_number_list -> expression_number .)
    ELSE            reduce using rule 35 (expression_number_list -> expression_number .)
    WHILE           reduce using rule 35 (expression_number_list -> expression_number .)
    FOR             reduce using rule 35 (expression_number_list -> expression_number .)
    FUNCTION        reduce using rule 35 (expression_number_list -> expression_number .)
    DO              reduce using rule 35 (expression_number_list -> expression_number .)
    TRY             reduce using rule 35 (expression_number_list -> expression_number .)
    MODULE          reduce using rule 35 (expression_number_list -> expression_number .)
    BEGIN           reduce using rule 35 (expression_number_list -> expression_number .)
    USING           reduce using rule 35 (expression_number_list -> expression_number .)
    NUMBER          reduce using rule 35 (expression_number_list -> expression_number .)
    LEFT_PAREN      reduce using rule 35 (expression_number_list -> expression_number .)
    LEFT_BRACKET    reduce using rule 35 (expression_number_list -> expression_number .)
    INTEGER         reduce using rule 35 (expression_number_list -> expression_number .)
    $end            reduce using rule 35 (expression_number_list -> expression_number .)
    END             reduce using rule 35 (expression_number_list -> expression_number .)
    CATCH           reduce using rule 35 (expression_number_list -> expression_number .)
    RETURN          reduce using rule 35 (expression_number_list -> expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

  ! MINUS           [ reduce using rule 35 (expression_number_list -> expression_number .) ]

    operator_arithmetic            shift and go to state 62
    relation                       shift and go to state 165

state 152


    COMMA           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    NEWLINE         reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    IDENTIFIER      reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    IF              reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    ELSEIF          reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    ELSE            reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    WHILE           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    FOR             reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    FUNCTION        reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    DO              reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    TRY             reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    MODULE          reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    BEGIN           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    USING           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    NUMBER          reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    MINUS           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    LEFT_PAREN      reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    LEFT_BRACKET    reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    INTEGER         reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    $end            reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    END             reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    CATCH           reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    RETURN          reduce using rule 39 (expression_boolean_list -> expression_boolean .)
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 157

state 153


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 153
    LEFT_BRACKET    shift and go to state 27
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    STRING          shift and go to state 100

    expression_number              shift and go to state 183
    expression_boolean             shift and go to state 158
    expression_string              shift and go to state 159

state 154


    COMMA           reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    SUMASIGN        reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    MINASIGN        reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    MULTASIGN       reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    DIVASIGN        reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    MODULEASIGN     reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    EXPONENTASIGN   reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    IDENTIFIER      reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)
    ASSIGN          reduce using rule 44 (identifierList -> identifierList COMMA IDENTIFIER .)


state 155


    FUNCTIONS_JULIA shift and go to state 208


state 156

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 209
    ELSE            shift and go to state 210
    ELSEIF          shift and go to state 34
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    elseif_block                   shift and go to state 211
    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 157


    LEFT_PAREN      shift and go to state 94
    IDENTIFIER      shift and go to state 95
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    STRING          shift and go to state 100
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 212
    expression_string              shift and go to state 98
    expression_number              shift and go to state 99

state 158


    RIGHT_PAREN     shift and go to state 213
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 157

state 159


    RIGHT_PAREN     shift and go to state 214
    MULTIPLY        shift and go to state 164
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 163

state 160

    (139) operator_arithmetic -> . EXPONENT

    RIGHT_PAREN     shift and go to state 141
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

    relation                       shift and go to state 165
    operator_arithmetic            shift and go to state 62

state 161


    DO              shift and go to state 39
    RIGHT_PAREN     reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    argument_list                  shift and go to state 215
    expression                     shift and go to state 124
    statement_do                   shift and go to state 125
    empty                          shift and go to state 126
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 162


  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for ANDSYM resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for ORSYM resolved as shift
    IDENTIFIER      reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    IF              reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    ELSEIF          reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    ELSE            reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    WHILE           reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    FOR             reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    FUNCTION        reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    DO              reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    TRY             reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    MODULE          reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    BEGIN           reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    USING           reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    NUMBER          reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    MINUS           reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    LEFT_PAREN      reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    LEFT_BRACKET    reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    INTEGER         reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    END             reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    COMMA           reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    NEWLINE         reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    $end            reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    CATCH           reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    RETURN          reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    RIGHT_PAREN     reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    STRING          reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    BOOLEAN         reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    ADMIRATION      reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    RIGHT_BRACKET   reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    DOUBLEDOT       reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .)
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

  ! LESS_THAN       [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! GREATER_THAN    [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! EQUALS          [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! NOT_EQUALS      [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! AND             [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! ANDSYM          [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! OR              [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! ORSYM           [ reduce using rule 110 (expression_boolean -> ADMIRATION expression_boolean .) ]

    relation                       shift and go to state 157

state 163


    STRING          shift and go to state 100
    LEFT_PAREN      shift and go to state 217

    expression_string              shift and go to state 216

state 164


    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 148
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100

    expression_string              shift and go to state 218
    expression_number              shift and go to state 219

state 165


    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 220

state 166

    (75) else_statement -> ELSE statement_list END .

    IDENTIFIER      reduce using rule 75 (else_statement -> ELSE statement_list END .)
    FUNCTIONS_JULIA reduce using rule 75 (else_statement -> ELSE statement_list END .)
    IF              reduce using rule 75 (else_statement -> ELSE statement_list END .)
    ELSEIF          reduce using rule 75 (else_statement -> ELSE statement_list END .)
    ELSE            reduce using rule 75 (else_statement -> ELSE statement_list END .)
    WHILE           reduce using rule 75 (else_statement -> ELSE statement_list END .)
    FOR             reduce using rule 75 (else_statement -> ELSE statement_list END .)
    FUNCTION        reduce using rule 75 (else_statement -> ELSE statement_list END .)
    DO              reduce using rule 75 (else_statement -> ELSE statement_list END .)
    TRY             reduce using rule 75 (else_statement -> ELSE statement_list END .)
    MODULE          reduce using rule 75 (else_statement -> ELSE statement_list END .)
    BEGIN           reduce using rule 75 (else_statement -> ELSE statement_list END .)
    USING           reduce using rule 75 (else_statement -> ELSE statement_list END .)
    NUMBER          reduce using rule 75 (else_statement -> ELSE statement_list END .)
    MINUS           reduce using rule 75 (else_statement -> ELSE statement_list END .)
    LEFT_PAREN      reduce using rule 75 (else_statement -> ELSE statement_list END .)
    LEFT_BRACKET    reduce using rule 75 (else_statement -> ELSE statement_list END .)
    INTEGER         reduce using rule 75 (else_statement -> ELSE statement_list END .)
    $end            reduce using rule 75 (else_statement -> ELSE statement_list END .)
    END             reduce using rule 75 (else_statement -> ELSE statement_list END .)
    CATCH           reduce using rule 75 (else_statement -> ELSE statement_list END .)
    RETURN          reduce using rule 75 (else_statement -> ELSE statement_list END .)


state 167

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 221
    ELSE            shift and go to state 222
    ELSEIF          shift and go to state 34
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    elseif_block                   shift and go to state 223
    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 168

    (78) while_statement -> WHILE expression_boolean statement_list . END
    (6) statement_list -> statement_list . statement
    (7) statement -> . identifierDecl
    (8) statement -> . array_estatement_julia
    (9) statement -> . if_statement
    (10) statement -> . elseif_block
    (11) statement -> . else_statement
    (12) statement -> . while_statement
    (13) statement -> . for_statement
    (14) statement -> . array_estatement
    (15) statement -> . function_definition
    (16) statement -> . statement_function
    (17) statement -> . statement_call_function
    (18) statement -> . statement_function_julia
    (19) statement -> . statement_do
    (20) statement -> . statement_try
    (21) statement -> . statement_module
    (22) statement -> . statement_begin
    (23) statement -> . statement_using
    (24) identifierDecl -> . IDENTIFIER assignment_number expression_number
    (25) identifierDecl -> . IDENTIFIER assignment expression_number
    (26) identifierDecl -> . IDENTIFIER assignment expression_string
    (27) identifierDecl -> . IDENTIFIER assignment expression_boolean
    (28) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (29) identifierDecl -> . IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN
    (30) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia
    (31) identifierDecl -> . FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia
    (32) identifierDecl -> . FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia
    (33) identifierDecl -> . identifierList assignment_number expression_number_list
    (34) identifierDecl -> . identifierList assignment expression_number_list
    (41) identifierDecl -> . identifierList assignment_number expression_string_list
    (42) identifierDecl -> . identifierList assignment expression_boolean_list
    (83) identifierDecl -> . IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (84) identifierDecl -> . identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (85) identifierDecl -> . identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET
    (50) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia
    (51) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia
    (68) if_statement -> . IF expression_boolean statement_list END
    (69) if_statement -> . IF expression_boolean statement_list ELSE statement_list END
    (70) if_statement -> . IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END
    (71) if_statement -> . IF expression_boolean statement_list elseif_block END
    (72) elseif_block -> . ELSEIF expression_boolean statement_list END
    (73) elseif_block -> . ELSEIF expression_boolean statement_list ELSE statement_list END
    (74) elseif_block -> . ELSEIF expression_boolean statement_list elseif_block END
    (75) else_statement -> . ELSE statement_list END
    (76) else_statement -> . empty
    (78) while_statement -> . WHILE expression_boolean statement_list END
    (79) while_statement -> . WHILE IDENTIFIER relation NUMBER statement_list END
    (80) for_statement -> . FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END
    (81) for_statement -> . FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END
    (82) for_statement -> . FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END
    (45) array_estatement -> . IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET
    (56) function_definition -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (57) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END
    (58) statement_function -> . FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END
    (59) statement_function -> . IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression
    (95) statement_call_function -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (60) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN
    (61) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN
    (62) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN
    (63) statement_function_julia -> . FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN
    (96) statement_do -> . DO statement_list END
    (98) statement_try -> . TRY statement_list CATCH IDENTIFIER statement_list END
    (99) statement_module -> . MODULE IDENTIFIER statement_list END
    (97) statement_begin -> . BEGIN statement_list END
    (100) statement_using -> . USING IDENTIFIER
    (101) statement_using -> . USING IDENTIFIER AS IDENTIFIER
    (43) identifierList -> . IDENTIFIER
    (44) identifierList -> . identifierList COMMA IDENTIFIER
    (120) expression_number -> . IDENTIFIER
    (121) expression_number -> . NUMBER
    (122) expression_number -> . expression_number operator_arithmetic expression_number
    (123) expression_number -> . expression_number DOUBLEDOT expression_number
    (124) expression_number -> . expression_number DOT expression_number
    (125) expression_number -> . MINUS expression_number
    (126) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (127) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (128) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (54) values -> . INTEGER
    (55) values -> . NUMBER
    (94) empty -> .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 224
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 169

    (79) while_statement -> WHILE IDENTIFIER relation . NUMBER statement_list END

    NUMBER          shift and go to state 225


state 170

    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    expression                     shift and go to state 226
    expression_number              shift and go to state 227
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 171


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    RIGHT_BRACKET   reduce using rule 94 (empty -> .)
    COMMA           reduce using rule 94 (empty -> .)

    array_elements                 shift and go to state 228
    expression_number              shift and go to state 229
    expression_string              shift and go to state 187
    expression_boolean             shift and go to state 188
    empty                          shift and go to state 189

state 172


    DO              shift and go to state 39
    RIGHT_PAREN     reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    argument_list                  shift and go to state 230
    expression                     shift and go to state 124
    statement_do                   shift and go to state 125
    empty                          shift and go to state 126
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 173

    (96) statement_do -> DO statement_list END .

    IDENTIFIER      reduce using rule 96 (statement_do -> DO statement_list END .)
    FUNCTIONS_JULIA reduce using rule 96 (statement_do -> DO statement_list END .)
    IF              reduce using rule 96 (statement_do -> DO statement_list END .)
    ELSEIF          reduce using rule 96 (statement_do -> DO statement_list END .)
    ELSE            reduce using rule 96 (statement_do -> DO statement_list END .)
    WHILE           reduce using rule 96 (statement_do -> DO statement_list END .)
    FOR             reduce using rule 96 (statement_do -> DO statement_list END .)
    FUNCTION        reduce using rule 96 (statement_do -> DO statement_list END .)
    DO              reduce using rule 96 (statement_do -> DO statement_list END .)
    TRY             reduce using rule 96 (statement_do -> DO statement_list END .)
    MODULE          reduce using rule 96 (statement_do -> DO statement_list END .)
    BEGIN           reduce using rule 96 (statement_do -> DO statement_list END .)
    USING           reduce using rule 96 (statement_do -> DO statement_list END .)
    NUMBER          reduce using rule 96 (statement_do -> DO statement_list END .)
    MINUS           reduce using rule 96 (statement_do -> DO statement_list END .)
    LEFT_PAREN      reduce using rule 96 (statement_do -> DO statement_list END .)
    LEFT_BRACKET    reduce using rule 96 (statement_do -> DO statement_list END .)
    INTEGER         reduce using rule 96 (statement_do -> DO statement_list END .)
    $end            reduce using rule 96 (statement_do -> DO statement_list END .)
    END             reduce using rule 96 (statement_do -> DO statement_list END .)
    CATCH           reduce using rule 96 (statement_do -> DO statement_list END .)
    RETURN          reduce using rule 96 (statement_do -> DO statement_list END .)
    RIGHT_PAREN     reduce using rule 96 (statement_do -> DO statement_list END .)


state 174

    (98) statement_try -> TRY statement_list CATCH . IDENTIFIER statement_list END

    IDENTIFIER      shift and go to state 231


state 175


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 232
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 176

    (97) statement_begin -> BEGIN statement_list END .

    IDENTIFIER      reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    FUNCTIONS_JULIA reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    IF              reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    ELSEIF          reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    ELSE            reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    WHILE           reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    FOR             reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    FUNCTION        reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    DO              reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    TRY             reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    MODULE          reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    BEGIN           reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    USING           reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    NUMBER          reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    MINUS           reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    LEFT_PAREN      reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    LEFT_BRACKET    reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    INTEGER         reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    $end            reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    END             reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    CATCH           reduce using rule 97 (statement_begin -> BEGIN statement_list END .)
    RETURN          reduce using rule 97 (statement_begin -> BEGIN statement_list END .)


state 177

    (101) statement_using -> USING IDENTIFIER AS . IDENTIFIER

    IDENTIFIER      shift and go to state 233


state 178

    (84) identifierDecl -> identifierDecl COMMA IDENTIFIER assignment . LEFT_BRACKET array_elements RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 234


state 179

    (85) identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment . LEFT_BRACKET array_elements RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 235


state 180

    (77) assignment -> IDENTIFIER ASSIGN expression .

    FUNCTIONS_JULIA reduce using rule 77 (assignment -> IDENTIFIER ASSIGN expression .)
    LEFT_BRACKET    reduce using rule 77 (assignment -> IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 77 (assignment -> IDENTIFIER ASSIGN expression .)
    NUMBER          reduce using rule 77 (assignment -> IDENTIFIER ASSIGN expression .)
    MINUS           reduce using rule 77 (assignment -> IDENTIFIER ASSIGN expression .)
    LEFT_PAREN      reduce using rule 77 (assignment -> IDENTIFIER ASSIGN expression .)
    STRING          reduce using rule 77 (assignment -> IDENTIFIER ASSIGN expression .)
    BOOLEAN         reduce using rule 77 (assignment -> IDENTIFIER ASSIGN expression .)
    ADMIRATION      reduce using rule 77 (assignment -> IDENTIFIER ASSIGN expression .)


state 181


    DO              shift and go to state 39
    RIGHT_PAREN     reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    argument_list                  shift and go to state 236
    expression                     shift and go to state 124
    statement_do                   shift and go to state 125
    empty                          shift and go to state 126
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 182


    IDENTIFIER      shift and go to state 237


state 183


    RIGHT_PAREN     shift and go to state 141
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    operator_arithmetic            shift and go to state 62
    relation                       shift and go to state 165

state 184


    RIGHT_PAREN     shift and go to state 214
    MULTIPLY        shift and go to state 164
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 163

state 185


    RIGHT_BRACKET   shift and go to state 238
    COMMA           shift and go to state 239


state 186


  ! shift/reduce conflict for RIGHT_BRACKET resolved as shift
    RIGHT_BRACKET   shift and go to state 143
    COMMA           reduce using rule 86 (array_elements -> expression_number .)
    SEMICOLON       shift and go to state 240
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

  ! RIGHT_BRACKET   [ reduce using rule 86 (array_elements -> expression_number .) ]

    operator_arithmetic            shift and go to state 62
    relation                       shift and go to state 165

state 187


    RIGHT_BRACKET   reduce using rule 87 (array_elements -> expression_string .)
    COMMA           reduce using rule 87 (array_elements -> expression_string .)
    MULTIPLY        shift and go to state 164
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 163

state 188


    RIGHT_BRACKET   reduce using rule 88 (array_elements -> expression_boolean .)
    COMMA           reduce using rule 88 (array_elements -> expression_boolean .)
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 157

state 189

    (89) array_elements -> empty .

    RIGHT_BRACKET   reduce using rule 89 (array_elements -> empty .)
    COMMA           reduce using rule 89 (array_elements -> empty .)


state 190


  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    INTEGER         reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 95 (statement_call_function -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOT             reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PLUS            reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MULTIPLY        reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PERCENT         reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)

  ! FUNCTIONS_JULIA [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! MINUS           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]


state 191


    DO              shift and go to state 39
    RIGHT_PAREN     reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    expression                     shift and go to state 124
    argument_list                  shift and go to state 241
    statement_do                   shift and go to state 125
    empty                          shift and go to state 126
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 192


    RIGHT_BRACKET   shift and go to state 242
    COMMA           shift and go to state 243


state 193


    RIGHT_BRACKET   reduce using rule 47 (array_values -> INTEGER .)
    COMMA           reduce using rule 47 (array_values -> INTEGER .)


state 194


    RIGHT_BRACKET   reduce using rule 49 (array_values -> NUMBER .)
    COMMA           reduce using rule 49 (array_values -> NUMBER .)


state 195


    RIGHT_PAREN     shift and go to state 244


state 196


    COMMA           shift and go to state 245


state 197


    LEFT_BRACKET    shift and go to state 246


state 198


    LEFT_BRACKET    shift and go to state 249
    FUNCTIONS_JULIA shift and go to state 247

    statement_function_julia       shift and go to state 248

state 199


    IDENTIFIER      reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    INTEGER         reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    COMMA           reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)
    NEWLINE         reduce using rule 60 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN argument_list RIGHT_PAREN .)


state 200


    IDENTIFIER      reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    IF              reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    ELSEIF          reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    ELSE            reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    WHILE           reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    FOR             reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    FUNCTION        reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    DO              reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    TRY             reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    MODULE          reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    BEGIN           reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    USING           reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    NUMBER          reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    MINUS           reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    INTEGER         reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    $end            reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    END             reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    CATCH           reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    RETURN          reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    COMMA           reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)
    NEWLINE         reduce using rule 61 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER RIGHT_PAREN .)


state 201


    INTEGER         shift and go to state 250


state 202

    (63) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .

    IDENTIFIER      reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    IF              reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    ELSEIF          reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    ELSE            reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    WHILE           reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FOR             reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FUNCTION        reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    DO              reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    TRY             reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    MODULE          reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    BEGIN           reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    USING           reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    NUMBER          reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    MINUS           reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    INTEGER         reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    $end            reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    END             reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    CATCH           reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    RETURN          reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    COMMA           reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    NEWLINE         reduce using rule 63 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)


state 203

    (126) expression_number -> IDENTIFIER LEFT_PAREN argument_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 251


state 204

    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 252

state 205


    STRING          shift and go to state 100
    LEFT_PAREN      shift and go to state 217

    expression_string              shift and go to state 253

state 206

    RIGHT_PAREN     shift and go to state 214
    MULTIPLY        shift and go to state 164


state 207


    LEFT_PAREN      shift and go to state 94
    IDENTIFIER      shift and go to state 95
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    STRING          shift and go to state 100
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_BRACKET    shift and go to state 27

    expression_boolean             shift and go to state 254
    expression_string              shift and go to state 98
    expression_number              shift and go to state 99

state 208


    LEFT_BRACE      shift and go to state 255


state 209


    IDENTIFIER      reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    FUNCTIONS_JULIA reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    IF              reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    ELSEIF          reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    ELSE            reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    WHILE           reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    FOR             reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    FUNCTION        reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    DO              reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    TRY             reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    MODULE          reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    BEGIN           reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    USING           reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    NUMBER          reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    MINUS           reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    LEFT_PAREN      reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    LEFT_BRACKET    reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    INTEGER         reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    $end            reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    END             reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    CATCH           reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)
    RETURN          reduce using rule 68 (if_statement -> IF expression_boolean statement_list END .)


state 210


  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 256
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 211


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 258
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 10 (statement -> elseif_block .) ]
  ! ELSE            [ reduce using rule 10 (statement -> elseif_block .) ]
  ! ELSEIF          [ reduce using rule 10 (statement -> elseif_block .) ]
  ! IDENTIFIER      [ reduce using rule 10 (statement -> elseif_block .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 10 (statement -> elseif_block .) ]
  ! IF              [ reduce using rule 10 (statement -> elseif_block .) ]
  ! WHILE           [ reduce using rule 10 (statement -> elseif_block .) ]
  ! FOR             [ reduce using rule 10 (statement -> elseif_block .) ]
  ! FUNCTION        [ reduce using rule 10 (statement -> elseif_block .) ]
  ! DO              [ reduce using rule 10 (statement -> elseif_block .) ]
  ! TRY             [ reduce using rule 10 (statement -> elseif_block .) ]
  ! MODULE          [ reduce using rule 10 (statement -> elseif_block .) ]
  ! BEGIN           [ reduce using rule 10 (statement -> elseif_block .) ]
  ! USING           [ reduce using rule 10 (statement -> elseif_block .) ]
  ! NUMBER          [ reduce using rule 10 (statement -> elseif_block .) ]
  ! MINUS           [ reduce using rule 10 (statement -> elseif_block .) ]
  ! LEFT_PAREN      [ reduce using rule 10 (statement -> elseif_block .) ]
  ! LEFT_BRACKET    [ reduce using rule 10 (statement -> elseif_block .) ]
  ! INTEGER         [ reduce using rule 10 (statement -> elseif_block .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 257
    elseif_block                   shift and go to state 9
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 212


  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for ANDSYM resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for ORSYM resolved as shift
    IDENTIFIER      reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    IF              reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    ELSEIF          reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    ELSE            reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    WHILE           reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    FOR             reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    FUNCTION        reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    DO              reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    TRY             reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    MODULE          reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    BEGIN           reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    USING           reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    NUMBER          reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    MINUS           reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    LEFT_PAREN      reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    LEFT_BRACKET    reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    INTEGER         reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    END             reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    COMMA           reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    NEWLINE         reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    $end            reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    CATCH           reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    RETURN          reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    RIGHT_PAREN     reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    STRING          reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    BOOLEAN         reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    ADMIRATION      reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    RIGHT_BRACKET   reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    DOUBLEDOT       reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .)
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

  ! LESS_THAN       [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! GREATER_THAN    [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! EQUALS          [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! NOT_EQUALS      [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! AND             [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! ANDSYM          [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! OR              [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! ORSYM           [ reduce using rule 109 (expression_boolean -> expression_boolean relation expression_boolean .) ]

    relation                       shift and go to state 157

state 213


    LESS_THAN       reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    EQUALS          reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    AND             reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ANDSYM          reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    OR              reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ORSYM           reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    IF              reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ELSEIF          reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ELSE            reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    WHILE           reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    FOR             reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    FUNCTION        reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    DO              reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    TRY             reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    MODULE          reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    BEGIN           reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    USING           reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    NUMBER          reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    MINUS           reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    INTEGER         reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    END             reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    COMMA           reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    NEWLINE         reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    $end            reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    CATCH           reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    RETURN          reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    STRING          reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    BOOLEAN         reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    ADMIRATION      reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 105 (expression_boolean -> LEFT_PAREN expression_boolean RIGHT_PAREN .)


state 214

    (130) expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .

    MULTIPLY        reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    LESS_THAN       reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    EQUALS          reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    AND             reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ANDSYM          reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    OR              reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ORSYM           reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    COMMA           reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    NEWLINE         reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    IF              reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ELSEIF          reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ELSE            reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    WHILE           reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    FOR             reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    FUNCTION        reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    DO              reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    TRY             reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    MODULE          reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    BEGIN           reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    USING           reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    NUMBER          reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    MINUS           reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    INTEGER         reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    $end            reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    END             reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    CATCH           reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    RETURN          reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    STRING          reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    BOOLEAN         reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    ADMIRATION      reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 130 (expression_string -> LEFT_PAREN expression_string RIGHT_PAREN .)


state 215


    RIGHT_PAREN     shift and go to state 259


state 216


    LESS_THAN       reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    LESS_THAN_OR_EQUAL reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    GREATER_THAN    reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    GREATER_THAN_OR_EQUAL reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    EQUALS          reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    NOT_EQUALS      reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    AND             reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    ANDSYM          reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    OR              reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    ORSYM           reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    IDENTIFIER      reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    FUNCTIONS_JULIA reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    IF              reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    ELSEIF          reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    ELSE            reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    WHILE           reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    FOR             reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    FUNCTION        reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    DO              reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    TRY             reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    MODULE          reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    BEGIN           reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    USING           reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    NUMBER          reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    MINUS           reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    LEFT_PAREN      reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    LEFT_BRACKET    reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    INTEGER         reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    END             reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    COMMA           reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    NEWLINE         reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    $end            reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    CATCH           reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    RETURN          reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    RIGHT_PAREN     reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    STRING          reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    BOOLEAN         reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    ADMIRATION      reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    RIGHT_BRACKET   reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    DOUBLEDOT       reduce using rule 111 (expression_boolean -> expression_string relation expression_string .)
    MULTIPLY        shift and go to state 164


state 217


    STRING          shift and go to state 100
    LEFT_PAREN      shift and go to state 217

    expression_string              shift and go to state 206

state 218


    MULTIPLY        reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    LESS_THAN       reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    LESS_THAN_OR_EQUAL reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    GREATER_THAN    reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    GREATER_THAN_OR_EQUAL reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    EQUALS          reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    NOT_EQUALS      reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    AND             reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    ANDSYM          reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    OR              reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    ORSYM           reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    COMMA           reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    NEWLINE         reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    IDENTIFIER      reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    FUNCTIONS_JULIA reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    IF              reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    ELSEIF          reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    ELSE            reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    WHILE           reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    FOR             reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    FUNCTION        reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    DO              reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    TRY             reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    MODULE          reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    BEGIN           reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    USING           reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    NUMBER          reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    MINUS           reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    LEFT_PAREN      reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    LEFT_BRACKET    reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    INTEGER         reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    $end            reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    END             reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    CATCH           reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    RETURN          reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    RIGHT_PAREN     reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    STRING          reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    BOOLEAN         reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    ADMIRATION      reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    RIGHT_BRACKET   reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)
    DOUBLEDOT       reduce using rule 132 (expression_string -> expression_string MULTIPLY expression_string .)

  ! MULTIPLY        [ shift and go to state 164 ]


state 219


    MULTIPLY        reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    LESS_THAN       reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    GREATER_THAN    reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    EQUALS          reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    NOT_EQUALS      reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    AND             reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    ANDSYM          reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    OR              reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    ORSYM           reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    COMMA           reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    NEWLINE         reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    IDENTIFIER      reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    FUNCTIONS_JULIA reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    IF              reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    ELSEIF          reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    ELSE            reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    WHILE           reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    FOR             reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    FUNCTION        reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    DO              reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    TRY             reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    MODULE          reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    BEGIN           reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    USING           reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    NUMBER          reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    MINUS           reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    LEFT_PAREN      reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    LEFT_BRACKET    reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    INTEGER         reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    $end            reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    END             reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    CATCH           reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    RETURN          reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    RIGHT_PAREN     reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    STRING          reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    BOOLEAN         reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    ADMIRATION      reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    RIGHT_BRACKET   reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    DOUBLEDOT       reduce using rule 131 (expression_string -> expression_string MULTIPLY expression_number .)
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

  ! DOUBLEDOT       [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 65 ]
  ! MULTIPLY        [ shift and go to state 66 ]

    operator_arithmetic            shift and go to state 62

state 220


  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LESS_THAN       reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    GREATER_THAN    reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    EQUALS          reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    NOT_EQUALS      reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    AND             reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    ANDSYM          reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    OR              reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    ORSYM           reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    IDENTIFIER      reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    FUNCTIONS_JULIA reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    IF              reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    ELSEIF          reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    ELSE            reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    WHILE           reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    FOR             reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    FUNCTION        reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    DO              reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    TRY             reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    MODULE          reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    BEGIN           reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    USING           reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    NUMBER          reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    LEFT_PAREN      reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    LEFT_BRACKET    reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    INTEGER         reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    END             reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    COMMA           reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    NEWLINE         reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    $end            reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    CATCH           reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    RETURN          reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    RIGHT_PAREN     reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    STRING          reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    BOOLEAN         reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    ADMIRATION      reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    RIGHT_BRACKET   reduce using rule 112 (expression_boolean -> expression_number relation expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

  ! MINUS           [ reduce using rule 112 (expression_boolean -> expression_number relation expression_number .) ]
  ! DOUBLEDOT       [ reduce using rule 112 (expression_boolean -> expression_number relation expression_number .) ]

    operator_arithmetic            shift and go to state 62

state 221


    IDENTIFIER      reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    FUNCTIONS_JULIA reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    IF              reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    ELSEIF          reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    ELSE            reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    WHILE           reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    FOR             reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    FUNCTION        reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    DO              reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    TRY             reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    MODULE          reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    BEGIN           reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    USING           reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    NUMBER          reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    MINUS           reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    LEFT_PAREN      reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    LEFT_BRACKET    reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    INTEGER         reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    $end            reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    END             reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    CATCH           reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)
    RETURN          reduce using rule 72 (elseif_block -> ELSEIF expression_boolean statement_list END .)


state 222


  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 260
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 223


  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 261
    ELSE            reduce using rule 10 (statement -> elseif_block .)
    ELSEIF          reduce using rule 10 (statement -> elseif_block .)
    IDENTIFIER      reduce using rule 10 (statement -> elseif_block .)
    FUNCTIONS_JULIA reduce using rule 10 (statement -> elseif_block .)
    IF              reduce using rule 10 (statement -> elseif_block .)
    WHILE           reduce using rule 10 (statement -> elseif_block .)
    FOR             reduce using rule 10 (statement -> elseif_block .)
    FUNCTION        reduce using rule 10 (statement -> elseif_block .)
    DO              reduce using rule 10 (statement -> elseif_block .)
    TRY             reduce using rule 10 (statement -> elseif_block .)
    MODULE          reduce using rule 10 (statement -> elseif_block .)
    BEGIN           reduce using rule 10 (statement -> elseif_block .)
    USING           reduce using rule 10 (statement -> elseif_block .)
    NUMBER          reduce using rule 10 (statement -> elseif_block .)
    MINUS           reduce using rule 10 (statement -> elseif_block .)
    LEFT_PAREN      reduce using rule 10 (statement -> elseif_block .)
    LEFT_BRACKET    reduce using rule 10 (statement -> elseif_block .)
    INTEGER         reduce using rule 10 (statement -> elseif_block .)

  ! END             [ reduce using rule 10 (statement -> elseif_block .) ]


state 224

    (78) while_statement -> WHILE expression_boolean statement_list END .

    IDENTIFIER      reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    FUNCTIONS_JULIA reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    IF              reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    ELSEIF          reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    ELSE            reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    WHILE           reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    FOR             reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    FUNCTION        reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    DO              reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    TRY             reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    MODULE          reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    BEGIN           reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    USING           reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    NUMBER          reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    MINUS           reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    LEFT_PAREN      reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    LEFT_BRACKET    reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    INTEGER         reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    $end            reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    END             reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    CATCH           reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)
    RETURN          reduce using rule 78 (while_statement -> WHILE expression_boolean statement_list END .)


state 225

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 262
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 226


    DOUBLEDOT       shift and go to state 263


state 227


  ! shift/reduce conflict for DOUBLEDOT resolved as shift
    DOUBLEDOT       shift and go to state 264
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

  ! DOUBLEDOT       [ reduce using rule 102 (expression -> expression_number .) ]

    operator_arithmetic            shift and go to state 62
    relation                       shift and go to state 165

state 228


    RIGHT_BRACKET   shift and go to state 265
    COMMA           shift and go to state 239


state 229


    RIGHT_BRACKET   reduce using rule 86 (array_elements -> expression_number .)
    COMMA           reduce using rule 86 (array_elements -> expression_number .)
    SEMICOLON       shift and go to state 240
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    operator_arithmetic            shift and go to state 62
    relation                       shift and go to state 165

state 230

    RIGHT_PAREN     shift and go to state 266


state 231


  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 267
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 232

    (99) statement_module -> MODULE IDENTIFIER statement_list END .

    IDENTIFIER      reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    FUNCTIONS_JULIA reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    IF              reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    ELSEIF          reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    ELSE            reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    WHILE           reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    FOR             reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    FUNCTION        reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    DO              reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    TRY             reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    MODULE          reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    BEGIN           reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    USING           reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    NUMBER          reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    MINUS           reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    LEFT_PAREN      reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    LEFT_BRACKET    reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    INTEGER         reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    $end            reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    END             reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    CATCH           reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)
    RETURN          reduce using rule 99 (statement_module -> MODULE IDENTIFIER statement_list END .)


state 233

    (101) statement_using -> USING IDENTIFIER AS IDENTIFIER .

    IDENTIFIER      reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    FUNCTIONS_JULIA reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    IF              reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    ELSEIF          reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    ELSE            reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    WHILE           reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    FOR             reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    FUNCTION        reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    DO              reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    TRY             reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    MODULE          reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    BEGIN           reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    USING           reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    NUMBER          reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    MINUS           reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    LEFT_PAREN      reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    INTEGER         reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    $end            reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    END             reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    CATCH           reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)
    RETURN          reduce using rule 101 (statement_using -> USING IDENTIFIER AS IDENTIFIER .)


state 234

    (84) identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET . array_elements RIGHT_BRACKET
    (86) array_elements -> . expression_number
    (87) array_elements -> . expression_string
    (88) array_elements -> . expression_boolean
    (89) array_elements -> . empty
    (90) array_elements -> . array_elements COMMA expression_number
    (91) array_elements -> . expression_number SEMICOLON expression_number
    (92) array_elements -> . array_elements COMMA expression_string
    (93) array_elements -> . array_elements COMMA expression_boolean
    (120) expression_number -> . IDENTIFIER
    (121) expression_number -> . NUMBER
    (122) expression_number -> . expression_number operator_arithmetic expression_number
    (123) expression_number -> . expression_number DOUBLEDOT expression_number
    (124) expression_number -> . expression_number DOT expression_number
    (125) expression_number -> . MINUS expression_number
    (126) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (127) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (128) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (129) expression_string -> . STRING
    (130) expression_string -> . LEFT_PAREN expression_string RIGHT_PAREN
    (131) expression_string -> . expression_string MULTIPLY expression_number
    (132) expression_string -> . expression_string MULTIPLY expression_string
    (105) expression_boolean -> . LEFT_PAREN expression_boolean RIGHT_PAREN
    (106) expression_boolean -> . IDENTIFIER
    (107) expression_boolean -> . BOOLEAN
    (108) expression_boolean -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (109) expression_boolean -> . expression_boolean relation expression_boolean
    (110) expression_boolean -> . ADMIRATION expression_boolean
    (111) expression_boolean -> . expression_string relation expression_string
    (112) expression_boolean -> . expression_number relation expression_number
    (94) empty -> .

    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    RIGHT_BRACKET   reduce using rule 94 (empty -> .)
    COMMA           reduce using rule 94 (empty -> .)

    array_elements                 shift and go to state 268
    expression_number              shift and go to state 229
    expression_string              shift and go to state 187
    expression_boolean             shift and go to state 188
    empty                          shift and go to state 189

state 235


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    RIGHT_BRACKET   reduce using rule 94 (empty -> .)
    COMMA           reduce using rule 94 (empty -> .)

    array_elements                 shift and go to state 269
    expression_number              shift and go to state 229
    expression_string              shift and go to state 187
    expression_boolean             shift and go to state 188
    empty                          shift and go to state 189

state 236


    RIGHT_PAREN     shift and go to state 270


state 237


    RIGHT_PAREN     shift and go to state 271
    COMMA           shift and go to state 272


state 238

    (83) identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .

    COMMA           reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NEWLINE         reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTIONS_JULIA reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IF              reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSEIF          reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSE            reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    WHILE           reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FOR             reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTION        reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    DO              reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    TRY             reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MODULE          reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    BEGIN           reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    USING           reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NUMBER          reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MINUS           reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    INTEGER         reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    $end            reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    END             reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    CATCH           reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RETURN          reduce using rule 83 (identifierDecl -> IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 239

    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    expression_number              shift and go to state 273
    expression_string              shift and go to state 274
    expression_boolean             shift and go to state 275

state 240


    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 276

state 241

    (65) argument_list -> expression COMMA argument_list .

    RIGHT_PAREN     reduce using rule 65 (argument_list -> expression COMMA argument_list .)


state 242


    IDENTIFIER      reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    FUNCTIONS_JULIA reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    IF              reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    ELSEIF          reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    ELSE            reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    WHILE           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    FOR             reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    FUNCTION        reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    DO              reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    TRY             reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    MODULE          reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    BEGIN           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    USING           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    NUMBER          reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    MINUS           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    INTEGER         reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    $end            reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    END             reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    CATCH           reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)
    RETURN          reduce using rule 45 (array_estatement -> IDENTIFIER ASSIGN LEFT_BRACKET array_values RIGHT_BRACKET .)


state 243


    INTEGER         shift and go to state 277
    NUMBER          shift and go to state 278


state 244


    ARROW           shift and go to state 279


state 245


    INTEGER         shift and go to state 280


state 246


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    RIGHT_BRACKET   reduce using rule 94 (empty -> .)
    COMMA           reduce using rule 94 (empty -> .)

    array_elements                 shift and go to state 281
    expression_number              shift and go to state 229
    expression_string              shift and go to state 187
    expression_boolean             shift and go to state 188
    empty                          shift and go to state 189

state 247

    (60) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN argument_list RIGHT_PAREN
    (61) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN INTEGER RIGHT_PAREN
    (62) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN
    (63) statement_function_julia -> FUNCTIONS_JULIA . LEFT_PAREN IDENTIFIER RIGHT_PAREN

    LEFT_PAREN      shift and go to state 72


state 248

    COMMA           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    NEWLINE         reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    IDENTIFIER      reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    FUNCTIONS_JULIA reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    IF              reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    ELSEIF          reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    ELSE            reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    WHILE           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    FOR             reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    FUNCTION        reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    DO              reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    TRY             reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    MODULE          reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    BEGIN           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    USING           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    NUMBER          reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    MINUS           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    LEFT_PAREN      reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    LEFT_BRACKET    reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    INTEGER         reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    $end            reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    END             reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    CATCH           reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)
    RETURN          reduce using rule 30 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN statement_function_julia .)


state 249


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97
    RIGHT_BRACKET   reduce using rule 94 (empty -> .)
    COMMA           reduce using rule 94 (empty -> .)

    array_elements                 shift and go to state 282
    expression_number              shift and go to state 229
    expression_string              shift and go to state 187
    expression_boolean             shift and go to state 188
    empty                          shift and go to state 189

state 250


    RIGHT_PAREN     shift and go to state 283


state 251


    RIGHT_PAREN     reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOT             reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PLUS            reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MULTIPLY        reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PERCENT         reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN       reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EQUALS          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    AND             reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ANDSYM          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    OR              reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ORSYM           reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    COMMA           reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NEWLINE         reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    INTEGER         reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    STRING          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BOOLEAN         reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ADMIRATION      reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SEMICOLON       reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)


state 252

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    NEWLINE         reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    IDENTIFIER      reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    FUNCTIONS_JULIA reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    IF              reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    ELSEIF          reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    ELSE            reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    WHILE           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    FOR             reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    FUNCTION        reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    DO              reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    TRY             reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    MODULE          reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    BEGIN           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    USING           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    NUMBER          reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    LEFT_PAREN      reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    LEFT_BRACKET    reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    INTEGER         reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    $end            reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    END             reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    CATCH           reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    RETURN          reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

  ! MINUS           [ reduce using rule 36 (expression_number_list -> expression_number_list COMMA expression_number .) ]

    operator_arithmetic            shift and go to state 62

state 253


    COMMA           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    NEWLINE         reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    IDENTIFIER      reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    FUNCTIONS_JULIA reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    IF              reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    ELSEIF          reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    ELSE            reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    WHILE           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    FOR             reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    FUNCTION        reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    DO              reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    TRY             reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    MODULE          reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    BEGIN           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    USING           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    NUMBER          reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    MINUS           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    LEFT_PAREN      reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    LEFT_BRACKET    reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    INTEGER         reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    $end            reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    END             reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    CATCH           reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    RETURN          reduce using rule 38 (expression_string_list -> expression_string_list COMMA expression_string .)
    MULTIPLY        shift and go to state 164


state 254


    COMMA           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    NEWLINE         reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    IDENTIFIER      reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    FUNCTIONS_JULIA reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    IF              reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    ELSEIF          reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    ELSE            reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    WHILE           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    FOR             reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    FUNCTION        reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    DO              reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    TRY             reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    MODULE          reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    BEGIN           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    USING           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    NUMBER          reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    MINUS           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    LEFT_PAREN      reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    LEFT_BRACKET    reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    INTEGER         reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    $end            reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    END             reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    CATCH           reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    RETURN          reduce using rule 40 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 157

state 255


    IDENTIFIER      shift and go to state 284


state 256


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 285
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 257

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ELSE            shift and go to state 286
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    elseif_block                   shift and go to state 9
    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 258

    (71) if_statement -> IF expression_boolean statement_list elseif_block END .

    IDENTIFIER      reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    FUNCTIONS_JULIA reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    IF              reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    ELSEIF          reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    ELSE            reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    WHILE           reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    FOR             reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    FUNCTION        reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    DO              reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    TRY             reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    MODULE          reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    BEGIN           reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    USING           reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    NUMBER          reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    MINUS           reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    LEFT_PAREN      reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    LEFT_BRACKET    reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    INTEGER         reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    $end            reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    END             reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    CATCH           reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)
    RETURN          reduce using rule 71 (if_statement -> IF expression_boolean statement_list elseif_block END .)


state 259


  ! reduce/reduce conflict for DOUBLEDOT resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for EQUALS resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for AND resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for OR resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ORSYM resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN       reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EQUALS          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    AND             reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ANDSYM          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    OR              reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ORSYM           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    INTEGER         reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    COMMA           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NEWLINE         reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    STRING          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BOOLEAN         reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ADMIRATION      reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOT             reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PLUS            reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MULTIPLY        reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PERCENT         reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)

  ! DOUBLEDOT       [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LESS_THAN       [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! GREATER_THAN    [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! EQUALS          [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! NOT_EQUALS      [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! AND             [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ANDSYM          [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! OR              [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ORSYM           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! MINUS           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! RIGHT_PAREN     [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]


state 260


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 287
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 261

    (74) elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .

    IDENTIFIER      reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    FUNCTIONS_JULIA reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    IF              reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    ELSEIF          reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    ELSE            reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    WHILE           reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    FOR             reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    FUNCTION        reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    DO              reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    TRY             reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    MODULE          reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    BEGIN           reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    USING           reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    NUMBER          reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    MINUS           reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    LEFT_PAREN      reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    LEFT_BRACKET    reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    INTEGER         reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    $end            reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    END             reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    CATCH           reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)
    RETURN          reduce using rule 74 (elseif_block -> ELSEIF expression_boolean statement_list elseif_block END .)


state 262


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 288
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 263

    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 289

state 264


    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

    expression_number              shift and go to state 290

state 265


  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 291
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 266

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)
    RETURN          reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 292
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 267


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 293
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 268

    RIGHT_BRACKET   shift and go to state 294
    COMMA           shift and go to state 239


state 269


    RIGHT_BRACKET   shift and go to state 295
    COMMA           shift and go to state 239


state 270


  ! reduce/reduce conflict for LESS_THAN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUAL resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for EQUALS resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for AND resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for OR resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ORSYM resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for IF resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for DO resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for TRY resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for MODULE resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for BEGIN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for USING resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for NUMBER resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for INTEGER resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for $end resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for END resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for CATCH resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for ADMIRATION resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for RIGHT_BRACKET resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
  ! reduce/reduce conflict for DOUBLEDOT resolved using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOT             reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PLUS            reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MULTIPLY        reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    PERCENT         reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SQUAREROOT      reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    SEMICOLON       reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN       reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LESS_THAN_OR_EQUAL reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    GREATER_THAN_OR_EQUAL reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    EQUALS          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    AND             reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ANDSYM          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    OR              reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ORSYM           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    COMMA           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NEWLINE         reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    IF              reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSEIF          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ELSE            reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    WHILE           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FOR             reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DO              reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    TRY             reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MODULE          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BEGIN           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    USING           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    NUMBER          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    MINUS           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    INTEGER         reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    $end            reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    END             reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    CATCH           reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RETURN          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    STRING          reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    BOOLEAN         reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    ADMIRATION      reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)
    DOUBLEDOT       reduce using rule 108 (expression_boolean -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .)

  ! DOUBLEDOT       [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! MINUS           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LESS_THAN       [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LESS_THAN_OR_EQUAL [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! GREATER_THAN    [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! EQUALS          [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! NOT_EQUALS      [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! AND             [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ANDSYM          [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! OR              [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ORSYM           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! COMMA           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! NEWLINE         [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! IDENTIFIER      [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! IF              [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ELSEIF          [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ELSE            [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! WHILE           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! FOR             [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! FUNCTION        [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! DO              [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! TRY             [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! MODULE          [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! BEGIN           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! USING           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! NUMBER          [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LEFT_PAREN      [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! LEFT_BRACKET    [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! INTEGER         [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! $end            [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! END             [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! CATCH           [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! RETURN          [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! RIGHT_PAREN     [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! STRING          [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! BOOLEAN         [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! ADMIRATION      [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]
  ! RIGHT_BRACKET   [ reduce using rule 126 (expression_number -> IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN .) ]


state 271

    (28) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .

    COMMA           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    NEWLINE         reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    IF              reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    ELSEIF          reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    ELSE            reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    WHILE           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FOR             reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    FUNCTION        reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    DO              reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    TRY             reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    MODULE          reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    BEGIN           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    USING           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    NUMBER          reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    MINUS           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    INTEGER         reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    $end            reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    END             reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    CATCH           reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)
    RETURN          reduce using rule 28 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER RIGHT_PAREN .)


state 272

    (29) identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA . IDENTIFIER RIGHT_PAREN

    IDENTIFIER      shift and go to state 296


state 273


    RIGHT_BRACKET   reduce using rule 90 (array_elements -> array_elements COMMA expression_number .)
    COMMA           reduce using rule 90 (array_elements -> array_elements COMMA expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    operator_arithmetic            shift and go to state 62
    relation                       shift and go to state 165

state 274

    RIGHT_BRACKET   reduce using rule 92 (array_elements -> array_elements COMMA expression_string .)
    COMMA           reduce using rule 92 (array_elements -> array_elements COMMA expression_string .)
    MULTIPLY        shift and go to state 164
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 163

state 275


    RIGHT_BRACKET   reduce using rule 93 (array_elements -> array_elements COMMA expression_boolean .)
    COMMA           reduce using rule 93 (array_elements -> array_elements COMMA expression_boolean .)
    LESS_THAN       shift and go to state 73
    LESS_THAN_OR_EQUAL shift and go to state 74
    GREATER_THAN    shift and go to state 75
    GREATER_THAN_OR_EQUAL shift and go to state 76
    EQUALS          shift and go to state 77
    NOT_EQUALS      shift and go to state 78
    AND             shift and go to state 79
    ANDSYM          shift and go to state 80
    OR              shift and go to state 81
    ORSYM           shift and go to state 82

    relation                       shift and go to state 157

state 276


    RIGHT_BRACKET   reduce using rule 91 (array_elements -> expression_number SEMICOLON expression_number .)
    COMMA           reduce using rule 91 (array_elements -> expression_number SEMICOLON expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70

    operator_arithmetic            shift and go to state 62

state 277


    RIGHT_BRACKET   reduce using rule 46 (array_values -> array_values COMMA INTEGER .)
    COMMA           reduce using rule 46 (array_values -> array_values COMMA INTEGER .)


state 278


    RIGHT_BRACKET   reduce using rule 48 (array_values -> array_values COMMA NUMBER .)
    COMMA           reduce using rule 48 (array_values -> array_values COMMA NUMBER .)


state 279


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    expression                     shift and go to state 297
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 280

    (50) array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER . RIGHT_BRACE DOUBLEDOT array_content_julia

    RIGHT_BRACE     shift and go to state 298


state 281


    RIGHT_BRACKET   shift and go to state 299
    COMMA           shift and go to state 239


state 282


    RIGHT_BRACKET   shift and go to state 300
    COMMA           shift and go to state 239


state 283

    (62) statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .

    IDENTIFIER      reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    IF              reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    ELSEIF          reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    ELSE            reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    WHILE           reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    FOR             reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    FUNCTION        reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    DO              reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    TRY             reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    MODULE          reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    BEGIN           reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    USING           reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    NUMBER          reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    MINUS           reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    INTEGER         reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    $end            reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    END             reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    CATCH           reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    RETURN          reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    COMMA           reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)
    NEWLINE         reduce using rule 62 (statement_function_julia -> FUNCTIONS_JULIA LEFT_PAREN INTEGER DOT INTEGER RIGHT_PAREN .)


state 284

    (51) array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER . COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia

    COMMA           shift and go to state 301


state 285

    (69) if_statement -> IF expression_boolean statement_list ELSE statement_list END .
    (75) else_statement -> ELSE statement_list END .

  ! reduce/reduce conflict for END resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSE resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IF resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for WHILE resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FOR resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for DO resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for TRY resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MODULE resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for BEGIN resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for USING resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for NUMBER resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MINUS resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for INTEGER resolved using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    IDENTIFIER      reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    FUNCTIONS_JULIA reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    IF              reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    ELSEIF          reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    ELSE            reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    WHILE           reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    FOR             reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    FUNCTION        reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    DO              reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    TRY             reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    MODULE          reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    BEGIN           reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    USING           reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    NUMBER          reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    MINUS           reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    LEFT_PAREN      reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    LEFT_BRACKET    reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    INTEGER         reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    $end            reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    END             reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    CATCH           reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)
    RETURN          reduce using rule 69 (if_statement -> IF expression_boolean statement_list ELSE statement_list END .)

  ! END             [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! ELSE            [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! ELSEIF          [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! IDENTIFIER      [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! IF              [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! WHILE           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! FOR             [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTION        [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! DO              [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! TRY             [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! MODULE          [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! BEGIN           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! USING           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! NUMBER          [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! MINUS           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_PAREN      [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_BRACKET    [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! INTEGER         [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]


state 286

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement_list                 shift and go to state 302
    elseif_block                   shift and go to state 9
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 287


  ! reduce/reduce conflict for END resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSE resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IF resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for WHILE resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FOR resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for DO resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for TRY resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MODULE resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for BEGIN resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for USING resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for NUMBER resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MINUS resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for INTEGER resolved using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    IDENTIFIER      reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    FUNCTIONS_JULIA reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    IF              reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    ELSEIF          reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    ELSE            reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    WHILE           reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    FOR             reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    FUNCTION        reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    DO              reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    TRY             reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    MODULE          reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    BEGIN           reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    USING           reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    NUMBER          reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    MINUS           reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    LEFT_PAREN      reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    LEFT_BRACKET    reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    INTEGER         reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    $end            reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    END             reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    CATCH           reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)
    RETURN          reduce using rule 73 (elseif_block -> ELSEIF expression_boolean statement_list ELSE statement_list END .)

  ! END             [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! ELSE            [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! ELSEIF          [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! IDENTIFIER      [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! IF              [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! WHILE           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! FOR             [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTION        [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! DO              [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! TRY             [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! MODULE          [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! BEGIN           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! USING           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! NUMBER          [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! MINUS           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_PAREN      [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_BRACKET    [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! INTEGER         [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]


state 288

    (79) while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .

    IDENTIFIER      reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    FUNCTIONS_JULIA reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    IF              reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    ELSEIF          reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    ELSE            reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    WHILE           reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    FOR             reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    FUNCTION        reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    DO              reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    TRY             reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    MODULE          reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    BEGIN           reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    USING           reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    NUMBER          reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    MINUS           reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    LEFT_PAREN      reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    LEFT_BRACKET    reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    INTEGER         reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    $end            reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    END             reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    CATCH           reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)
    RETURN          reduce using rule 79 (while_statement -> WHILE IDENTIFIER relation NUMBER statement_list END .)


state 289

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 304
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    expression_number              shift and go to state 24
    statement_list                 shift and go to state 303
    operator_arithmetic            shift and go to state 62
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 290


  ! shift/reduce conflict for DOUBLEDOT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    LESS_THAN       reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    LESS_THAN_OR_EQUAL reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    GREATER_THAN    reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    GREATER_THAN_OR_EQUAL reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    EQUALS          reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    NOT_EQUALS      reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    AND             reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ANDSYM          reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    OR              reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    ORSYM           reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .)
    DOUBLEDOT       shift and go to state 61
    DOT             shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 304
    MULTIPLY        shift and go to state 66
    DIVIDE          shift and go to state 67
    PERCENT         shift and go to state 68
    SQUAREROOT      shift and go to state 69
    EXPONENT        shift and go to state 70
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28
    END             reduce using rule 94 (empty -> .)

  ! DOUBLEDOT       [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! DOT             [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! PLUS            [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! MINUS           [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! MULTIPLY        [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! DIVIDE          [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! PERCENT         [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! EXPONENT        [ reduce using rule 123 (expression_number -> expression_number DOUBLEDOT expression_number .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    expression_number              shift and go to state 24
    statement_list                 shift and go to state 305
    operator_arithmetic            shift and go to state 62
    statement                      shift and go to state 5
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 291


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 306
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 292


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 307
    RETURN          shift and go to state 308
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! RETURN          [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 293

    (98) statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .

    IDENTIFIER      reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    FUNCTIONS_JULIA reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    IF              reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    ELSEIF          reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    ELSE            reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    WHILE           reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    FOR             reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    FUNCTION        reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    DO              reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    TRY             reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    MODULE          reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    BEGIN           reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    USING           reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    NUMBER          reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    MINUS           reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    LEFT_PAREN      reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    LEFT_BRACKET    reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    INTEGER         reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    $end            reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    END             reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    CATCH           reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)
    RETURN          reduce using rule 98 (statement_try -> TRY statement_list CATCH IDENTIFIER statement_list END .)


state 294

    (84) identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .

    COMMA           reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NEWLINE         reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTIONS_JULIA reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IF              reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSEIF          reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSE            reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    WHILE           reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FOR             reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTION        reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    DO              reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    TRY             reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MODULE          reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    BEGIN           reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    USING           reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NUMBER          reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MINUS           reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    INTEGER         reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    $end            reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    END             reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    CATCH           reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RETURN          reduce using rule 84 (identifierDecl -> identifierDecl COMMA IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 295

    (85) identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .

    COMMA           reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NEWLINE         reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTIONS_JULIA reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    IF              reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSEIF          reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    ELSE            reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    WHILE           reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FOR             reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    FUNCTION        reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    DO              reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    TRY             reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MODULE          reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    BEGIN           reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    USING           reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    NUMBER          reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    MINUS           reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    INTEGER         reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    $end            reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    END             reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    CATCH           reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)
    RETURN          reduce using rule 85 (identifierDecl -> identifierDecl NEWLINE IDENTIFIER assignment LEFT_BRACKET array_elements RIGHT_BRACKET .)


state 296


    RIGHT_PAREN     shift and go to state 309


state 297


    IDENTIFIER      reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    FUNCTIONS_JULIA reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    IF              reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    ELSEIF          reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    ELSE            reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    WHILE           reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    FOR             reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    FUNCTION        reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    DO              reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    TRY             reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    MODULE          reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    BEGIN           reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    USING           reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    NUMBER          reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    MINUS           reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    LEFT_PAREN      reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    LEFT_BRACKET    reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    INTEGER         reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    $end            reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    END             reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    CATCH           reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)
    RETURN          reduce using rule 59 (statement_function -> IDENTIFIER ASSIGN LEFT_PAREN argument_list RIGHT_PAREN ARROW expression .)


state 298


    DOUBLEDOT       shift and go to state 310


state 299


    COMMA           shift and go to state 311


state 300


    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

    array_estatement_julia         shift and go to state 312
    expression_number              shift and go to state 24
    values                         shift and go to state 30

state 301


    INTEGER         shift and go to state 313


state 302


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 314
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    elseif_block                   shift and go to state 9
    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    expression_number              shift and go to state 24
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 303


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 315
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    expression_number              shift and go to state 24
    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 304


    IDENTIFIER      reduce using rule 134 (operator_arithmetic -> MINUS .)
    NUMBER          reduce using rule 134 (operator_arithmetic -> MINUS .)
    MINUS           reduce using rule 134 (operator_arithmetic -> MINUS .)
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27

  ! LEFT_PAREN      [ reduce using rule 134 (operator_arithmetic -> MINUS .) ]
  ! LEFT_BRACKET    [ reduce using rule 134 (operator_arithmetic -> MINUS .) ]
  ! IDENTIFIER      [ shift and go to state 84 ]
  ! NUMBER          [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 31 ]

    expression_number              shift and go to state 92

state 305


  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for FUNCTIONS_JULIA resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    END             shift and go to state 316
    IDENTIFIER      shift and go to state 23
    FUNCTIONS_JULIA shift and go to state 25
    IF              shift and go to state 32
    ELSEIF          shift and go to state 34
    ELSE            shift and go to state 33
    WHILE           shift and go to state 35
    FOR             shift and go to state 37
    FUNCTION        shift and go to state 38
    DO              shift and go to state 39
    TRY             shift and go to state 40
    MODULE          shift and go to state 41
    BEGIN           shift and go to state 42
    USING           shift and go to state 43
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

  ! END             [ reduce using rule 94 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 94 (empty -> .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 94 (empty -> .) ]
  ! IF              [ reduce using rule 94 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 94 (empty -> .) ]
  ! ELSE            [ reduce using rule 94 (empty -> .) ]
  ! WHILE           [ reduce using rule 94 (empty -> .) ]
  ! FOR             [ reduce using rule 94 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 94 (empty -> .) ]
  ! DO              [ reduce using rule 94 (empty -> .) ]
  ! TRY             [ reduce using rule 94 (empty -> .) ]
  ! MODULE          [ reduce using rule 94 (empty -> .) ]
  ! BEGIN           [ reduce using rule 94 (empty -> .) ]
  ! USING           [ reduce using rule 94 (empty -> .) ]
  ! NUMBER          [ reduce using rule 94 (empty -> .) ]
  ! MINUS           [ reduce using rule 94 (empty -> .) ]
  ! LEFT_PAREN      [ reduce using rule 94 (empty -> .) ]
  ! LEFT_BRACKET    [ reduce using rule 94 (empty -> .) ]
  ! INTEGER         [ reduce using rule 94 (empty -> .) ]

    expression_number              shift and go to state 24
    statement                      shift and go to state 44
    identifierDecl                 shift and go to state 6
    array_estatement_julia         shift and go to state 7
    if_statement                   shift and go to state 8
    elseif_block                   shift and go to state 9
    else_statement                 shift and go to state 10
    while_statement                shift and go to state 11
    for_statement                  shift and go to state 12
    array_estatement               shift and go to state 13
    function_definition            shift and go to state 14
    statement_function             shift and go to state 15
    statement_call_function        shift and go to state 16
    statement_function_julia       shift and go to state 17
    statement_do                   shift and go to state 18
    statement_try                  shift and go to state 19
    statement_module               shift and go to state 20
    statement_begin                shift and go to state 21
    statement_using                shift and go to state 22
    identifierList                 shift and go to state 29
    values                         shift and go to state 30
    empty                          shift and go to state 45

state 306


    IDENTIFIER      reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    FUNCTIONS_JULIA reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    IF              reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    ELSEIF          reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    ELSE            reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    WHILE           reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    FOR             reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    FUNCTION        reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    DO              reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    TRY             reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    MODULE          reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    BEGIN           reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    USING           reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    NUMBER          reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    MINUS           reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    LEFT_PAREN      reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    LEFT_BRACKET    reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    INTEGER         reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    $end            reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    END             reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    CATCH           reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)
    RETURN          reduce using rule 82 (for_statement -> FOR IDENTIFIER LEFT_BRACKET array_elements RIGHT_BRACKET statement_list END .)


state 307

    (56) function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .
    (57) statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for IF resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for ELSE resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for WHILE resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for FOR resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for DO resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for TRY resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for MODULE resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for BEGIN resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for USING resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for NUMBER resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for MINUS resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for INTEGER resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for $end resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for END resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for CATCH resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
  ! reduce/reduce conflict for RETURN resolved using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    IDENTIFIER      reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    FUNCTIONS_JULIA reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    IF              reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    ELSEIF          reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    ELSE            reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    WHILE           reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    FOR             reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    FUNCTION        reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    DO              reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    TRY             reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    MODULE          reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    BEGIN           reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    USING           reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    NUMBER          reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    MINUS           reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    LEFT_PAREN      reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    LEFT_BRACKET    reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    INTEGER         reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    $end            reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    END             reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    CATCH           reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)
    RETURN          reduce using rule 56 (function_definition -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .)

  ! IDENTIFIER      [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! IF              [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! ELSEIF          [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! ELSE            [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! WHILE           [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! FOR             [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! FUNCTION        [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! DO              [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! TRY             [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! MODULE          [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! BEGIN           [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! USING           [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! NUMBER          [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! MINUS           [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! LEFT_PAREN      [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! LEFT_BRACKET    [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! INTEGER         [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! $end            [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! END             [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! CATCH           [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]
  ! RETURN          [ reduce using rule 57 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list END .) ]


state 308


    IDENTIFIER      shift and go to state 116
    NUMBER          shift and go to state 85
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 121
    LEFT_BRACKET    shift and go to state 27
    STRING          shift and go to state 100
    BOOLEAN         shift and go to state 96
    ADMIRATION      shift and go to state 97

    expression                     shift and go to state 317
    expression_number              shift and go to state 127
    expression_string              shift and go to state 128
    expression_boolean             shift and go to state 129

state 309


    COMMA           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    NEWLINE         reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    FUNCTIONS_JULIA reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    IF              reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    ELSEIF          reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    ELSE            reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    WHILE           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    FOR             reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    FUNCTION        reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    DO              reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    TRY             reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    MODULE          reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    BEGIN           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    USING           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    NUMBER          reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    MINUS           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    INTEGER         reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    $end            reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    END             reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    CATCH           reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)
    RETURN          reduce using rule 29 (identifierDecl -> IDENTIFIER assignment FUNCTIONS_JULIA LEFT_PAREN IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN .)


state 310


    INTEGER         shift and go to state 28
    NUMBER          shift and go to state 320

    array_content_julia            shift and go to state 318
    values                         shift and go to state 319

state 311


    FUNCTIONS_JULIA shift and go to state 321


state 312


    COMMA           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    NEWLINE         reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    IDENTIFIER      reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    FUNCTIONS_JULIA reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    IF              reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    ELSEIF          reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    ELSE            reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    WHILE           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    FOR             reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    FUNCTION        reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    DO              reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    TRY             reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    MODULE          reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    BEGIN           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    USING           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    NUMBER          reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    MINUS           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    LEFT_PAREN      reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    LEFT_BRACKET    reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    INTEGER         reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    $end            reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    END             reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    CATCH           reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)
    RETURN          reduce using rule 31 (identifierDecl -> FUNCTIONS_JULIA relation IDENTIFIER ASSIGN LEFT_BRACKET array_elements RIGHT_BRACKET array_estatement_julia .)


state 313


    RIGHT_BRACE     shift and go to state 322


state 314


  ! reduce/reduce conflict for ELSE resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTIONS_JULIA resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for IF resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for WHILE resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FOR resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for DO resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for TRY resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MODULE resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for BEGIN resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for USING resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for NUMBER resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for MINUS resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
  ! reduce/reduce conflict for INTEGER resolved using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    IDENTIFIER      reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    FUNCTIONS_JULIA reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    IF              reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    ELSEIF          reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    ELSE            reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    WHILE           reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    FOR             reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    FUNCTION        reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    DO              reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    TRY             reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    MODULE          reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    BEGIN           reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    USING           reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    NUMBER          reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    MINUS           reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    LEFT_PAREN      reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    LEFT_BRACKET    reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    INTEGER         reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    $end            reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    END             reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    CATCH           reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)
    RETURN          reduce using rule 70 (if_statement -> IF expression_boolean statement_list elseif_block statement_list ELSE statement_list END .)

  ! ELSE            [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! IDENTIFIER      [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTIONS_JULIA [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! IF              [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! ELSEIF          [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! WHILE           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! FOR             [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! FUNCTION        [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! DO              [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! TRY             [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! MODULE          [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! BEGIN           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! USING           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! NUMBER          [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! MINUS           [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_PAREN      [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! LEFT_BRACKET    [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]
  ! INTEGER         [ reduce using rule 75 (else_statement -> ELSE statement_list END .) ]


state 315


    IDENTIFIER      reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    FUNCTIONS_JULIA reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    IF              reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    ELSEIF          reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    ELSE            reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    WHILE           reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    FOR             reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    FUNCTION        reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    DO              reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    TRY             reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    MODULE          reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    BEGIN           reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    USING           reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    NUMBER          reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    MINUS           reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    LEFT_PAREN      reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    LEFT_BRACKET    reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    INTEGER         reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    $end            reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    END             reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    CATCH           reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)
    RETURN          reduce using rule 80 (for_statement -> FOR IDENTIFIER IN expression DOUBLEDOT expression_number statement_list END .)


state 316


    IDENTIFIER      reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    FUNCTIONS_JULIA reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    IF              reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    ELSEIF          reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    ELSE            reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    WHILE           reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    FOR             reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    FUNCTION        reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    DO              reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    TRY             reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    MODULE          reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    BEGIN           reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    USING           reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    NUMBER          reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    MINUS           reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    LEFT_PAREN      reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    LEFT_BRACKET    reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    INTEGER         reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    $end            reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    END             reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    CATCH           reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)
    RETURN          reduce using rule 81 (for_statement -> FOR IDENTIFIER IN expression_number DOUBLEDOT expression_number statement_list END .)


state 317


    END             shift and go to state 323


state 318


    IDENTIFIER      reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FUNCTIONS_JULIA reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    IF              reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    ELSEIF          reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    ELSE            reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    WHILE           reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FOR             reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FUNCTION        reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    DO              reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    TRY             reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    MODULE          reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    BEGIN           reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    USING           reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    NUMBER          reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    MINUS           reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    LEFT_PAREN      reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    LEFT_BRACKET    reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    INTEGER         reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    $end            reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    END             reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    CATCH           reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    RETURN          reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    COMMA           reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    NEWLINE         reduce using rule 50 (array_estatement_julia -> expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)


state 319


  ! shift/reduce conflict for NEWLINE resolved as shift
    IDENTIFIER      reduce using rule 52 (array_content_julia -> values .)
    FUNCTIONS_JULIA reduce using rule 52 (array_content_julia -> values .)
    IF              reduce using rule 52 (array_content_julia -> values .)
    ELSEIF          reduce using rule 52 (array_content_julia -> values .)
    ELSE            reduce using rule 52 (array_content_julia -> values .)
    WHILE           reduce using rule 52 (array_content_julia -> values .)
    FOR             reduce using rule 52 (array_content_julia -> values .)
    FUNCTION        reduce using rule 52 (array_content_julia -> values .)
    DO              reduce using rule 52 (array_content_julia -> values .)
    TRY             reduce using rule 52 (array_content_julia -> values .)
    MODULE          reduce using rule 52 (array_content_julia -> values .)
    BEGIN           reduce using rule 52 (array_content_julia -> values .)
    USING           reduce using rule 52 (array_content_julia -> values .)
    NUMBER          reduce using rule 52 (array_content_julia -> values .)
    MINUS           reduce using rule 52 (array_content_julia -> values .)
    LEFT_PAREN      reduce using rule 52 (array_content_julia -> values .)
    LEFT_BRACKET    reduce using rule 52 (array_content_julia -> values .)
    INTEGER         reduce using rule 52 (array_content_julia -> values .)
    $end            reduce using rule 52 (array_content_julia -> values .)
    END             reduce using rule 52 (array_content_julia -> values .)
    CATCH           reduce using rule 52 (array_content_julia -> values .)
    RETURN          reduce using rule 52 (array_content_julia -> values .)
    COMMA           reduce using rule 52 (array_content_julia -> values .)
    NEWLINE         shift and go to state 324

  ! NEWLINE         [ reduce using rule 52 (array_content_julia -> values .) ]


state 320

    NEWLINE         reduce using rule 55 (values -> NUMBER .)
    IDENTIFIER      reduce using rule 55 (values -> NUMBER .)
    FUNCTIONS_JULIA reduce using rule 55 (values -> NUMBER .)
    IF              reduce using rule 55 (values -> NUMBER .)
    ELSEIF          reduce using rule 55 (values -> NUMBER .)
    ELSE            reduce using rule 55 (values -> NUMBER .)
    WHILE           reduce using rule 55 (values -> NUMBER .)
    FOR             reduce using rule 55 (values -> NUMBER .)
    FUNCTION        reduce using rule 55 (values -> NUMBER .)
    DO              reduce using rule 55 (values -> NUMBER .)
    TRY             reduce using rule 55 (values -> NUMBER .)
    MODULE          reduce using rule 55 (values -> NUMBER .)
    BEGIN           reduce using rule 55 (values -> NUMBER .)
    USING           reduce using rule 55 (values -> NUMBER .)
    NUMBER          reduce using rule 55 (values -> NUMBER .)
    MINUS           reduce using rule 55 (values -> NUMBER .)
    LEFT_PAREN      reduce using rule 55 (values -> NUMBER .)
    LEFT_BRACKET    reduce using rule 55 (values -> NUMBER .)
    INTEGER         reduce using rule 55 (values -> NUMBER .)
    $end            reduce using rule 55 (values -> NUMBER .)
    END             reduce using rule 55 (values -> NUMBER .)
    CATCH           reduce using rule 55 (values -> NUMBER .)
    RETURN          reduce using rule 55 (values -> NUMBER .)
    COMMA           reduce using rule 55 (values -> NUMBER .)


state 321


    ASSIGN          shift and go to state 325


state 322


    DOUBLEDOT       shift and go to state 326


state 323


    IDENTIFIER      reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    FUNCTIONS_JULIA reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    IF              reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    ELSEIF          reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    ELSE            reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    WHILE           reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    FOR             reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    FUNCTION        reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    DO              reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    TRY             reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    MODULE          reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    BEGIN           reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    USING           reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    NUMBER          reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    MINUS           reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    LEFT_PAREN      reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    LEFT_BRACKET    reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    INTEGER         reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    $end            reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    END             reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    CATCH           reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)
    RETURN          reduce using rule 58 (statement_function -> FUNCTION IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN statement_list RETURN expression END .)


state 324


    IDENTIFIER      reduce using rule 53 (array_content_julia -> values NEWLINE .)
    FUNCTIONS_JULIA reduce using rule 53 (array_content_julia -> values NEWLINE .)
    IF              reduce using rule 53 (array_content_julia -> values NEWLINE .)
    ELSEIF          reduce using rule 53 (array_content_julia -> values NEWLINE .)
    ELSE            reduce using rule 53 (array_content_julia -> values NEWLINE .)
    WHILE           reduce using rule 53 (array_content_julia -> values NEWLINE .)
    FOR             reduce using rule 53 (array_content_julia -> values NEWLINE .)
    FUNCTION        reduce using rule 53 (array_content_julia -> values NEWLINE .)
    DO              reduce using rule 53 (array_content_julia -> values NEWLINE .)
    TRY             reduce using rule 53 (array_content_julia -> values NEWLINE .)
    MODULE          reduce using rule 53 (array_content_julia -> values NEWLINE .)
    BEGIN           reduce using rule 53 (array_content_julia -> values NEWLINE .)
    USING           reduce using rule 53 (array_content_julia -> values NEWLINE .)
    NUMBER          reduce using rule 53 (array_content_julia -> values NEWLINE .)
    MINUS           reduce using rule 53 (array_content_julia -> values NEWLINE .)
    LEFT_PAREN      reduce using rule 53 (array_content_julia -> values NEWLINE .)
    LEFT_BRACKET    reduce using rule 53 (array_content_julia -> values NEWLINE .)
    INTEGER         reduce using rule 53 (array_content_julia -> values NEWLINE .)
    $end            reduce using rule 53 (array_content_julia -> values NEWLINE .)
    END             reduce using rule 53 (array_content_julia -> values NEWLINE .)
    CATCH           reduce using rule 53 (array_content_julia -> values NEWLINE .)
    RETURN          reduce using rule 53 (array_content_julia -> values NEWLINE .)
    COMMA           reduce using rule 53 (array_content_julia -> values NEWLINE .)
    NEWLINE         reduce using rule 53 (array_content_julia -> values NEWLINE .)


state 325


    INTEGER         shift and go to state 327


state 326


    INTEGER         shift and go to state 28
    NUMBER          shift and go to state 320

    values                         shift and go to state 319
    array_content_julia            shift and go to state 328

state 327


    RIGHT_PAREN     shift and go to state 329


state 328


    IDENTIFIER      reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FUNCTIONS_JULIA reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    IF              reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    ELSEIF          reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    ELSE            reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    WHILE           reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FOR             reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    FUNCTION        reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    DO              reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    TRY             reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    MODULE          reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    BEGIN           reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    USING           reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    NUMBER          reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    MINUS           reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    LEFT_PAREN      reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    LEFT_BRACKET    reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    INTEGER         reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    $end            reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    END             reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    CATCH           reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    RETURN          reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    COMMA           reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)
    NEWLINE         reduce using rule 51 (array_estatement_julia -> values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia .)


state 329

    (32) identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN . array_estatement_julia
    (50) array_estatement_julia -> . expression_number FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia
    (51) array_estatement_julia -> . values MINUS FUNCTIONS_JULIA FUNCTIONS_JULIA LEFT_BRACE IDENTIFIER COMMA INTEGER RIGHT_BRACE DOUBLEDOT array_content_julia
    (120) expression_number -> . IDENTIFIER
    (121) expression_number -> . NUMBER
    (122) expression_number -> . expression_number operator_arithmetic expression_number
    (123) expression_number -> . expression_number DOUBLEDOT expression_number
    (124) expression_number -> . expression_number DOT expression_number
    (125) expression_number -> . MINUS expression_number
    (126) expression_number -> . IDENTIFIER LEFT_PAREN argument_list RIGHT_PAREN
    (127) expression_number -> . LEFT_PAREN expression_number RIGHT_PAREN
    (128) expression_number -> . LEFT_BRACKET expression_number RIGHT_BRACKET
    (54) values -> . INTEGER
    (55) values -> . NUMBER

    IDENTIFIER      shift and go to state 84
    NUMBER          shift and go to state 36
    MINUS           shift and go to state 31
    LEFT_PAREN      shift and go to state 26
    LEFT_BRACKET    shift and go to state 27
    INTEGER         shift and go to state 28

    array_estatement_julia         shift and go to state 330
    expression_number              shift and go to state 24
    values                         shift and go to state 30

state 330


    COMMA           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    NEWLINE         reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    IDENTIFIER      reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    FUNCTIONS_JULIA reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    IF              reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    ELSEIF          reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    ELSE            reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    WHILE           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    FOR             reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    FUNCTION        reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    DO              reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    TRY             reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    MODULE          reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    BEGIN           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    USING           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    NUMBER          reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    MINUS           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    LEFT_PAREN      reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    LEFT_BRACKET    reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    INTEGER         reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    $end            reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    END             reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    CATCH           reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)
    RETURN          reduce using rule 32 (identifierDecl -> FUNCTIONS_JULIA relation FUNCTIONS_JULIA LEFT_PAREN LEFT_BRACKET array_elements RIGHT_BRACKET COMMA FUNCTIONS_JULIA ASSIGN INTEGER RIGHT_PAREN array_estatement_julia .)