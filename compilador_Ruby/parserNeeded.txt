
Unused terminals:

    ALIAS
    AMPERSAND
    BACKSLASH
    BEGIN
    BREAK
    DOUBLEPERCENT
    ENSURE
    NEXT
    NIL
    NOT
    QUOTATIONMARKS
    REDO
    RESCUE
    RETRY
    SELF
    SUPER
    THEN
    UNDEF
    UNLESS
    VERTICALBAR
    YIELD

Parsing method: LALR

state 0

    PUTS            shift and go to state 5
    ID              shift and go to state 7
    $end            reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    program                        shift and go to state 1
    block                          shift and go to state 2
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 1

    (0) S' -> program .

state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 4

    $end            reduce using rule 15 (statement_list -> statement .)
    END             reduce using rule 15 (statement_list -> statement .)
    ELSE            reduce using rule 15 (statement_list -> statement .)
    ELSIF           reduce using rule 15 (statement_list -> statement .)
    WHEN            reduce using rule 15 (statement_list -> statement .)
    RETURN          reduce using rule 15 (statement_list -> statement .)
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 15 (statement_list -> statement .) ]
  ! IF              [ reduce using rule 15 (statement_list -> statement .) ]
  ! FOR             [ reduce using rule 15 (statement_list -> statement .) ]
  ! WHILE           [ reduce using rule 15 (statement_list -> statement .) ]
  ! DEF             [ reduce using rule 15 (statement_list -> statement .) ]
  ! PUTS            [ reduce using rule 15 (statement_list -> statement .) ]
  ! CASE            [ reduce using rule 15 (statement_list -> statement .) ]
  ! UNTIL           [ reduce using rule 15 (statement_list -> statement .) ]
  ! MODULE          [ reduce using rule 15 (statement_list -> statement .) ]
  ! CLASS           [ reduce using rule 15 (statement_list -> statement .) ]
  ! FUNCTIONS       [ reduce using rule 15 (statement_list -> statement .) ]
  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]
  ! $end            [ reduce using rule 123 (empty -> .) ]
  ! END             [ reduce using rule 123 (empty -> .) ]
  ! ELSE            [ reduce using rule 123 (empty -> .) ]
  ! ELSIF           [ reduce using rule 123 (empty -> .) ]
  ! WHEN            [ reduce using rule 123 (empty -> .) ]
  ! RETURN          [ reduce using rule 123 (empty -> .) ]

    statement                      shift and go to state 4
    statement_list                 shift and go to state 33
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 5

  ! shift/reduce conflict for ID resolved as shift
    IF              reduce using rule 18 (statement_list -> PUTS .)
    FOR             reduce using rule 18 (statement_list -> PUTS .)
    WHILE           reduce using rule 18 (statement_list -> PUTS .)
    DEF             reduce using rule 18 (statement_list -> PUTS .)
    PUTS            reduce using rule 18 (statement_list -> PUTS .)
    CASE            reduce using rule 18 (statement_list -> PUTS .)
    UNTIL           reduce using rule 18 (statement_list -> PUTS .)
    MODULE          reduce using rule 18 (statement_list -> PUTS .)
    CLASS           reduce using rule 18 (statement_list -> PUTS .)
    FUNCTIONS       reduce using rule 18 (statement_list -> PUTS .)
    $end            reduce using rule 18 (statement_list -> PUTS .)
    END             reduce using rule 18 (statement_list -> PUTS .)
    ELSE            reduce using rule 18 (statement_list -> PUTS .)
    ELSIF           reduce using rule 18 (statement_list -> PUTS .)
    WHEN            reduce using rule 18 (statement_list -> PUTS .)
    RETURN          reduce using rule 18 (statement_list -> PUTS .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

  ! ID              [ reduce using rule 18 (statement_list -> PUTS .) ]

    expression                     shift and go to state 34
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 6

    ID              reduce using rule 19 (statement_list -> empty .)
    IF              reduce using rule 19 (statement_list -> empty .)
    FOR             reduce using rule 19 (statement_list -> empty .)
    WHILE           reduce using rule 19 (statement_list -> empty .)
    DEF             reduce using rule 19 (statement_list -> empty .)
    PUTS            reduce using rule 19 (statement_list -> empty .)
    CASE            reduce using rule 19 (statement_list -> empty .)
    UNTIL           reduce using rule 19 (statement_list -> empty .)
    MODULE          reduce using rule 19 (statement_list -> empty .)
    CLASS           reduce using rule 19 (statement_list -> empty .)
    FUNCTIONS       reduce using rule 19 (statement_list -> empty .)
    $end            reduce using rule 19 (statement_list -> empty .)
    END             reduce using rule 19 (statement_list -> empty .)
    ELSE            reduce using rule 19 (statement_list -> empty .)
    ELSIF           reduce using rule 19 (statement_list -> empty .)
    WHEN            reduce using rule 19 (statement_list -> empty .)
    RETURN          reduce using rule 19 (statement_list -> empty .)


state 7

  ! shift/reduce conflict for ASIGN resolved as shift
  ! shift/reduce conflict for SUMASIGN resolved as shift
  ! shift/reduce conflict for MINASIGN resolved as shift
  ! shift/reduce conflict for MULTASIGN resolved as shift
  ! shift/reduce conflict for DIVASIGN resolved as shift
  ! shift/reduce conflict for MODULEASIGN resolved as shift
  ! shift/reduce conflict for EXPONENTASIGN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    ID              reduce using rule 20 (statement_list -> ID .)
    IF              reduce using rule 20 (statement_list -> ID .)
    FOR             reduce using rule 20 (statement_list -> ID .)
    WHILE           reduce using rule 20 (statement_list -> ID .)
    DEF             reduce using rule 20 (statement_list -> ID .)
    PUTS            reduce using rule 20 (statement_list -> ID .)
    CASE            reduce using rule 20 (statement_list -> ID .)
    UNTIL           reduce using rule 20 (statement_list -> ID .)
    MODULE          reduce using rule 20 (statement_list -> ID .)
    CLASS           reduce using rule 20 (statement_list -> ID .)
    FUNCTIONS       reduce using rule 20 (statement_list -> ID .)
    $end            reduce using rule 20 (statement_list -> ID .)
    END             reduce using rule 20 (statement_list -> ID .)
    ELSE            reduce using rule 20 (statement_list -> ID .)
    ELSIF           reduce using rule 20 (statement_list -> ID .)
    WHEN            reduce using rule 20 (statement_list -> ID .)
    RETURN          reduce using rule 20 (statement_list -> ID .)
    ASIGN           shift and go to state 48
    LEFTPARENT      shift and go to state 47
    COMMA           reduce using rule 30 (identifierList -> ID .)
    SUMASIGN        shift and go to state 49
    MINASIGN        shift and go to state 50
    MULTASIGN       shift and go to state 51
    DIVASIGN        shift and go to state 52
    MODULEASIGN     shift and go to state 53
    EXPONENTASIGN   shift and go to state 54
    DOT             shift and go to state 55

  ! SUMASIGN        [ reduce using rule 30 (identifierList -> ID .) ]
  ! MINASIGN        [ reduce using rule 30 (identifierList -> ID .) ]
  ! MULTASIGN       [ reduce using rule 30 (identifierList -> ID .) ]
  ! DIVASIGN        [ reduce using rule 30 (identifierList -> ID .) ]
  ! MODULEASIGN     [ reduce using rule 30 (identifierList -> ID .) ]
  ! EXPONENTASIGN   [ reduce using rule 30 (identifierList -> ID .) ]
  ! ASIGN           [ reduce using rule 30 (identifierList -> ID .) ]
  ! DOT             [ reduce using rule 30 (identifierList -> ID .) ]

    assignment_number              shift and go to state 45
    assignment                     shift and go to state 46

state 8

    PUTS            reduce using rule 3 (statement -> identifierDecl .)
    ID              reduce using rule 3 (statement -> identifierDecl .)
    IF              reduce using rule 3 (statement -> identifierDecl .)
    FOR             reduce using rule 3 (statement -> identifierDecl .)
    WHILE           reduce using rule 3 (statement -> identifierDecl .)
    DEF             reduce using rule 3 (statement -> identifierDecl .)
    CASE            reduce using rule 3 (statement -> identifierDecl .)
    UNTIL           reduce using rule 3 (statement -> identifierDecl .)
    MODULE          reduce using rule 3 (statement -> identifierDecl .)
    CLASS           reduce using rule 3 (statement -> identifierDecl .)
    FUNCTIONS       reduce using rule 3 (statement -> identifierDecl .)
    $end            reduce using rule 3 (statement -> identifierDecl .)
    END             reduce using rule 3 (statement -> identifierDecl .)
    ELSE            reduce using rule 3 (statement -> identifierDecl .)
    ELSIF           reduce using rule 3 (statement -> identifierDecl .)
    WHEN            reduce using rule 3 (statement -> identifierDecl .)
    RETURN          reduce using rule 3 (statement -> identifierDecl .)
    COMMA           shift and go to state 56
    SEMMICOLOM      shift and go to state 57


state 9

    PUTS            reduce using rule 4 (statement -> statement_if .)
    ID              reduce using rule 4 (statement -> statement_if .)
    IF              reduce using rule 4 (statement -> statement_if .)
    FOR             reduce using rule 4 (statement -> statement_if .)
    WHILE           reduce using rule 4 (statement -> statement_if .)
    DEF             reduce using rule 4 (statement -> statement_if .)
    CASE            reduce using rule 4 (statement -> statement_if .)
    UNTIL           reduce using rule 4 (statement -> statement_if .)
    MODULE          reduce using rule 4 (statement -> statement_if .)
    CLASS           reduce using rule 4 (statement -> statement_if .)
    FUNCTIONS       reduce using rule 4 (statement -> statement_if .)
    $end            reduce using rule 4 (statement -> statement_if .)
    END             reduce using rule 4 (statement -> statement_if .)
    ELSE            reduce using rule 4 (statement -> statement_if .)
    ELSIF           reduce using rule 4 (statement -> statement_if .)
    WHEN            reduce using rule 4 (statement -> statement_if .)
    RETURN          reduce using rule 4 (statement -> statement_if .)


state 10

    PUTS            reduce using rule 5 (statement -> statement_for .)
    ID              reduce using rule 5 (statement -> statement_for .)
    IF              reduce using rule 5 (statement -> statement_for .)
    FOR             reduce using rule 5 (statement -> statement_for .)
    WHILE           reduce using rule 5 (statement -> statement_for .)
    DEF             reduce using rule 5 (statement -> statement_for .)
    CASE            reduce using rule 5 (statement -> statement_for .)
    UNTIL           reduce using rule 5 (statement -> statement_for .)
    MODULE          reduce using rule 5 (statement -> statement_for .)
    CLASS           reduce using rule 5 (statement -> statement_for .)
    FUNCTIONS       reduce using rule 5 (statement -> statement_for .)
    $end            reduce using rule 5 (statement -> statement_for .)
    END             reduce using rule 5 (statement -> statement_for .)
    ELSE            reduce using rule 5 (statement -> statement_for .)
    ELSIF           reduce using rule 5 (statement -> statement_for .)
    WHEN            reduce using rule 5 (statement -> statement_for .)
    RETURN          reduce using rule 5 (statement -> statement_for .)


state 11

    PUTS            reduce using rule 6 (statement -> statement_while .)
    ID              reduce using rule 6 (statement -> statement_while .)
    IF              reduce using rule 6 (statement -> statement_while .)
    FOR             reduce using rule 6 (statement -> statement_while .)
    WHILE           reduce using rule 6 (statement -> statement_while .)
    DEF             reduce using rule 6 (statement -> statement_while .)
    CASE            reduce using rule 6 (statement -> statement_while .)
    UNTIL           reduce using rule 6 (statement -> statement_while .)
    MODULE          reduce using rule 6 (statement -> statement_while .)
    CLASS           reduce using rule 6 (statement -> statement_while .)
    FUNCTIONS       reduce using rule 6 (statement -> statement_while .)
    $end            reduce using rule 6 (statement -> statement_while .)
    END             reduce using rule 6 (statement -> statement_while .)
    ELSE            reduce using rule 6 (statement -> statement_while .)
    ELSIF           reduce using rule 6 (statement -> statement_while .)
    WHEN            reduce using rule 6 (statement -> statement_while .)
    RETURN          reduce using rule 6 (statement -> statement_while .)


state 12

    PUTS            reduce using rule 7 (statement -> statement_def .)
    ID              reduce using rule 7 (statement -> statement_def .)
    IF              reduce using rule 7 (statement -> statement_def .)
    FOR             reduce using rule 7 (statement -> statement_def .)
    WHILE           reduce using rule 7 (statement -> statement_def .)
    DEF             reduce using rule 7 (statement -> statement_def .)
    CASE            reduce using rule 7 (statement -> statement_def .)
    UNTIL           reduce using rule 7 (statement -> statement_def .)
    MODULE          reduce using rule 7 (statement -> statement_def .)
    CLASS           reduce using rule 7 (statement -> statement_def .)
    FUNCTIONS       reduce using rule 7 (statement -> statement_def .)
    $end            reduce using rule 7 (statement -> statement_def .)
    END             reduce using rule 7 (statement -> statement_def .)
    ELSE            reduce using rule 7 (statement -> statement_def .)
    ELSIF           reduce using rule 7 (statement -> statement_def .)
    WHEN            reduce using rule 7 (statement -> statement_def .)
    RETURN          reduce using rule 7 (statement -> statement_def .)


state 13

    PUTS            reduce using rule 8 (statement -> statement_puts .)
    ID              reduce using rule 8 (statement -> statement_puts .)
    IF              reduce using rule 8 (statement -> statement_puts .)
    FOR             reduce using rule 8 (statement -> statement_puts .)
    WHILE           reduce using rule 8 (statement -> statement_puts .)
    DEF             reduce using rule 8 (statement -> statement_puts .)
    CASE            reduce using rule 8 (statement -> statement_puts .)
    UNTIL           reduce using rule 8 (statement -> statement_puts .)
    MODULE          reduce using rule 8 (statement -> statement_puts .)
    CLASS           reduce using rule 8 (statement -> statement_puts .)
    FUNCTIONS       reduce using rule 8 (statement -> statement_puts .)
    $end            reduce using rule 8 (statement -> statement_puts .)
    END             reduce using rule 8 (statement -> statement_puts .)
    ELSE            reduce using rule 8 (statement -> statement_puts .)
    ELSIF           reduce using rule 8 (statement -> statement_puts .)
    WHEN            reduce using rule 8 (statement -> statement_puts .)
    RETURN          reduce using rule 8 (statement -> statement_puts .)


state 14

    PUTS            reduce using rule 9 (statement -> statement_case .)
    ID              reduce using rule 9 (statement -> statement_case .)
    IF              reduce using rule 9 (statement -> statement_case .)
    FOR             reduce using rule 9 (statement -> statement_case .)
    WHILE           reduce using rule 9 (statement -> statement_case .)
    DEF             reduce using rule 9 (statement -> statement_case .)
    CASE            reduce using rule 9 (statement -> statement_case .)
    UNTIL           reduce using rule 9 (statement -> statement_case .)
    MODULE          reduce using rule 9 (statement -> statement_case .)
    CLASS           reduce using rule 9 (statement -> statement_case .)
    FUNCTIONS       reduce using rule 9 (statement -> statement_case .)
    $end            reduce using rule 9 (statement -> statement_case .)
    END             reduce using rule 9 (statement -> statement_case .)
    ELSE            reduce using rule 9 (statement -> statement_case .)
    ELSIF           reduce using rule 9 (statement -> statement_case .)
    WHEN            reduce using rule 9 (statement -> statement_case .)
    RETURN          reduce using rule 9 (statement -> statement_case .)


state 15

    PUTS            reduce using rule 10 (statement -> statement_until .)
    ID              reduce using rule 10 (statement -> statement_until .)
    IF              reduce using rule 10 (statement -> statement_until .)
    FOR             reduce using rule 10 (statement -> statement_until .)
    WHILE           reduce using rule 10 (statement -> statement_until .)
    DEF             reduce using rule 10 (statement -> statement_until .)
    CASE            reduce using rule 10 (statement -> statement_until .)
    UNTIL           reduce using rule 10 (statement -> statement_until .)
    MODULE          reduce using rule 10 (statement -> statement_until .)
    CLASS           reduce using rule 10 (statement -> statement_until .)
    FUNCTIONS       reduce using rule 10 (statement -> statement_until .)
    $end            reduce using rule 10 (statement -> statement_until .)
    END             reduce using rule 10 (statement -> statement_until .)
    ELSE            reduce using rule 10 (statement -> statement_until .)
    ELSIF           reduce using rule 10 (statement -> statement_until .)
    WHEN            reduce using rule 10 (statement -> statement_until .)
    RETURN          reduce using rule 10 (statement -> statement_until .)


state 16

    PUTS            reduce using rule 11 (statement -> statement_module .)
    ID              reduce using rule 11 (statement -> statement_module .)
    IF              reduce using rule 11 (statement -> statement_module .)
    FOR             reduce using rule 11 (statement -> statement_module .)
    WHILE           reduce using rule 11 (statement -> statement_module .)
    DEF             reduce using rule 11 (statement -> statement_module .)
    CASE            reduce using rule 11 (statement -> statement_module .)
    UNTIL           reduce using rule 11 (statement -> statement_module .)
    MODULE          reduce using rule 11 (statement -> statement_module .)
    CLASS           reduce using rule 11 (statement -> statement_module .)
    FUNCTIONS       reduce using rule 11 (statement -> statement_module .)
    $end            reduce using rule 11 (statement -> statement_module .)
    END             reduce using rule 11 (statement -> statement_module .)
    ELSE            reduce using rule 11 (statement -> statement_module .)
    ELSIF           reduce using rule 11 (statement -> statement_module .)
    WHEN            reduce using rule 11 (statement -> statement_module .)
    RETURN          reduce using rule 11 (statement -> statement_module .)


state 17

    PUTS            reduce using rule 12 (statement -> statement_class .)
    ID              reduce using rule 12 (statement -> statement_class .)
    IF              reduce using rule 12 (statement -> statement_class .)
    FOR             reduce using rule 12 (statement -> statement_class .)
    WHILE           reduce using rule 12 (statement -> statement_class .)
    DEF             reduce using rule 12 (statement -> statement_class .)
    CASE            reduce using rule 12 (statement -> statement_class .)
    UNTIL           reduce using rule 12 (statement -> statement_class .)
    MODULE          reduce using rule 12 (statement -> statement_class .)
    CLASS           reduce using rule 12 (statement -> statement_class .)
    FUNCTIONS       reduce using rule 12 (statement -> statement_class .)
    $end            reduce using rule 12 (statement -> statement_class .)
    END             reduce using rule 12 (statement -> statement_class .)
    ELSE            reduce using rule 12 (statement -> statement_class .)
    ELSIF           reduce using rule 12 (statement -> statement_class .)
    WHEN            reduce using rule 12 (statement -> statement_class .)
    RETURN          reduce using rule 12 (statement -> statement_class .)


state 18

    PUTS            reduce using rule 13 (statement -> statement_call_function .)
    ID              reduce using rule 13 (statement -> statement_call_function .)
    IF              reduce using rule 13 (statement -> statement_call_function .)
    FOR             reduce using rule 13 (statement -> statement_call_function .)
    WHILE           reduce using rule 13 (statement -> statement_call_function .)
    DEF             reduce using rule 13 (statement -> statement_call_function .)
    CASE            reduce using rule 13 (statement -> statement_call_function .)
    UNTIL           reduce using rule 13 (statement -> statement_call_function .)
    MODULE          reduce using rule 13 (statement -> statement_call_function .)
    CLASS           reduce using rule 13 (statement -> statement_call_function .)
    FUNCTIONS       reduce using rule 13 (statement -> statement_call_function .)
    $end            reduce using rule 13 (statement -> statement_call_function .)
    END             reduce using rule 13 (statement -> statement_call_function .)
    ELSE            reduce using rule 13 (statement -> statement_call_function .)
    ELSIF           reduce using rule 13 (statement -> statement_call_function .)
    WHEN            reduce using rule 13 (statement -> statement_call_function .)
    RETURN          reduce using rule 13 (statement -> statement_call_function .)


state 19

    PUTS            reduce using rule 14 (statement -> statement_function_ruby .)
    ID              reduce using rule 14 (statement -> statement_function_ruby .)
    IF              reduce using rule 14 (statement -> statement_function_ruby .)
    FOR             reduce using rule 14 (statement -> statement_function_ruby .)
    WHILE           reduce using rule 14 (statement -> statement_function_ruby .)
    DEF             reduce using rule 14 (statement -> statement_function_ruby .)
    CASE            reduce using rule 14 (statement -> statement_function_ruby .)
    UNTIL           reduce using rule 14 (statement -> statement_function_ruby .)
    MODULE          reduce using rule 14 (statement -> statement_function_ruby .)
    CLASS           reduce using rule 14 (statement -> statement_function_ruby .)
    FUNCTIONS       reduce using rule 14 (statement -> statement_function_ruby .)
    $end            reduce using rule 14 (statement -> statement_function_ruby .)
    END             reduce using rule 14 (statement -> statement_function_ruby .)
    ELSE            reduce using rule 14 (statement -> statement_function_ruby .)
    ELSIF           reduce using rule 14 (statement -> statement_function_ruby .)
    WHEN            reduce using rule 14 (statement -> statement_function_ruby .)
    RETURN          reduce using rule 14 (statement -> statement_function_ruby .)


state 20

    COMMA           shift and go to state 60
    SUMASIGN        shift and go to state 49
    MINASIGN        shift and go to state 50
    MULTASIGN       shift and go to state 51
    DIVASIGN        shift and go to state 52
    MODULEASIGN     shift and go to state 53
    EXPONENTASIGN   shift and go to state 54
    ASIGN           shift and go to state 61
    DOT             shift and go to state 55

    assignment_number              shift and go to state 58
    assignment                     shift and go to state 59

state 21


    LEFTPARENT      shift and go to state 62


state 22

    ID              shift and go to state 64
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    LEFTPARENT      shift and go to state 65
    STRING          shift and go to state 42
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40

    expression_boolean             shift and go to state 63
    expression_string              shift and go to state 66
    expression_number              shift and go to state 67

state 23

    ID              shift and go to state 68


state 24

    ID              shift and go to state 64
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    LEFTPARENT      shift and go to state 65
    STRING          shift and go to state 42
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40

    expression_boolean             shift and go to state 69
    expression_string              shift and go to state 66
    expression_number              shift and go to state 67

state 25

    ID              shift and go to state 70


state 26


    ID              shift and go to state 71


state 27

    ID              shift and go to state 64
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    LEFTPARENT      shift and go to state 65
    STRING          shift and go to state 42
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40

    expression_boolean             shift and go to state 72
    expression_string              shift and go to state 66
    expression_number              shift and go to state 67

state 28

    ID              shift and go to state 73

state 29

    ID              shift and go to state 74


state 30

    ID              reduce using rule 17 (statement_list -> statement_list statement .)
    IF              reduce using rule 17 (statement_list -> statement_list statement .)
    FOR             reduce using rule 17 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 17 (statement_list -> statement_list statement .)
    DEF             reduce using rule 17 (statement_list -> statement_list statement .)
    PUTS            reduce using rule 17 (statement_list -> statement_list statement .)
    CASE            reduce using rule 17 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 17 (statement_list -> statement_list statement .)
    MODULE          reduce using rule 17 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 17 (statement_list -> statement_list statement .)
    FUNCTIONS       reduce using rule 17 (statement_list -> statement_list statement .)
    $end            reduce using rule 17 (statement_list -> statement_list statement .)
    END             reduce using rule 17 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 17 (statement_list -> statement_list statement .)
    ELSIF           reduce using rule 17 (statement_list -> statement_list statement .)
    WHEN            reduce using rule 17 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 17 (statement_list -> statement_list statement .)


state 31


  ! shift/reduce conflict for ASIGN resolved as shift
  ! shift/reduce conflict for SUMASIGN resolved as shift
  ! shift/reduce conflict for MINASIGN resolved as shift
  ! shift/reduce conflict for MULTASIGN resolved as shift
  ! shift/reduce conflict for DIVASIGN resolved as shift
  ! shift/reduce conflict for MODULEASIGN resolved as shift
  ! shift/reduce conflict for EXPONENTASIGN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    ASIGN           shift and go to state 48
    LEFTPARENT      shift and go to state 47
    COMMA           reduce using rule 30 (identifierList -> ID .)
    SUMASIGN        shift and go to state 49
    MINASIGN        shift and go to state 50
    MULTASIGN       shift and go to state 51
    DIVASIGN        shift and go to state 52
    MODULEASIGN     shift and go to state 53
    EXPONENTASIGN   shift and go to state 54
    DOT             shift and go to state 55

  ! SUMASIGN        [ reduce using rule 30 (identifierList -> ID .) ]
  ! MINASIGN        [ reduce using rule 30 (identifierList -> ID .) ]
  ! MULTASIGN       [ reduce using rule 30 (identifierList -> ID .) ]
  ! DIVASIGN        [ reduce using rule 30 (identifierList -> ID .) ]
  ! MODULEASIGN     [ reduce using rule 30 (identifierList -> ID .) ]
  ! EXPONENTASIGN   [ reduce using rule 30 (identifierList -> ID .) ]
  ! ASIGN           [ reduce using rule 30 (identifierList -> ID .) ]
  ! DOT             [ reduce using rule 30 (identifierList -> ID .) ]

    assignment_number              shift and go to state 45
    assignment                     shift and go to state 46

state 32

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    expression                     shift and go to state 34
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 33

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    $end            reduce using rule 16 (statement_list -> statement statement_list .)
    END             reduce using rule 16 (statement_list -> statement statement_list .)
    ELSE            reduce using rule 16 (statement_list -> statement statement_list .)
    ELSIF           reduce using rule 16 (statement_list -> statement statement_list .)
    WHEN            reduce using rule 16 (statement_list -> statement statement_list .)
    RETURN          reduce using rule 16 (statement_list -> statement statement_list .)
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! IF              [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! FOR             [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! WHILE           [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! DEF             [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! PUTS            [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! CASE            [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! UNTIL           [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! MODULE          [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! CLASS           [ reduce using rule 16 (statement_list -> statement statement_list .) ]
  ! FUNCTIONS       [ reduce using rule 16 (statement_list -> statement statement_list .) ]

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 34

    PUTS            reduce using rule 72 (statement_puts -> PUTS expression .)
    ID              reduce using rule 72 (statement_puts -> PUTS expression .)
    IF              reduce using rule 72 (statement_puts -> PUTS expression .)
    FOR             reduce using rule 72 (statement_puts -> PUTS expression .)
    WHILE           reduce using rule 72 (statement_puts -> PUTS expression .)
    DEF             reduce using rule 72 (statement_puts -> PUTS expression .)
    CASE            reduce using rule 72 (statement_puts -> PUTS expression .)
    UNTIL           reduce using rule 72 (statement_puts -> PUTS expression .)
    MODULE          reduce using rule 72 (statement_puts -> PUTS expression .)
    CLASS           reduce using rule 72 (statement_puts -> PUTS expression .)
    FUNCTIONS       reduce using rule 72 (statement_puts -> PUTS expression .)
    $end            reduce using rule 72 (statement_puts -> PUTS expression .)
    END             reduce using rule 72 (statement_puts -> PUTS expression .)
    ELSE            reduce using rule 72 (statement_puts -> PUTS expression .)
    ELSIF           reduce using rule 72 (statement_puts -> PUTS expression .)
    WHEN            reduce using rule 72 (statement_puts -> PUTS expression .)
    RETURN          reduce using rule 72 (statement_puts -> PUTS expression .)


state 35

    PUTS            reduce using rule 78 (expression -> expression_number .)
    ID              reduce using rule 78 (expression -> expression_number .)
    IF              reduce using rule 78 (expression -> expression_number .)
    FOR             reduce using rule 78 (expression -> expression_number .)
    WHILE           reduce using rule 78 (expression -> expression_number .)
    DEF             reduce using rule 78 (expression -> expression_number .)
    CASE            reduce using rule 78 (expression -> expression_number .)
    UNTIL           reduce using rule 78 (expression -> expression_number .)
    MODULE          reduce using rule 78 (expression -> expression_number .)
    CLASS           reduce using rule 78 (expression -> expression_number .)
    FUNCTIONS       reduce using rule 78 (expression -> expression_number .)
    $end            reduce using rule 78 (expression -> expression_number .)
    END             reduce using rule 78 (expression -> expression_number .)
    ELSE            reduce using rule 78 (expression -> expression_number .)
    ELSIF           reduce using rule 78 (expression -> expression_number .)
    WHEN            reduce using rule 78 (expression -> expression_number .)
    RETURN          reduce using rule 78 (expression -> expression_number .)
    COMMA           reduce using rule 78 (expression -> expression_number .)
    RIGTHPARENT     reduce using rule 78 (expression -> expression_number .)
    RIGTHBRAKET     reduce using rule 78 (expression -> expression_number .)
    KEYRIGHT        reduce using rule 78 (expression -> expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    operator_arithmetic            shift and go to state 75
    relation                       shift and go to state 76

state 36


    PUTS            reduce using rule 79 (expression -> expression_string .)
    ID              reduce using rule 79 (expression -> expression_string .)
    IF              reduce using rule 79 (expression -> expression_string .)
    FOR             reduce using rule 79 (expression -> expression_string .)
    WHILE           reduce using rule 79 (expression -> expression_string .)
    DEF             reduce using rule 79 (expression -> expression_string .)
    CASE            reduce using rule 79 (expression -> expression_string .)
    UNTIL           reduce using rule 79 (expression -> expression_string .)
    MODULE          reduce using rule 79 (expression -> expression_string .)
    CLASS           reduce using rule 79 (expression -> expression_string .)
    FUNCTIONS       reduce using rule 79 (expression -> expression_string .)
    $end            reduce using rule 79 (expression -> expression_string .)
    END             reduce using rule 79 (expression -> expression_string .)
    ELSE            reduce using rule 79 (expression -> expression_string .)
    ELSIF           reduce using rule 79 (expression -> expression_string .)
    WHEN            reduce using rule 79 (expression -> expression_string .)
    RETURN          reduce using rule 79 (expression -> expression_string .)
    COMMA           reduce using rule 79 (expression -> expression_string .)
    RIGTHPARENT     reduce using rule 79 (expression -> expression_string .)
    RIGTHBRAKET     reduce using rule 79 (expression -> expression_string .)
    KEYRIGHT        reduce using rule 79 (expression -> expression_string .)
    MULTIPLICATION  shift and go to state 94
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 95

state 37

    PUTS            reduce using rule 80 (expression -> expression_boolean .)
    ID              reduce using rule 80 (expression -> expression_boolean .)
    IF              reduce using rule 80 (expression -> expression_boolean .)
    FOR             reduce using rule 80 (expression -> expression_boolean .)
    WHILE           reduce using rule 80 (expression -> expression_boolean .)
    DEF             reduce using rule 80 (expression -> expression_boolean .)
    CASE            reduce using rule 80 (expression -> expression_boolean .)
    UNTIL           reduce using rule 80 (expression -> expression_boolean .)
    MODULE          reduce using rule 80 (expression -> expression_boolean .)
    CLASS           reduce using rule 80 (expression -> expression_boolean .)
    FUNCTIONS       reduce using rule 80 (expression -> expression_boolean .)
    $end            reduce using rule 80 (expression -> expression_boolean .)
    END             reduce using rule 80 (expression -> expression_boolean .)
    ELSE            reduce using rule 80 (expression -> expression_boolean .)
    ELSIF           reduce using rule 80 (expression -> expression_boolean .)
    WHEN            reduce using rule 80 (expression -> expression_boolean .)
    RETURN          reduce using rule 80 (expression -> expression_boolean .)
    COMMA           reduce using rule 80 (expression -> expression_boolean .)
    RIGTHPARENT     reduce using rule 80 (expression -> expression_boolean .)
    RIGTHBRAKET     reduce using rule 80 (expression -> expression_boolean .)
    KEYRIGHT        reduce using rule 80 (expression -> expression_boolean .)
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 96

state 38

  ! reduce/reduce conflict for LESSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for LEQSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for GTRSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for GEQSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for DOUBLEQUAL resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for DIFERENTEQUAL resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for ORSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for PUTS resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for DEF resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for UNTIL resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for MODULE resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for CLASS resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for FUNCTIONS resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for END resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for ELSIF resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for WHEN resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for RIGTHPARENT resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for SEMMICOLOM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for RIGTHBRAKET resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for KEYRIGHT resolved using rule 89 (expression_number -> ID .)
    SUM             reduce using rule 89 (expression_number -> ID .)
    MINUS           reduce using rule 89 (expression_number -> ID .)
    MULTIPLICATION  reduce using rule 89 (expression_number -> ID .)
    DIVISION        reduce using rule 89 (expression_number -> ID .)
    PERCENT         reduce using rule 89 (expression_number -> ID .)
    SQUAREROOT      reduce using rule 89 (expression_number -> ID .)
    EXPONENT        reduce using rule 89 (expression_number -> ID .)
    LESSYM          reduce using rule 89 (expression_number -> ID .)
    LEQSYM          reduce using rule 89 (expression_number -> ID .)
    GTRSYM          reduce using rule 89 (expression_number -> ID .)
    GEQSYM          reduce using rule 89 (expression_number -> ID .)
    DOUBLEQUAL      reduce using rule 89 (expression_number -> ID .)
    DIFERENTEQUAL   reduce using rule 89 (expression_number -> ID .)
    AND             reduce using rule 89 (expression_number -> ID .)
    ANDSYM          reduce using rule 89 (expression_number -> ID .)
    OR              reduce using rule 89 (expression_number -> ID .)
    ORSYM           reduce using rule 89 (expression_number -> ID .)
    PUTS            reduce using rule 89 (expression_number -> ID .)
    ID              reduce using rule 89 (expression_number -> ID .)
    IF              reduce using rule 89 (expression_number -> ID .)
    FOR             reduce using rule 89 (expression_number -> ID .)
    WHILE           reduce using rule 89 (expression_number -> ID .)
    DEF             reduce using rule 89 (expression_number -> ID .)
    CASE            reduce using rule 89 (expression_number -> ID .)
    UNTIL           reduce using rule 89 (expression_number -> ID .)
    MODULE          reduce using rule 89 (expression_number -> ID .)
    CLASS           reduce using rule 89 (expression_number -> ID .)
    FUNCTIONS       reduce using rule 89 (expression_number -> ID .)
    $end            reduce using rule 89 (expression_number -> ID .)
    END             reduce using rule 89 (expression_number -> ID .)
    ELSE            reduce using rule 89 (expression_number -> ID .)
    ELSIF           reduce using rule 89 (expression_number -> ID .)
    WHEN            reduce using rule 89 (expression_number -> ID .)
    RETURN          reduce using rule 89 (expression_number -> ID .)
    RIGTHPARENT     reduce using rule 89 (expression_number -> ID .)
    COMMA           reduce using rule 89 (expression_number -> ID .)
    SEMMICOLOM      reduce using rule 89 (expression_number -> ID .)
    RIGTHBRAKET     reduce using rule 89 (expression_number -> ID .)
    KEYRIGHT        reduce using rule 89 (expression_number -> ID .)
    LEFTPARENT      shift and go to state 97

  ! LESSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! LEQSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! GTRSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! GEQSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! DOUBLEQUAL      [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! DIFERENTEQUAL   [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! AND             [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! ANDSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! OR              [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! ORSYM           [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! PUTS            [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! ID              [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! IF              [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! FOR             [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! WHILE           [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! DEF             [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! CASE            [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! UNTIL           [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! MODULE          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! CLASS           [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! FUNCTIONS       [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! $end            [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! END             [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! ELSE            [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! ELSIF           [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! WHEN            [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! RETURN          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! RIGTHPARENT     [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! COMMA           [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! SEMMICOLOM      [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! RIGTHBRAKET     [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! KEYRIGHT        [ reduce using rule 95 (expression_boolean -> ID .) ]


state 39

    SUM             reduce using rule 90 (expression_number -> NUMBER .)
    MINUS           reduce using rule 90 (expression_number -> NUMBER .)
    MULTIPLICATION  reduce using rule 90 (expression_number -> NUMBER .)
    DIVISION        reduce using rule 90 (expression_number -> NUMBER .)
    PERCENT         reduce using rule 90 (expression_number -> NUMBER .)
    SQUAREROOT      reduce using rule 90 (expression_number -> NUMBER .)
    EXPONENT        reduce using rule 90 (expression_number -> NUMBER .)
    LESSYM          reduce using rule 90 (expression_number -> NUMBER .)
    LEQSYM          reduce using rule 90 (expression_number -> NUMBER .)
    GTRSYM          reduce using rule 90 (expression_number -> NUMBER .)
    GEQSYM          reduce using rule 90 (expression_number -> NUMBER .)
    DOUBLEQUAL      reduce using rule 90 (expression_number -> NUMBER .)
    DIFERENTEQUAL   reduce using rule 90 (expression_number -> NUMBER .)
    AND             reduce using rule 90 (expression_number -> NUMBER .)
    ANDSYM          reduce using rule 90 (expression_number -> NUMBER .)
    OR              reduce using rule 90 (expression_number -> NUMBER .)
    ORSYM           reduce using rule 90 (expression_number -> NUMBER .)
    PUTS            reduce using rule 90 (expression_number -> NUMBER .)
    ID              reduce using rule 90 (expression_number -> NUMBER .)
    IF              reduce using rule 90 (expression_number -> NUMBER .)
    FOR             reduce using rule 90 (expression_number -> NUMBER .)
    WHILE           reduce using rule 90 (expression_number -> NUMBER .)
    DEF             reduce using rule 90 (expression_number -> NUMBER .)
    CASE            reduce using rule 90 (expression_number -> NUMBER .)
    UNTIL           reduce using rule 90 (expression_number -> NUMBER .)
    MODULE          reduce using rule 90 (expression_number -> NUMBER .)
    CLASS           reduce using rule 90 (expression_number -> NUMBER .)
    FUNCTIONS       reduce using rule 90 (expression_number -> NUMBER .)
    $end            reduce using rule 90 (expression_number -> NUMBER .)
    END             reduce using rule 90 (expression_number -> NUMBER .)
    ELSE            reduce using rule 90 (expression_number -> NUMBER .)
    ELSIF           reduce using rule 90 (expression_number -> NUMBER .)
    WHEN            reduce using rule 90 (expression_number -> NUMBER .)
    RETURN          reduce using rule 90 (expression_number -> NUMBER .)
    RIGTHPARENT     reduce using rule 90 (expression_number -> NUMBER .)
    COMMA           reduce using rule 90 (expression_number -> NUMBER .)
    SEMMICOLOM      reduce using rule 90 (expression_number -> NUMBER .)
    DO              reduce using rule 90 (expression_number -> NUMBER .)
    RIGTHBRAKET     reduce using rule 90 (expression_number -> NUMBER .)
    KEYRIGHT        reduce using rule 90 (expression_number -> NUMBER .)


state 40

    ID              shift and go to state 99
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 100

    expression_number              shift and go to state 98

state 41

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    expression_number              shift and go to state 101
    expression_string              shift and go to state 102
    expression_boolean             shift and go to state 103

state 42

    (94) expression_string -> STRING .

    MULTIPLICATION  reduce using rule 94 (expression_string -> STRING .)
    LESSYM          reduce using rule 94 (expression_string -> STRING .)
    LEQSYM          reduce using rule 94 (expression_string -> STRING .)
    GTRSYM          reduce using rule 94 (expression_string -> STRING .)
    GEQSYM          reduce using rule 94 (expression_string -> STRING .)
    DOUBLEQUAL      reduce using rule 94 (expression_string -> STRING .)
    DIFERENTEQUAL   reduce using rule 94 (expression_string -> STRING .)
    AND             reduce using rule 94 (expression_string -> STRING .)
    ANDSYM          reduce using rule 94 (expression_string -> STRING .)
    OR              reduce using rule 94 (expression_string -> STRING .)
    ORSYM           reduce using rule 94 (expression_string -> STRING .)
    PUTS            reduce using rule 94 (expression_string -> STRING .)
    ID              reduce using rule 94 (expression_string -> STRING .)
    IF              reduce using rule 94 (expression_string -> STRING .)
    FOR             reduce using rule 94 (expression_string -> STRING .)
    WHILE           reduce using rule 94 (expression_string -> STRING .)
    DEF             reduce using rule 94 (expression_string -> STRING .)
    CASE            reduce using rule 94 (expression_string -> STRING .)
    UNTIL           reduce using rule 94 (expression_string -> STRING .)
    MODULE          reduce using rule 94 (expression_string -> STRING .)
    CLASS           reduce using rule 94 (expression_string -> STRING .)
    FUNCTIONS       reduce using rule 94 (expression_string -> STRING .)
    $end            reduce using rule 94 (expression_string -> STRING .)
    END             reduce using rule 94 (expression_string -> STRING .)
    ELSE            reduce using rule 94 (expression_string -> STRING .)
    ELSIF           reduce using rule 94 (expression_string -> STRING .)
    WHEN            reduce using rule 94 (expression_string -> STRING .)
    RETURN          reduce using rule 94 (expression_string -> STRING .)
    RIGTHPARENT     reduce using rule 94 (expression_string -> STRING .)
    COMMA           reduce using rule 94 (expression_string -> STRING .)
    SEMMICOLOM      reduce using rule 94 (expression_string -> STRING .)
    DO              reduce using rule 94 (expression_string -> STRING .)
    RIGTHBRAKET     reduce using rule 94 (expression_string -> STRING .)
    KEYRIGHT        reduce using rule 94 (expression_string -> STRING .)


state 43

    LESSYM          reduce using rule 96 (expression_boolean -> BOOLEAN .)
    LEQSYM          reduce using rule 96 (expression_boolean -> BOOLEAN .)
    GTRSYM          reduce using rule 96 (expression_boolean -> BOOLEAN .)
    GEQSYM          reduce using rule 96 (expression_boolean -> BOOLEAN .)
    DOUBLEQUAL      reduce using rule 96 (expression_boolean -> BOOLEAN .)
    DIFERENTEQUAL   reduce using rule 96 (expression_boolean -> BOOLEAN .)
    AND             reduce using rule 96 (expression_boolean -> BOOLEAN .)
    ANDSYM          reduce using rule 96 (expression_boolean -> BOOLEAN .)
    OR              reduce using rule 96 (expression_boolean -> BOOLEAN .)
    ORSYM           reduce using rule 96 (expression_boolean -> BOOLEAN .)
    PUTS            reduce using rule 96 (expression_boolean -> BOOLEAN .)
    ID              reduce using rule 96 (expression_boolean -> BOOLEAN .)
    IF              reduce using rule 96 (expression_boolean -> BOOLEAN .)
    FOR             reduce using rule 96 (expression_boolean -> BOOLEAN .)
    WHILE           reduce using rule 96 (expression_boolean -> BOOLEAN .)
    DEF             reduce using rule 96 (expression_boolean -> BOOLEAN .)
    CASE            reduce using rule 96 (expression_boolean -> BOOLEAN .)
    UNTIL           reduce using rule 96 (expression_boolean -> BOOLEAN .)
    MODULE          reduce using rule 96 (expression_boolean -> BOOLEAN .)
    CLASS           reduce using rule 96 (expression_boolean -> BOOLEAN .)
    FUNCTIONS       reduce using rule 96 (expression_boolean -> BOOLEAN .)
    $end            reduce using rule 96 (expression_boolean -> BOOLEAN .)
    END             reduce using rule 96 (expression_boolean -> BOOLEAN .)
    ELSE            reduce using rule 96 (expression_boolean -> BOOLEAN .)
    ELSIF           reduce using rule 96 (expression_boolean -> BOOLEAN .)
    WHEN            reduce using rule 96 (expression_boolean -> BOOLEAN .)
    RETURN          reduce using rule 96 (expression_boolean -> BOOLEAN .)
    DO              reduce using rule 96 (expression_boolean -> BOOLEAN .)
    RIGTHPARENT     reduce using rule 96 (expression_boolean -> BOOLEAN .)
    COMMA           reduce using rule 96 (expression_boolean -> BOOLEAN .)
    SEMMICOLOM      reduce using rule 96 (expression_boolean -> BOOLEAN .)
    RIGTHBRAKET     reduce using rule 96 (expression_boolean -> BOOLEAN .)
    KEYRIGHT        reduce using rule 96 (expression_boolean -> BOOLEAN .)


state 44

    ID              shift and go to state 64
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    LEFTPARENT      shift and go to state 65
    STRING          shift and go to state 42
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40

    expression_boolean             shift and go to state 104
    expression_string              shift and go to state 66
    expression_number              shift and go to state 67

state 45

    ID              shift and go to state 105
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 100

    expression_number              shift and go to state 106

state 46

    LEFTBRACKET     shift and go to state 110
    FUNCTIONS       shift and go to state 111
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    expression_number              shift and go to state 107
    expression_string              shift and go to state 108
    expression_boolean             shift and go to state 109

state 47

    RIGTHPARENT     reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    parameters                     shift and go to state 112
    expression                     shift and go to state 113
    empty                          shift and go to state 114
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 48

    ARROW           shift and go to state 115
    LEFTBRACKET     reduce using rule 81 (assignment -> ASIGN .)
    FUNCTIONS       reduce using rule 81 (assignment -> ASIGN .)
    ID              reduce using rule 81 (assignment -> ASIGN .)
    NUMBER          reduce using rule 81 (assignment -> ASIGN .)
    MINUS           reduce using rule 81 (assignment -> ASIGN .)
    LEFTPARENT      reduce using rule 81 (assignment -> ASIGN .)
    STRING          reduce using rule 81 (assignment -> ASIGN .)
    BOOLEAN         reduce using rule 81 (assignment -> ASIGN .)
    ADMIRATION      reduce using rule 81 (assignment -> ASIGN .)


state 49

    ID              reduce using rule 83 (assignment_number -> SUMASIGN .)
    NUMBER          reduce using rule 83 (assignment_number -> SUMASIGN .)
    MINUS           reduce using rule 83 (assignment_number -> SUMASIGN .)
    LEFTPARENT      reduce using rule 83 (assignment_number -> SUMASIGN .)
    STRING          reduce using rule 83 (assignment_number -> SUMASIGN .)


state 50

    ID              reduce using rule 84 (assignment_number -> MINASIGN .)
    NUMBER          reduce using rule 84 (assignment_number -> MINASIGN .)
    MINUS           reduce using rule 84 (assignment_number -> MINASIGN .)
    LEFTPARENT      reduce using rule 84 (assignment_number -> MINASIGN .)
    STRING          reduce using rule 84 (assignment_number -> MINASIGN .)


state 51

    ID              reduce using rule 85 (assignment_number -> MULTASIGN .)
    NUMBER          reduce using rule 85 (assignment_number -> MULTASIGN .)
    MINUS           reduce using rule 85 (assignment_number -> MULTASIGN .)
    LEFTPARENT      reduce using rule 85 (assignment_number -> MULTASIGN .)
    STRING          reduce using rule 85 (assignment_number -> MULTASIGN .)


state 52

    ID              reduce using rule 86 (assignment_number -> DIVASIGN .)
    NUMBER          reduce using rule 86 (assignment_number -> DIVASIGN .)
    MINUS           reduce using rule 86 (assignment_number -> DIVASIGN .)
    LEFTPARENT      reduce using rule 86 (assignment_number -> DIVASIGN .)
    STRING          reduce using rule 86 (assignment_number -> DIVASIGN .)


state 53

    ID              reduce using rule 87 (assignment_number -> MODULEASIGN .)
    NUMBER          reduce using rule 87 (assignment_number -> MODULEASIGN .)
    MINUS           reduce using rule 87 (assignment_number -> MODULEASIGN .)
    LEFTPARENT      reduce using rule 87 (assignment_number -> MODULEASIGN .)
    STRING          reduce using rule 87 (assignment_number -> MODULEASIGN .)


state 54

    ID              reduce using rule 88 (assignment_number -> EXPONENTASIGN .)
    NUMBER          reduce using rule 88 (assignment_number -> EXPONENTASIGN .)
    MINUS           reduce using rule 88 (assignment_number -> EXPONENTASIGN .)
    LEFTPARENT      reduce using rule 88 (assignment_number -> EXPONENTASIGN .)
    STRING          reduce using rule 88 (assignment_number -> EXPONENTASIGN .)


state 55

    LEFTBRACKET     reduce using rule 82 (assignment -> DOT .)
    FUNCTIONS       reduce using rule 82 (assignment -> DOT .)
    ID              reduce using rule 82 (assignment -> DOT .)
    NUMBER          reduce using rule 82 (assignment -> DOT .)
    MINUS           reduce using rule 82 (assignment -> DOT .)
    LEFTPARENT      reduce using rule 82 (assignment -> DOT .)
    STRING          reduce using rule 82 (assignment -> DOT .)
    BOOLEAN         reduce using rule 82 (assignment -> DOT .)
    ADMIRATION      reduce using rule 82 (assignment -> DOT .)


state 56


    ID              shift and go to state 116


state 57

    COMMA           reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    SEMMICOLOM      reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    PUTS            reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    ID              reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    IF              reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    FOR             reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    WHILE           reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    DEF             reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    CASE            reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    UNTIL           reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    MODULE          reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    CLASS           reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    FUNCTIONS       reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    $end            reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    END             reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    ELSE            reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    ELSIF           reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    WHEN            reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)
    RETURN          reduce using rule 44 (identifierDecl -> identifierDecl SEMMICOLOM .)


state 58

    ID              shift and go to state 99
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 121
    STRING          shift and go to state 42

    expression_number_list         shift and go to state 117
    expression_string_list         shift and go to state 118
    expression_number              shift and go to state 119
    expression_string              shift and go to state 120

state 59

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 126
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    STRING          shift and go to state 42

    expression_number_list         shift and go to state 122
    expression_boolean_list        shift and go to state 123
    expression_number              shift and go to state 124
    expression_boolean             shift and go to state 125
    expression_string              shift and go to state 66

state 60

    ID              shift and go to state 127


state 61

    ID              reduce using rule 81 (assignment -> ASIGN .)
    NUMBER          reduce using rule 81 (assignment -> ASIGN .)
    MINUS           reduce using rule 81 (assignment -> ASIGN .)
    LEFTPARENT      reduce using rule 81 (assignment -> ASIGN .)
    BOOLEAN         reduce using rule 81 (assignment -> ASIGN .)
    ADMIRATION      reduce using rule 81 (assignment -> ASIGN .)
    STRING          reduce using rule 81 (assignment -> ASIGN .)
    LEFTBRACKET     reduce using rule 81 (assignment -> ASIGN .)


state 62

    RIGTHPARENT     reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    parameters                     shift and go to state 128
    expression                     shift and go to state 113
    empty                          shift and go to state 114
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 63

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93
    END             reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    ELSIF           reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 129
    relation                       shift and go to state 96
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 64

  ! reduce/reduce conflict for LESSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for LEQSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for GTRSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for GEQSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for DOUBLEQUAL resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for DIFERENTEQUAL resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for ORSYM resolved using rule 89 (expression_number -> ID .)
  ! reduce/reduce conflict for RIGTHPARENT resolved using rule 89 (expression_number -> ID .)
    PUTS            reduce using rule 95 (expression_boolean -> ID .)
    ID              reduce using rule 95 (expression_boolean -> ID .)
    IF              reduce using rule 95 (expression_boolean -> ID .)
    FOR             reduce using rule 95 (expression_boolean -> ID .)
    WHILE           reduce using rule 95 (expression_boolean -> ID .)
    DEF             reduce using rule 95 (expression_boolean -> ID .)
    CASE            reduce using rule 95 (expression_boolean -> ID .)
    UNTIL           reduce using rule 95 (expression_boolean -> ID .)
    MODULE          reduce using rule 95 (expression_boolean -> ID .)
    CLASS           reduce using rule 95 (expression_boolean -> ID .)
    FUNCTIONS       reduce using rule 95 (expression_boolean -> ID .)
    END             reduce using rule 95 (expression_boolean -> ID .)
    ELSE            reduce using rule 95 (expression_boolean -> ID .)
    ELSIF           reduce using rule 95 (expression_boolean -> ID .)
    DO              reduce using rule 95 (expression_boolean -> ID .)
    $end            reduce using rule 95 (expression_boolean -> ID .)
    WHEN            reduce using rule 95 (expression_boolean -> ID .)
    RETURN          reduce using rule 95 (expression_boolean -> ID .)
    COMMA           reduce using rule 95 (expression_boolean -> ID .)
    SEMMICOLOM      reduce using rule 95 (expression_boolean -> ID .)
    RIGTHBRAKET     reduce using rule 95 (expression_boolean -> ID .)
    KEYRIGHT        reduce using rule 95 (expression_boolean -> ID .)
    LEFTPARENT      shift and go to state 130
    LESSYM          reduce using rule 89 (expression_number -> ID .)
    LEQSYM          reduce using rule 89 (expression_number -> ID .)
    GTRSYM          reduce using rule 89 (expression_number -> ID .)
    GEQSYM          reduce using rule 89 (expression_number -> ID .)
    DOUBLEQUAL      reduce using rule 89 (expression_number -> ID .)
    DIFERENTEQUAL   reduce using rule 89 (expression_number -> ID .)
    AND             reduce using rule 89 (expression_number -> ID .)
    ANDSYM          reduce using rule 89 (expression_number -> ID .)
    OR              reduce using rule 89 (expression_number -> ID .)
    ORSYM           reduce using rule 89 (expression_number -> ID .)
    SUM             reduce using rule 89 (expression_number -> ID .)
    MINUS           reduce using rule 89 (expression_number -> ID .)
    MULTIPLICATION  reduce using rule 89 (expression_number -> ID .)
    DIVISION        reduce using rule 89 (expression_number -> ID .)
    PERCENT         reduce using rule 89 (expression_number -> ID .)
    SQUAREROOT      reduce using rule 89 (expression_number -> ID .)
    EXPONENT        reduce using rule 89 (expression_number -> ID .)
    RIGTHPARENT     reduce using rule 89 (expression_number -> ID .)

  ! LESSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! LEQSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! GTRSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! GEQSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! DOUBLEQUAL      [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! DIFERENTEQUAL   [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! AND             [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! ANDSYM          [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! OR              [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! ORSYM           [ reduce using rule 95 (expression_boolean -> ID .) ]
  ! RIGTHPARENT     [ reduce using rule 95 (expression_boolean -> ID .) ]


state 65

    ID              shift and go to state 64
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    LEFTPARENT      shift and go to state 65
    STRING          shift and go to state 42
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40

    expression_boolean             shift and go to state 103
    expression_string              shift and go to state 131
    expression_number              shift and go to state 132

state 66

    MULTIPLICATION  shift and go to state 94
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 95

state 67

    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

    relation                       shift and go to state 76
    operator_arithmetic            shift and go to state 75

state 68

    IN              shift and go to state 133


state 69

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    DO              shift and go to state 134
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 135
    relation                       shift and go to state 96
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 70

    LEFTPARENT      shift and go to state 136


state 71

    WHEN            shift and go to state 138

    when_list                      shift and go to state 137

state 72

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    DO              shift and go to state 139
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 140
    relation                       shift and go to state 96
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 73

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 141
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 74

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 142
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 75

    ID              shift and go to state 99
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 100

    expression_number              shift and go to state 143

state 76

    ID              shift and go to state 99
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 100

    expression_number              shift and go to state 144

state 77

    ID              reduce using rule 98 (operator_arithmetic -> SUM .)
    NUMBER          reduce using rule 98 (operator_arithmetic -> SUM .)
    MINUS           reduce using rule 98 (operator_arithmetic -> SUM .)
    LEFTPARENT      reduce using rule 98 (operator_arithmetic -> SUM .)


state 78

    ID              reduce using rule 99 (operator_arithmetic -> MINUS .)
    NUMBER          reduce using rule 99 (operator_arithmetic -> MINUS .)
    MINUS           reduce using rule 99 (operator_arithmetic -> MINUS .)
    LEFTPARENT      reduce using rule 99 (operator_arithmetic -> MINUS .)


state 79

    ID              reduce using rule 100 (operator_arithmetic -> MULTIPLICATION .)
    NUMBER          reduce using rule 100 (operator_arithmetic -> MULTIPLICATION .)
    MINUS           reduce using rule 100 (operator_arithmetic -> MULTIPLICATION .)
    LEFTPARENT      reduce using rule 100 (operator_arithmetic -> MULTIPLICATION .)


state 80

    ID              reduce using rule 102 (operator_arithmetic -> DIVISION .)
    NUMBER          reduce using rule 102 (operator_arithmetic -> DIVISION .)
    MINUS           reduce using rule 102 (operator_arithmetic -> DIVISION .)
    LEFTPARENT      reduce using rule 102 (operator_arithmetic -> DIVISION .)


state 81


    ID              reduce using rule 103 (operator_arithmetic -> PERCENT .)
    NUMBER          reduce using rule 103 (operator_arithmetic -> PERCENT .)
    MINUS           reduce using rule 103 (operator_arithmetic -> PERCENT .)
    LEFTPARENT      reduce using rule 103 (operator_arithmetic -> PERCENT .)


state 82


    ID              reduce using rule 104 (operator_arithmetic -> SQUAREROOT .)
    NUMBER          reduce using rule 104 (operator_arithmetic -> SQUAREROOT .)
    MINUS           reduce using rule 104 (operator_arithmetic -> SQUAREROOT .)
    LEFTPARENT      reduce using rule 104 (operator_arithmetic -> SQUAREROOT .)


state 83


    ID              reduce using rule 105 (operator_arithmetic -> EXPONENT .)
    NUMBER          reduce using rule 105 (operator_arithmetic -> EXPONENT .)
    MINUS           reduce using rule 105 (operator_arithmetic -> EXPONENT .)
    LEFTPARENT      reduce using rule 105 (operator_arithmetic -> EXPONENT .)


state 84


    ID              reduce using rule 113 (relation -> LESSYM .)
    NUMBER          reduce using rule 113 (relation -> LESSYM .)
    MINUS           reduce using rule 113 (relation -> LESSYM .)
    LEFTPARENT      reduce using rule 113 (relation -> LESSYM .)
    STRING          reduce using rule 113 (relation -> LESSYM .)
    BOOLEAN         reduce using rule 113 (relation -> LESSYM .)
    ADMIRATION      reduce using rule 113 (relation -> LESSYM .)


state 85


    ID              reduce using rule 114 (relation -> LEQSYM .)
    NUMBER          reduce using rule 114 (relation -> LEQSYM .)
    MINUS           reduce using rule 114 (relation -> LEQSYM .)
    LEFTPARENT      reduce using rule 114 (relation -> LEQSYM .)
    STRING          reduce using rule 114 (relation -> LEQSYM .)
    BOOLEAN         reduce using rule 114 (relation -> LEQSYM .)
    ADMIRATION      reduce using rule 114 (relation -> LEQSYM .)


state 86


    ID              reduce using rule 115 (relation -> GTRSYM .)
    NUMBER          reduce using rule 115 (relation -> GTRSYM .)
    MINUS           reduce using rule 115 (relation -> GTRSYM .)
    LEFTPARENT      reduce using rule 115 (relation -> GTRSYM .)
    STRING          reduce using rule 115 (relation -> GTRSYM .)
    BOOLEAN         reduce using rule 115 (relation -> GTRSYM .)
    ADMIRATION      reduce using rule 115 (relation -> GTRSYM .)


state 87


    ID              reduce using rule 116 (relation -> GEQSYM .)
    NUMBER          reduce using rule 116 (relation -> GEQSYM .)
    MINUS           reduce using rule 116 (relation -> GEQSYM .)
    LEFTPARENT      reduce using rule 116 (relation -> GEQSYM .)
    STRING          reduce using rule 116 (relation -> GEQSYM .)
    BOOLEAN         reduce using rule 116 (relation -> GEQSYM .)
    ADMIRATION      reduce using rule 116 (relation -> GEQSYM .)


state 88


    ID              reduce using rule 117 (relation -> DOUBLEQUAL .)
    NUMBER          reduce using rule 117 (relation -> DOUBLEQUAL .)
    MINUS           reduce using rule 117 (relation -> DOUBLEQUAL .)
    LEFTPARENT      reduce using rule 117 (relation -> DOUBLEQUAL .)
    STRING          reduce using rule 117 (relation -> DOUBLEQUAL .)
    BOOLEAN         reduce using rule 117 (relation -> DOUBLEQUAL .)
    ADMIRATION      reduce using rule 117 (relation -> DOUBLEQUAL .)


state 89


    ID              reduce using rule 118 (relation -> DIFERENTEQUAL .)
    NUMBER          reduce using rule 118 (relation -> DIFERENTEQUAL .)
    MINUS           reduce using rule 118 (relation -> DIFERENTEQUAL .)
    LEFTPARENT      reduce using rule 118 (relation -> DIFERENTEQUAL .)
    STRING          reduce using rule 118 (relation -> DIFERENTEQUAL .)
    BOOLEAN         reduce using rule 118 (relation -> DIFERENTEQUAL .)
    ADMIRATION      reduce using rule 118 (relation -> DIFERENTEQUAL .)


state 90


    ID              reduce using rule 119 (relation -> AND .)
    NUMBER          reduce using rule 119 (relation -> AND .)
    MINUS           reduce using rule 119 (relation -> AND .)
    LEFTPARENT      reduce using rule 119 (relation -> AND .)
    STRING          reduce using rule 119 (relation -> AND .)
    BOOLEAN         reduce using rule 119 (relation -> AND .)
    ADMIRATION      reduce using rule 119 (relation -> AND .)


state 91

    ID              reduce using rule 120 (relation -> ANDSYM .)
    NUMBER          reduce using rule 120 (relation -> ANDSYM .)
    MINUS           reduce using rule 120 (relation -> ANDSYM .)
    LEFTPARENT      reduce using rule 120 (relation -> ANDSYM .)
    STRING          reduce using rule 120 (relation -> ANDSYM .)
    BOOLEAN         reduce using rule 120 (relation -> ANDSYM .)
    ADMIRATION      reduce using rule 120 (relation -> ANDSYM .)


state 92

    ID              reduce using rule 121 (relation -> OR .)
    NUMBER          reduce using rule 121 (relation -> OR .)
    MINUS           reduce using rule 121 (relation -> OR .)
    LEFTPARENT      reduce using rule 121 (relation -> OR .)
    STRING          reduce using rule 121 (relation -> OR .)
    BOOLEAN         reduce using rule 121 (relation -> OR .)
    ADMIRATION      reduce using rule 121 (relation -> OR .)


state 93

    ID              reduce using rule 122 (relation -> ORSYM .)
    NUMBER          reduce using rule 122 (relation -> ORSYM .)
    MINUS           reduce using rule 122 (relation -> ORSYM .)
    LEFTPARENT      reduce using rule 122 (relation -> ORSYM .)
    STRING          reduce using rule 122 (relation -> ORSYM .)
    BOOLEAN         reduce using rule 122 (relation -> ORSYM .)
    ADMIRATION      reduce using rule 122 (relation -> ORSYM .)


state 94

    ID              shift and go to state 99
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 100

    expression_number              shift and go to state 145

state 95

    STRING          shift and go to state 42
    LEFTPARENT      shift and go to state 147

    expression_string              shift and go to state 146

state 96

    ID              shift and go to state 64
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    LEFTPARENT      shift and go to state 65
    STRING          shift and go to state 42
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40

    expression_boolean             shift and go to state 148
    expression_string              shift and go to state 66
    expression_number              shift and go to state 67

state 97

    RIGTHPARENT     reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    parameters                     shift and go to state 149
    expression                     shift and go to state 113
    empty                          shift and go to state 114
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 98

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    LESSYM          reduce using rule 92 (expression_number -> MINUS expression_number .)
    LEQSYM          reduce using rule 92 (expression_number -> MINUS expression_number .)
    GTRSYM          reduce using rule 92 (expression_number -> MINUS expression_number .)
    GEQSYM          reduce using rule 92 (expression_number -> MINUS expression_number .)
    DOUBLEQUAL      reduce using rule 92 (expression_number -> MINUS expression_number .)
    DIFERENTEQUAL   reduce using rule 92 (expression_number -> MINUS expression_number .)
    AND             reduce using rule 92 (expression_number -> MINUS expression_number .)
    ANDSYM          reduce using rule 92 (expression_number -> MINUS expression_number .)
    OR              reduce using rule 92 (expression_number -> MINUS expression_number .)
    ORSYM           reduce using rule 92 (expression_number -> MINUS expression_number .)
    PUTS            reduce using rule 92 (expression_number -> MINUS expression_number .)
    ID              reduce using rule 92 (expression_number -> MINUS expression_number .)
    IF              reduce using rule 92 (expression_number -> MINUS expression_number .)
    FOR             reduce using rule 92 (expression_number -> MINUS expression_number .)
    WHILE           reduce using rule 92 (expression_number -> MINUS expression_number .)
    DEF             reduce using rule 92 (expression_number -> MINUS expression_number .)
    CASE            reduce using rule 92 (expression_number -> MINUS expression_number .)
    UNTIL           reduce using rule 92 (expression_number -> MINUS expression_number .)
    MODULE          reduce using rule 92 (expression_number -> MINUS expression_number .)
    CLASS           reduce using rule 92 (expression_number -> MINUS expression_number .)
    FUNCTIONS       reduce using rule 92 (expression_number -> MINUS expression_number .)
    $end            reduce using rule 92 (expression_number -> MINUS expression_number .)
    END             reduce using rule 92 (expression_number -> MINUS expression_number .)
    ELSE            reduce using rule 92 (expression_number -> MINUS expression_number .)
    ELSIF           reduce using rule 92 (expression_number -> MINUS expression_number .)
    WHEN            reduce using rule 92 (expression_number -> MINUS expression_number .)
    RETURN          reduce using rule 92 (expression_number -> MINUS expression_number .)
    RIGTHPARENT     reduce using rule 92 (expression_number -> MINUS expression_number .)
    COMMA           reduce using rule 92 (expression_number -> MINUS expression_number .)
    SEMMICOLOM      reduce using rule 92 (expression_number -> MINUS expression_number .)
    DO              reduce using rule 92 (expression_number -> MINUS expression_number .)
    RIGTHBRAKET     reduce using rule 92 (expression_number -> MINUS expression_number .)
    KEYRIGHT        reduce using rule 92 (expression_number -> MINUS expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

  ! SUM             [ reduce using rule 92 (expression_number -> MINUS expression_number .) ]
  ! MINUS           [ reduce using rule 92 (expression_number -> MINUS expression_number .) ]
  ! MULTIPLICATION  [ reduce using rule 92 (expression_number -> MINUS expression_number .) ]
  ! DIVISION        [ reduce using rule 92 (expression_number -> MINUS expression_number .) ]
  ! PERCENT         [ reduce using rule 92 (expression_number -> MINUS expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 92 (expression_number -> MINUS expression_number .) ]
  ! EXPONENT        [ reduce using rule 92 (expression_number -> MINUS expression_number .) ]

    operator_arithmetic            shift and go to state 75

state 99


    SUM             reduce using rule 89 (expression_number -> ID .)
    MINUS           reduce using rule 89 (expression_number -> ID .)
    MULTIPLICATION  reduce using rule 89 (expression_number -> ID .)
    DIVISION        reduce using rule 89 (expression_number -> ID .)
    PERCENT         reduce using rule 89 (expression_number -> ID .)
    SQUAREROOT      reduce using rule 89 (expression_number -> ID .)
    EXPONENT        reduce using rule 89 (expression_number -> ID .)
    LESSYM          reduce using rule 89 (expression_number -> ID .)
    LEQSYM          reduce using rule 89 (expression_number -> ID .)
    GTRSYM          reduce using rule 89 (expression_number -> ID .)
    GEQSYM          reduce using rule 89 (expression_number -> ID .)
    DOUBLEQUAL      reduce using rule 89 (expression_number -> ID .)
    DIFERENTEQUAL   reduce using rule 89 (expression_number -> ID .)
    AND             reduce using rule 89 (expression_number -> ID .)
    ANDSYM          reduce using rule 89 (expression_number -> ID .)
    OR              reduce using rule 89 (expression_number -> ID .)
    ORSYM           reduce using rule 89 (expression_number -> ID .)
    PUTS            reduce using rule 89 (expression_number -> ID .)
    ID              reduce using rule 89 (expression_number -> ID .)
    IF              reduce using rule 89 (expression_number -> ID .)
    FOR             reduce using rule 89 (expression_number -> ID .)
    WHILE           reduce using rule 89 (expression_number -> ID .)
    DEF             reduce using rule 89 (expression_number -> ID .)
    CASE            reduce using rule 89 (expression_number -> ID .)
    UNTIL           reduce using rule 89 (expression_number -> ID .)
    MODULE          reduce using rule 89 (expression_number -> ID .)
    CLASS           reduce using rule 89 (expression_number -> ID .)
    FUNCTIONS       reduce using rule 89 (expression_number -> ID .)
    $end            reduce using rule 89 (expression_number -> ID .)
    END             reduce using rule 89 (expression_number -> ID .)
    ELSE            reduce using rule 89 (expression_number -> ID .)
    ELSIF           reduce using rule 89 (expression_number -> ID .)
    WHEN            reduce using rule 89 (expression_number -> ID .)
    RETURN          reduce using rule 89 (expression_number -> ID .)
    RIGTHPARENT     reduce using rule 89 (expression_number -> ID .)
    COMMA           reduce using rule 89 (expression_number -> ID .)
    SEMMICOLOM      reduce using rule 89 (expression_number -> ID .)
    DO              reduce using rule 89 (expression_number -> ID .)
    RIGTHBRAKET     reduce using rule 89 (expression_number -> ID .)
    KEYRIGHT        reduce using rule 89 (expression_number -> ID .)
    LEFTPARENT      shift and go to state 150


state 100

    ID              shift and go to state 99
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 100

    expression_number              shift and go to state 151

state 101


    RIGTHPARENT     shift and go to state 152
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    operator_arithmetic            shift and go to state 75
    relation                       shift and go to state 76

state 102

    RIGTHPARENT     shift and go to state 153
    MULTIPLICATION  shift and go to state 94
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 95

state 103

    RIGTHPARENT     shift and go to state 154
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 96

state 104

  ! shift/reduce conflict for LESSYM resolved as shift
  ! shift/reduce conflict for LEQSYM resolved as shift
  ! shift/reduce conflict for GTRSYM resolved as shift
  ! shift/reduce conflict for GEQSYM resolved as shift
  ! shift/reduce conflict for DOUBLEQUAL resolved as shift
  ! shift/reduce conflict for DIFERENTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for ANDSYM resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for ORSYM resolved as shift
    PUTS            reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    ID              reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    IF              reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    FOR             reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    WHILE           reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    DEF             reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    CASE            reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    UNTIL           reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    MODULE          reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    CLASS           reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    FUNCTIONS       reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    $end            reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    END             reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    ELSE            reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    ELSIF           reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    WHEN            reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    RETURN          reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    DO              reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    RIGTHPARENT     reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    COMMA           reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    SEMMICOLOM      reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    RIGTHBRAKET     reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    KEYRIGHT        reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .)
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

  ! LESSYM          [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! LEQSYM          [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! GTRSYM          [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! GEQSYM          [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! DOUBLEQUAL      [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! DIFERENTEQUAL   [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! AND             [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! ANDSYM          [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! OR              [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]
  ! ORSYM           [ reduce using rule 109 (expression_boolean -> ADMIRATION expression_boolean .) ]

    relation                       shift and go to state 96

state 105

    LEFTPARENT      shift and go to state 155
    SUM             reduce using rule 89 (expression_number -> ID .)
    MINUS           reduce using rule 89 (expression_number -> ID .)
    MULTIPLICATION  reduce using rule 89 (expression_number -> ID .)
    DIVISION        reduce using rule 89 (expression_number -> ID .)
    PERCENT         reduce using rule 89 (expression_number -> ID .)
    SQUAREROOT      reduce using rule 89 (expression_number -> ID .)
    EXPONENT        reduce using rule 89 (expression_number -> ID .)
    COMMA           reduce using rule 89 (expression_number -> ID .)
    SEMMICOLOM      reduce using rule 89 (expression_number -> ID .)
    PUTS            reduce using rule 89 (expression_number -> ID .)
    ID              reduce using rule 89 (expression_number -> ID .)
    IF              reduce using rule 89 (expression_number -> ID .)
    FOR             reduce using rule 89 (expression_number -> ID .)
    WHILE           reduce using rule 89 (expression_number -> ID .)
    DEF             reduce using rule 89 (expression_number -> ID .)
    CASE            reduce using rule 89 (expression_number -> ID .)
    UNTIL           reduce using rule 89 (expression_number -> ID .)
    MODULE          reduce using rule 89 (expression_number -> ID .)
    CLASS           reduce using rule 89 (expression_number -> ID .)
    FUNCTIONS       reduce using rule 89 (expression_number -> ID .)
    $end            reduce using rule 89 (expression_number -> ID .)
    END             reduce using rule 89 (expression_number -> ID .)
    ELSE            reduce using rule 89 (expression_number -> ID .)
    ELSIF           reduce using rule 89 (expression_number -> ID .)
    WHEN            reduce using rule 89 (expression_number -> ID .)
    RETURN          reduce using rule 89 (expression_number -> ID .)


state 106

    COMMA           reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    SEMMICOLOM      reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    PUTS            reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    ID              reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    IF              reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    FOR             reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    WHILE           reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    DEF             reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    CASE            reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    UNTIL           reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    MODULE          reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    CLASS           reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    FUNCTIONS       reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    $end            reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    END             reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    ELSE            reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    ELSIF           reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    WHEN            reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    RETURN          reduce using rule 21 (identifierDecl -> ID assignment_number expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

    operator_arithmetic            shift and go to state 75

state 107

    COMMA           reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    SEMMICOLOM      reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    PUTS            reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    ID              reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    IF              reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    FOR             reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    WHILE           reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    DEF             reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    CASE            reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    UNTIL           reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    MODULE          reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    CLASS           reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    FUNCTIONS       reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    $end            reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    END             reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    ELSE            reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    ELSIF           reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    WHEN            reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    RETURN          reduce using rule 22 (identifierDecl -> ID assignment expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    operator_arithmetic            shift and go to state 75
    relation                       shift and go to state 76

state 108

    COMMA           reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    SEMMICOLOM      reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    PUTS            reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    ID              reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    IF              reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    FOR             reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    WHILE           reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    DEF             reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    CASE            reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    UNTIL           reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    MODULE          reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    CLASS           reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    FUNCTIONS       reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    $end            reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    END             reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    ELSE            reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    ELSIF           reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    WHEN            reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    RETURN          reduce using rule 24 (identifierDecl -> ID assignment expression_string .)
    MULTIPLICATION  shift and go to state 94
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 95

state 109

    COMMA           reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    SEMMICOLOM      reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    PUTS            reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    ID              reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    IF              reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    FOR             reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    WHILE           reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    DEF             reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    CASE            reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    UNTIL           reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    MODULE          reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    CLASS           reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    FUNCTIONS       reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    $end            reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    END             reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    ELSE            reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    ELSIF           reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    WHEN            reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    RETURN          reduce using rule 25 (identifierDecl -> ID assignment expression_boolean .)
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 96

state 110

    RIGTHBRAKET     reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    array_elements                 shift and go to state 156
    expression                     shift and go to state 157
    empty                          shift and go to state 158
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 111


    LEFTBRACKET     shift and go to state 159
    COMMA           reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    SEMMICOLOM      reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    PUTS            reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    ID              reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    IF              reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    FOR             reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    WHILE           reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    DEF             reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    CASE            reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    UNTIL           reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    MODULE          reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    CLASS           reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    FUNCTIONS       reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    $end            reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    END             reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    ELSE            reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    ELSIF           reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    WHEN            reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    RETURN          reduce using rule 40 (identifierDecl -> ID assignment FUNCTIONS .)
    QUESTIONMARK    shift and go to state 160
    LEFTPARENT      shift and go to state 161


state 112

    (73) statement_call_function -> ID LEFTPARENT parameters . RIGTHPARENT

    RIGTHPARENT     shift and go to state 162


state 113

    RIGTHPARENT     reduce using rule 75 (parameters -> expression .)
    COMMA           shift and go to state 163


state 114

    RIGTHPARENT     reduce using rule 77 (parameters -> empty .)


state 115


    LEFTPARENT      shift and go to state 164


state 116

    ASIGN           shift and go to state 61
    DOT             shift and go to state 55

    assignment                     shift and go to state 165

state 117

  ! shift/reduce conflict for COMMA resolved as shift
    SEMMICOLOM      reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    PUTS            reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    ID              reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    IF              reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    FOR             reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    WHILE           reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    DEF             reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    CASE            reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    UNTIL           reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    MODULE          reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    CLASS           reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    FUNCTIONS       reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    $end            reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    END             reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    ELSE            reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    ELSIF           reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    WHEN            reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    RETURN          reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .)
    COMMA           shift and go to state 166

  ! COMMA           [ reduce using rule 26 (identifierDecl -> identifierList assignment_number expression_number_list .) ]


state 118


  ! shift/reduce conflict for COMMA resolved as shift
    SEMMICOLOM      reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    PUTS            reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    ID              reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    IF              reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    FOR             reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    WHILE           reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    DEF             reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    CASE            reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    UNTIL           reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    MODULE          reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    CLASS           reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    FUNCTIONS       reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    $end            reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    END             reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    ELSE            reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    ELSIF           reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    WHEN            reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    RETURN          reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .)
    COMMA           shift and go to state 167

  ! COMMA           [ reduce using rule 28 (identifierDecl -> identifierList assignment_number expression_string_list .) ]


state 119

    COMMA           reduce using rule 32 (expression_number_list -> expression_number .)
    SEMMICOLOM      reduce using rule 32 (expression_number_list -> expression_number .)
    PUTS            reduce using rule 32 (expression_number_list -> expression_number .)
    ID              reduce using rule 32 (expression_number_list -> expression_number .)
    IF              reduce using rule 32 (expression_number_list -> expression_number .)
    FOR             reduce using rule 32 (expression_number_list -> expression_number .)
    WHILE           reduce using rule 32 (expression_number_list -> expression_number .)
    DEF             reduce using rule 32 (expression_number_list -> expression_number .)
    CASE            reduce using rule 32 (expression_number_list -> expression_number .)
    UNTIL           reduce using rule 32 (expression_number_list -> expression_number .)
    MODULE          reduce using rule 32 (expression_number_list -> expression_number .)
    CLASS           reduce using rule 32 (expression_number_list -> expression_number .)
    FUNCTIONS       reduce using rule 32 (expression_number_list -> expression_number .)
    $end            reduce using rule 32 (expression_number_list -> expression_number .)
    END             reduce using rule 32 (expression_number_list -> expression_number .)
    ELSE            reduce using rule 32 (expression_number_list -> expression_number .)
    ELSIF           reduce using rule 32 (expression_number_list -> expression_number .)
    WHEN            reduce using rule 32 (expression_number_list -> expression_number .)
    RETURN          reduce using rule 32 (expression_number_list -> expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

    operator_arithmetic            shift and go to state 75

state 120

    (34) expression_string_list -> expression_string .
    (101) expression_string -> expression_string . MULTIPLICATION expression_number

    COMMA           reduce using rule 34 (expression_string_list -> expression_string .)
    SEMMICOLOM      reduce using rule 34 (expression_string_list -> expression_string .)
    PUTS            reduce using rule 34 (expression_string_list -> expression_string .)
    ID              reduce using rule 34 (expression_string_list -> expression_string .)
    IF              reduce using rule 34 (expression_string_list -> expression_string .)
    FOR             reduce using rule 34 (expression_string_list -> expression_string .)
    WHILE           reduce using rule 34 (expression_string_list -> expression_string .)
    DEF             reduce using rule 34 (expression_string_list -> expression_string .)
    CASE            reduce using rule 34 (expression_string_list -> expression_string .)
    UNTIL           reduce using rule 34 (expression_string_list -> expression_string .)
    MODULE          reduce using rule 34 (expression_string_list -> expression_string .)
    CLASS           reduce using rule 34 (expression_string_list -> expression_string .)
    FUNCTIONS       reduce using rule 34 (expression_string_list -> expression_string .)
    $end            reduce using rule 34 (expression_string_list -> expression_string .)
    END             reduce using rule 34 (expression_string_list -> expression_string .)
    ELSE            reduce using rule 34 (expression_string_list -> expression_string .)
    ELSIF           reduce using rule 34 (expression_string_list -> expression_string .)
    WHEN            reduce using rule 34 (expression_string_list -> expression_string .)
    RETURN          reduce using rule 34 (expression_string_list -> expression_string .)
    MULTIPLICATION  shift and go to state 94


state 121

    ID              shift and go to state 99
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 121
    STRING          shift and go to state 42

    expression_number              shift and go to state 151
    expression_string              shift and go to state 168

state 122

  ! shift/reduce conflict for COMMA resolved as shift
    SEMMICOLOM      reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    PUTS            reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    ID              reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    IF              reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    FOR             reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    WHILE           reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    DEF             reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    CASE            reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    UNTIL           reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    MODULE          reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    CLASS           reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    FUNCTIONS       reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    $end            reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    END             reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    ELSE            reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    ELSIF           reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    WHEN            reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    RETURN          reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .)
    COMMA           shift and go to state 166

  ! COMMA           [ reduce using rule 27 (identifierDecl -> identifierList assignment expression_number_list .) ]


state 123

  ! shift/reduce conflict for COMMA resolved as shift
    SEMMICOLOM      reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    PUTS            reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    ID              reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    IF              reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    FOR             reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    WHILE           reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    DEF             reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    CASE            reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    UNTIL           reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    MODULE          reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    CLASS           reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    FUNCTIONS       reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    $end            reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    END             reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    ELSE            reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    ELSIF           reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    WHEN            reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    RETURN          reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .)
    COMMA           shift and go to state 169

  ! COMMA           [ reduce using rule 29 (identifierDecl -> identifierList assignment expression_boolean_list .) ]


state 124

    COMMA           reduce using rule 32 (expression_number_list -> expression_number .)
    SEMMICOLOM      reduce using rule 32 (expression_number_list -> expression_number .)
    PUTS            reduce using rule 32 (expression_number_list -> expression_number .)
    ID              reduce using rule 32 (expression_number_list -> expression_number .)
    IF              reduce using rule 32 (expression_number_list -> expression_number .)
    FOR             reduce using rule 32 (expression_number_list -> expression_number .)
    WHILE           reduce using rule 32 (expression_number_list -> expression_number .)
    DEF             reduce using rule 32 (expression_number_list -> expression_number .)
    CASE            reduce using rule 32 (expression_number_list -> expression_number .)
    UNTIL           reduce using rule 32 (expression_number_list -> expression_number .)
    MODULE          reduce using rule 32 (expression_number_list -> expression_number .)
    CLASS           reduce using rule 32 (expression_number_list -> expression_number .)
    FUNCTIONS       reduce using rule 32 (expression_number_list -> expression_number .)
    $end            reduce using rule 32 (expression_number_list -> expression_number .)
    END             reduce using rule 32 (expression_number_list -> expression_number .)
    ELSE            reduce using rule 32 (expression_number_list -> expression_number .)
    ELSIF           reduce using rule 32 (expression_number_list -> expression_number .)
    WHEN            reduce using rule 32 (expression_number_list -> expression_number .)
    RETURN          reduce using rule 32 (expression_number_list -> expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    operator_arithmetic            shift and go to state 75
    relation                       shift and go to state 76

state 125

    COMMA           reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    SEMMICOLOM      reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    PUTS            reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    ID              reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    IF              reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    FOR             reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    WHILE           reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    DEF             reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    CASE            reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    UNTIL           reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    MODULE          reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    CLASS           reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    FUNCTIONS       reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    $end            reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    END             reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    ELSE            reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    ELSIF           reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    WHEN            reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    RETURN          reduce using rule 36 (expression_boolean_list -> expression_boolean .)
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 96

state 126

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 126
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    STRING          shift and go to state 42

    expression_number              shift and go to state 101
    expression_boolean             shift and go to state 103
    expression_string              shift and go to state 131

state 127

    (31) identifierList -> identifierList COMMA ID .

    COMMA           reduce using rule 31 (identifierList -> identifierList COMMA ID .)
    SUMASIGN        reduce using rule 31 (identifierList -> identifierList COMMA ID .)
    MINASIGN        reduce using rule 31 (identifierList -> identifierList COMMA ID .)
    MULTASIGN       reduce using rule 31 (identifierList -> identifierList COMMA ID .)
    DIVASIGN        reduce using rule 31 (identifierList -> identifierList COMMA ID .)
    MODULEASIGN     reduce using rule 31 (identifierList -> identifierList COMMA ID .)
    EXPONENTASIGN   reduce using rule 31 (identifierList -> identifierList COMMA ID .)
    ASIGN           reduce using rule 31 (identifierList -> identifierList COMMA ID .)
    DOT             reduce using rule 31 (identifierList -> identifierList COMMA ID .)


state 128

    (74) statement_function_ruby -> FUNCTIONS LEFTPARENT parameters . RIGTHPARENT

    RIGTHPARENT     shift and go to state 170


state 129

    END             shift and go to state 171
    ELSE            shift and go to state 172
    ELSIF           shift and go to state 174
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    elsif_list                     shift and go to state 173
    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 130

    RIGTHPARENT     reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    parameters                     shift and go to state 175
    expression                     shift and go to state 113
    empty                          shift and go to state 114
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 131

    RIGTHPARENT     shift and go to state 153
    MULTIPLICATION  shift and go to state 94
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 95

state 132

    RIGTHPARENT     shift and go to state 152
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

    relation                       shift and go to state 76
    operator_arithmetic            shift and go to state 75

state 133

    (56) statement_for -> FOR ID IN . ID statement_list END
    (57) statement_for -> FOR ID IN . NUMBER DOUBLEDOT NUMBER statement_list END
    (58) statement_for -> FOR ID IN . LEFTBRACKET array_elements RIGTHBRAKET statement_list END

    ID              shift and go to state 176
    NUMBER          shift and go to state 177
    LEFTBRACKET     shift and go to state 178


state 134

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 179
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 135

    END             shift and go to state 180
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 136

    RIGTHPARENT     reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    parameters                     shift and go to state 181
    expression                     shift and go to state 113
    empty                          shift and go to state 114
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 137

    (66) statement_case -> CASE ID when_list .

    PUTS            reduce using rule 66 (statement_case -> CASE ID when_list .)
    ID              reduce using rule 66 (statement_case -> CASE ID when_list .)
    IF              reduce using rule 66 (statement_case -> CASE ID when_list .)
    FOR             reduce using rule 66 (statement_case -> CASE ID when_list .)
    WHILE           reduce using rule 66 (statement_case -> CASE ID when_list .)
    DEF             reduce using rule 66 (statement_case -> CASE ID when_list .)
    CASE            reduce using rule 66 (statement_case -> CASE ID when_list .)
    UNTIL           reduce using rule 66 (statement_case -> CASE ID when_list .)
    MODULE          reduce using rule 66 (statement_case -> CASE ID when_list .)
    CLASS           reduce using rule 66 (statement_case -> CASE ID when_list .)
    FUNCTIONS       reduce using rule 66 (statement_case -> CASE ID when_list .)
    $end            reduce using rule 66 (statement_case -> CASE ID when_list .)
    END             reduce using rule 66 (statement_case -> CASE ID when_list .)
    ELSE            reduce using rule 66 (statement_case -> CASE ID when_list .)
    ELSIF           reduce using rule 66 (statement_case -> CASE ID when_list .)
    WHEN            reduce using rule 66 (statement_case -> CASE ID when_list .)
    RETURN          reduce using rule 66 (statement_case -> CASE ID when_list .)


state 138

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    expression                     shift and go to state 182
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 139

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 183
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 140

    END             shift and go to state 184
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 141

    END             shift and go to state 185
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 142

    END             shift and go to state 186
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 143

  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SQUAREROOT resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    LESSYM          reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    LEQSYM          reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    GTRSYM          reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    GEQSYM          reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    DOUBLEQUAL      reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    DIFERENTEQUAL   reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    AND             reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    ANDSYM          reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    OR              reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    ORSYM           reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    PUTS            reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    ID              reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    IF              reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    FOR             reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    WHILE           reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    DEF             reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    CASE            reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    UNTIL           reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    MODULE          reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    CLASS           reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    FUNCTIONS       reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    $end            reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    END             reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    ELSE            reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    ELSIF           reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    WHEN            reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    RETURN          reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    RIGTHPARENT     reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    COMMA           reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    SEMMICOLOM      reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    DO              reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    RIGTHBRAKET     reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    KEYRIGHT        reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

  ! SUM             [ reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! MINUS           [ reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! MULTIPLICATION  [ reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! DIVISION        [ reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! PERCENT         [ reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! SQUAREROOT      [ reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .) ]
  ! EXPONENT        [ reduce using rule 91 (expression_number -> expression_number operator_arithmetic expression_number .) ]

    operator_arithmetic            shift and go to state 75

state 144

    LESSYM          reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    LEQSYM          reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    GTRSYM          reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    GEQSYM          reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    DOUBLEQUAL      reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    DIFERENTEQUAL   reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    AND             reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    ANDSYM          reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    OR              reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    ORSYM           reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    PUTS            reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    ID              reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    IF              reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    FOR             reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    WHILE           reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    DEF             reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    CASE            reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    UNTIL           reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    MODULE          reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    CLASS           reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    FUNCTIONS       reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    $end            reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    END             reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    ELSE            reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    ELSIF           reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    WHEN            reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    RETURN          reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    DO              reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    RIGTHPARENT     reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    COMMA           reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    SEMMICOLOM      reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    RIGTHBRAKET     reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    KEYRIGHT        reduce using rule 111 (expression_boolean -> expression_number relation expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

    operator_arithmetic            shift and go to state 75

state 145


  ! shift/reduce conflict for MULTIPLICATION resolved as shift
    LESSYM          reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    LEQSYM          reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    GTRSYM          reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    GEQSYM          reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    DOUBLEQUAL      reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    DIFERENTEQUAL   reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    AND             reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    ANDSYM          reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    OR              reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    ORSYM           reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    PUTS            reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    ID              reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    IF              reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    FOR             reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    WHILE           reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    DEF             reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    CASE            reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    UNTIL           reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    MODULE          reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    CLASS           reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    FUNCTIONS       reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    $end            reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    END             reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    ELSE            reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    ELSIF           reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    WHEN            reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    RETURN          reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    RIGTHPARENT     reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    COMMA           reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    SEMMICOLOM      reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    DO              reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    RIGTHBRAKET     reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    KEYRIGHT        reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

  ! MULTIPLICATION  [ reduce using rule 101 (expression_string -> expression_string MULTIPLICATION expression_number .) ]

    operator_arithmetic            shift and go to state 75

state 146

    LESSYM          reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    LEQSYM          reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    GTRSYM          reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    GEQSYM          reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    DOUBLEQUAL      reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    DIFERENTEQUAL   reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    AND             reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    ANDSYM          reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    OR              reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    ORSYM           reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    PUTS            reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    ID              reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    IF              reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    FOR             reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    WHILE           reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    DEF             reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    CASE            reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    UNTIL           reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    MODULE          reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    CLASS           reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    FUNCTIONS       reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    $end            reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    END             reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    ELSE            reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    ELSIF           reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    WHEN            reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    RETURN          reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    DO              reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    RIGTHPARENT     reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    COMMA           reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    SEMMICOLOM      reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    RIGTHBRAKET     reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    KEYRIGHT        reduce using rule 110 (expression_boolean -> expression_string relation expression_string .)
    MULTIPLICATION  shift and go to state 94


state 147

    STRING          shift and go to state 42
    LEFTPARENT      shift and go to state 147

    expression_string              shift and go to state 168

state 148

  ! shift/reduce conflict for LESSYM resolved as shift
  ! shift/reduce conflict for LEQSYM resolved as shift
  ! shift/reduce conflict for GTRSYM resolved as shift
  ! shift/reduce conflict for GEQSYM resolved as shift
  ! shift/reduce conflict for DOUBLEQUAL resolved as shift
  ! shift/reduce conflict for DIFERENTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for ANDSYM resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for ORSYM resolved as shift
    PUTS            reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    ID              reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    IF              reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    FOR             reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    WHILE           reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    DEF             reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    CASE            reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    UNTIL           reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    MODULE          reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    CLASS           reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    FUNCTIONS       reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    $end            reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    END             reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    ELSE            reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    ELSIF           reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    WHEN            reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    RETURN          reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    DO              reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    RIGTHPARENT     reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    COMMA           reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    SEMMICOLOM      reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    RIGTHBRAKET     reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    KEYRIGHT        reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .)
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

  ! LESSYM          [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! LEQSYM          [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! GTRSYM          [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! GEQSYM          [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! DOUBLEQUAL      [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! DIFERENTEQUAL   [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! AND             [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! ANDSYM          [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! OR              [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]
  ! ORSYM           [ reduce using rule 108 (expression_boolean -> expression_boolean relation expression_boolean .) ]

    relation                       shift and go to state 96

state 149


    RIGTHPARENT     shift and go to state 187


state 150

    RIGTHPARENT     reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    parameters                     shift and go to state 188
    expression                     shift and go to state 113
    empty                          shift and go to state 114
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 151

    RIGTHPARENT     shift and go to state 152
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

    operator_arithmetic            shift and go to state 75

state 152

    (106) expression_number -> LEFTPARENT expression_number RIGTHPARENT .

    SUM             reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    MINUS           reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    MULTIPLICATION  reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    DIVISION        reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    PERCENT         reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    SQUAREROOT      reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    EXPONENT        reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    LESSYM          reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    LEQSYM          reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    GTRSYM          reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    GEQSYM          reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    DOUBLEQUAL      reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    DIFERENTEQUAL   reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    AND             reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    ANDSYM          reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    OR              reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    ORSYM           reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    PUTS            reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    ID              reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    IF              reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    FOR             reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    WHILE           reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    DEF             reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    CASE            reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    UNTIL           reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    MODULE          reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    CLASS           reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    FUNCTIONS       reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    $end            reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    END             reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    ELSE            reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    ELSIF           reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    WHEN            reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    RETURN          reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    RIGTHPARENT     reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    COMMA           reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    SEMMICOLOM      reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    DO              reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    RIGTHBRAKET     reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)
    KEYRIGHT        reduce using rule 106 (expression_number -> LEFTPARENT expression_number RIGTHPARENT .)


state 153

    (107) expression_string -> LEFTPARENT expression_string RIGTHPARENT .

    MULTIPLICATION  reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    LESSYM          reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    LEQSYM          reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    GTRSYM          reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    GEQSYM          reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    DOUBLEQUAL      reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    DIFERENTEQUAL   reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    AND             reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    ANDSYM          reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    OR              reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    ORSYM           reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    PUTS            reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    ID              reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    IF              reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    FOR             reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    WHILE           reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    DEF             reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    CASE            reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    UNTIL           reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    MODULE          reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    CLASS           reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    FUNCTIONS       reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    $end            reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    END             reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    ELSE            reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    ELSIF           reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    WHEN            reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    RETURN          reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    RIGTHPARENT     reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    COMMA           reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    SEMMICOLOM      reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    DO              reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    RIGTHBRAKET     reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)
    KEYRIGHT        reduce using rule 107 (expression_string -> LEFTPARENT expression_string RIGTHPARENT .)


state 154

    (112) expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .

    LESSYM          reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    LEQSYM          reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    GTRSYM          reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    GEQSYM          reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    DOUBLEQUAL      reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    DIFERENTEQUAL   reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    AND             reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    ANDSYM          reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    OR              reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    ORSYM           reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    PUTS            reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    ID              reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    IF              reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    FOR             reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    WHILE           reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    DEF             reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    CASE            reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    UNTIL           reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    MODULE          reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    CLASS           reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    FUNCTIONS       reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    $end            reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    END             reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    ELSE            reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    ELSIF           reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    WHEN            reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    RETURN          reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    DO              reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    RIGTHPARENT     reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    COMMA           reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    SEMMICOLOM      reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    RIGTHBRAKET     reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)
    KEYRIGHT        reduce using rule 112 (expression_boolean -> LEFTPARENT expression_boolean RIGTHPARENT .)


state 155

    RIGTHPARENT     reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    parameters                     shift and go to state 189
    expression                     shift and go to state 113
    empty                          shift and go to state 114
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 156

    RIGTHBRAKET     shift and go to state 190
    COMMA           shift and go to state 191


state 157

    (45) array_elements -> expression .

    RIGTHBRAKET     reduce using rule 45 (array_elements -> expression .)
    COMMA           reduce using rule 45 (array_elements -> expression .)


state 158

    (46) array_elements -> empty .

    RIGTHBRAKET     reduce using rule 46 (array_elements -> empty .)
    COMMA           reduce using rule 46 (array_elements -> empty .)


state 159

    RIGTHBRAKET     reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    array_elements                 shift and go to state 192
    expression                     shift and go to state 157
    empty                          shift and go to state 158
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 160

    (41) identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .

    COMMA           reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    SEMMICOLOM      reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    PUTS            reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    ID              reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    IF              reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    FOR             reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    WHILE           reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    DEF             reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    CASE            reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    UNTIL           reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    MODULE          reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    CLASS           reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    FUNCTIONS       reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    $end            reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    END             reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    ELSE            reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    ELSIF           reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    WHEN            reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)
    RETURN          reduce using rule 41 (identifierDecl -> ID assignment FUNCTIONS QUESTIONMARK .)


state 161

    (42) identifierDecl -> ID assignment FUNCTIONS LEFTPARENT . NUMBER RIGTHPARENT

    NUMBER          shift and go to state 193


state 162

    (73) statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .

    PUTS            reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    ID              reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    IF              reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    FOR             reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    WHILE           reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    DEF             reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    CASE            reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    UNTIL           reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    MODULE          reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    CLASS           reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    FUNCTIONS       reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    $end            reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    END             reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    ELSE            reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    ELSIF           reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    WHEN            reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)
    RETURN          reduce using rule 73 (statement_call_function -> ID LEFTPARENT parameters RIGTHPARENT .)


state 163


    RIGTHPARENT     reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    expression                     shift and go to state 113
    parameters                     shift and go to state 194
    empty                          shift and go to state 114
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 164

    RIGTHPARENT     reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    parameters                     shift and go to state 195
    expression                     shift and go to state 113
    empty                          shift and go to state 114
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 165

    (43) identifierDecl -> identifierDecl COMMA ID assignment . LEFTBRACKET array_elements RIGTHBRAKET

    LEFTBRACKET     shift and go to state 196


state 166

    ID              shift and go to state 99
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 100

    expression_number              shift and go to state 197

state 167

    STRING          shift and go to state 42
    LEFTPARENT      shift and go to state 147

    expression_string              shift and go to state 198

state 168

    RIGTHPARENT     shift and go to state 153
    MULTIPLICATION  shift and go to state 94


state 169

    ID              shift and go to state 64
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    LEFTPARENT      shift and go to state 65
    STRING          shift and go to state 42
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40

    expression_boolean             shift and go to state 199
    expression_string              shift and go to state 66
    expression_number              shift and go to state 67

state 170

    (74) statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .

    PUTS            reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    ID              reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    IF              reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    FOR             reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    WHILE           reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    DEF             reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    CASE            reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    UNTIL           reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    MODULE          reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    CLASS           reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    FUNCTIONS       reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    $end            reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    END             reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    ELSE            reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    ELSIF           reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    WHEN            reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)
    RETURN          reduce using rule 74 (statement_function_ruby -> FUNCTIONS LEFTPARENT parameters RIGTHPARENT .)


state 171

    (50) statement_if -> IF expression_boolean statement_list END .

    PUTS            reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    ID              reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    IF              reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    FOR             reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    WHILE           reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    DEF             reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    CASE            reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    UNTIL           reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    MODULE          reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    CLASS           reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    FUNCTIONS       reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    $end            reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    END             reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    ELSE            reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    ELSIF           reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    WHEN            reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)
    RETURN          reduce using rule 50 (statement_if -> IF expression_boolean statement_list END .)


state 172


  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 200
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 173

    (52) statement_if -> IF expression_boolean statement_list elsif_list .

    PUTS            reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    ID              reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    IF              reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    FOR             reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    WHILE           reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    DEF             reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    CASE            reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    UNTIL           reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    MODULE          reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    CLASS           reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    FUNCTIONS       reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    $end            reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    END             reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    ELSE            reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    ELSIF           reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    WHEN            reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)
    RETURN          reduce using rule 52 (statement_if -> IF expression_boolean statement_list elsif_list .)


state 174


    ID              shift and go to state 64
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44
    LEFTPARENT      shift and go to state 65
    STRING          shift and go to state 42
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40

    expression_boolean             shift and go to state 201
    expression_string              shift and go to state 66
    expression_number              shift and go to state 67

state 175

    (97) expression_boolean -> ID LEFTPARENT parameters . RIGTHPARENT
    (93) expression_number -> ID LEFTPARENT parameters . RIGTHPARENT

    RIGTHPARENT     shift and go to state 202


state 176


  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 203
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 177

    (57) statement_for -> FOR ID IN NUMBER . DOUBLEDOT NUMBER statement_list END

    DOUBLEDOT       shift and go to state 204


state 178


    RIGTHBRAKET     reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    array_elements                 shift and go to state 205
    expression                     shift and go to state 157
    empty                          shift and go to state 158
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 179

    END             shift and go to state 206
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 180

    (60) statement_while -> WHILE expression_boolean statement_list END .

    PUTS            reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    ID              reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    IF              reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    FOR             reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    WHILE           reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    DEF             reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    CASE            reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    UNTIL           reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    MODULE          reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    CLASS           reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    FUNCTIONS       reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    $end            reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    END             reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    ELSE            reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    ELSIF           reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    WHEN            reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)
    RETURN          reduce using rule 60 (statement_while -> WHILE expression_boolean statement_list END .)


state 181


    RIGTHPARENT     shift and go to state 207


state 182

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    WHEN            reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 208
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 183

    END             shift and go to state 209
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 184

    (62) statement_until -> UNTIL expression_boolean statement_list END .

    PUTS            reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    ID              reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    IF              reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    FOR             reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    WHILE           reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    DEF             reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    CASE            reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    UNTIL           reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    MODULE          reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    CLASS           reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    FUNCTIONS       reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    $end            reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    END             reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    ELSE            reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    ELSIF           reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    WHEN            reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)
    RETURN          reduce using rule 62 (statement_until -> UNTIL expression_boolean statement_list END .)


state 185

    (70) statement_module -> MODULE ID statement_list END .

    PUTS            reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    ID              reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    IF              reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    FOR             reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    WHILE           reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    DEF             reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    CASE            reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    UNTIL           reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    MODULE          reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    CLASS           reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    FUNCTIONS       reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    $end            reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    END             reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    ELSE            reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    ELSIF           reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    WHEN            reduce using rule 70 (statement_module -> MODULE ID statement_list END .)
    RETURN          reduce using rule 70 (statement_module -> MODULE ID statement_list END .)


state 186

    PUTS            reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    ID              reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    IF              reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    FOR             reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    WHILE           reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    DEF             reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    CASE            reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    UNTIL           reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    MODULE          reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    CLASS           reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    FUNCTIONS       reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    $end            reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    END             reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    ELSE            reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    ELSIF           reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    WHEN            reduce using rule 71 (statement_class -> CLASS ID statement_list END .)
    RETURN          reduce using rule 71 (statement_class -> CLASS ID statement_list END .)


state 187

  ! reduce/reduce conflict for LESSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for LEQSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for GTRSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for GEQSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for DOUBLEQUAL resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for DIFERENTEQUAL resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for AND resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for OR resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ORSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for PUTS resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ID resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for IF resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for FOR resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for WHILE resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for DEF resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for CASE resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for MODULE resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for CLASS resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for FUNCTIONS resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for $end resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for END resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ELSE resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ELSIF resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for WHEN resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for RETURN resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for RIGTHPARENT resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for COMMA resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for SEMMICOLOM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for RIGTHBRAKET resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for KEYRIGHT resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    SUM             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MINUS           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MULTIPLICATION  reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DIVISION        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    PERCENT         reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    SQUAREROOT      reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    EXPONENT        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    LESSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    LEQSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    GTRSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    GEQSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DOUBLEQUAL      reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DIFERENTEQUAL   reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    AND             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ANDSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    OR              reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ORSYM           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    PUTS            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ID              reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    IF              reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    FOR             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    WHILE           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DEF             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    CASE            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    UNTIL           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MODULE          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    CLASS           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    FUNCTIONS       reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    $end            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    END             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ELSE            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ELSIF           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    WHEN            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    RETURN          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    RIGTHPARENT     reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    COMMA           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    SEMMICOLOM      reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    RIGTHBRAKET     reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    KEYRIGHT        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)

  ! LESSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! LEQSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! GTRSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! GEQSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! DOUBLEQUAL      [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! DIFERENTEQUAL   [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! AND             [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ANDSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! OR              [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ORSYM           [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! PUTS            [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ID              [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! IF              [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! FOR             [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! WHILE           [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! DEF             [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! CASE            [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! UNTIL           [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! MODULE          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! CLASS           [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! FUNCTIONS       [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! $end            [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! END             [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ELSE            [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ELSIF           [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! WHEN            [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! RETURN          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! RIGTHPARENT     [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! COMMA           [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! SEMMICOLOM      [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! RIGTHBRAKET     [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! KEYRIGHT        [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]


state 188


    RIGTHPARENT     shift and go to state 210


state 189

    RIGTHPARENT     shift and go to state 211


state 190

    COMMA           reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    SEMMICOLOM      reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    PUTS            reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    ID              reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    IF              reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    FOR             reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    WHILE           reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    DEF             reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    CASE            reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    UNTIL           reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    MODULE          reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    CLASS           reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    FUNCTIONS       reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    $end            reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    END             reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    ELSE            reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    ELSIF           reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    WHEN            reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    RETURN          reduce using rule 38 (identifierDecl -> ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)


state 191

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    expression_number              shift and go to state 212
    expression_string              shift and go to state 213
    expression_boolean             shift and go to state 214

state 192

    RIGTHBRAKET     shift and go to state 215
    COMMA           shift and go to state 191


state 193

    (42) identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER . RIGTHPARENT

    RIGTHPARENT     shift and go to state 216


state 194

    (76) parameters -> expression COMMA parameters .

    RIGTHPARENT     reduce using rule 76 (parameters -> expression COMMA parameters .)


state 195

    (65) statement_def -> ID ASIGN ARROW LEFTPARENT parameters . RIGTHPARENT KEYLEFT expression KEYRIGHT

    RIGTHPARENT     shift and go to state 217


state 196

    RIGTHBRAKET     reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    array_elements                 shift and go to state 218
    expression                     shift and go to state 157
    empty                          shift and go to state 158
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 197

    COMMA           reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    SEMMICOLOM      reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    PUTS            reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    ID              reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    IF              reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    FOR             reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    WHILE           reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    DEF             reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    CASE            reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    UNTIL           reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    MODULE          reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    CLASS           reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    FUNCTIONS       reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    $end            reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    END             reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    ELSE            reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    ELSIF           reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    WHEN            reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    RETURN          reduce using rule 33 (expression_number_list -> expression_number_list COMMA expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83

    operator_arithmetic            shift and go to state 75

state 198

    (35) expression_string_list -> expression_string_list COMMA expression_string .
    (101) expression_string -> expression_string . MULTIPLICATION expression_number

    COMMA           reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    SEMMICOLOM      reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    PUTS            reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    ID              reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    IF              reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    FOR             reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    WHILE           reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    DEF             reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    CASE            reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    UNTIL           reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    MODULE          reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    CLASS           reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    FUNCTIONS       reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    $end            reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    END             reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    ELSE            reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    ELSIF           reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    WHEN            reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    RETURN          reduce using rule 35 (expression_string_list -> expression_string_list COMMA expression_string .)
    MULTIPLICATION  shift and go to state 94


state 199


    COMMA           reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    SEMMICOLOM      reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    PUTS            reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    ID              reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    IF              reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    FOR             reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    WHILE           reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    DEF             reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    CASE            reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    UNTIL           reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    MODULE          reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    CLASS           reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    FUNCTIONS       reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    $end            reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    END             reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    ELSE            reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    ELSIF           reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    WHEN            reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    RETURN          reduce using rule 37 (expression_boolean_list -> expression_boolean_list COMMA expression_boolean .)
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 96

state 200

    END             shift and go to state 219
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 201

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93
    END             reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    ELSIF           reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 220
    relation                       shift and go to state 96
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 202

  ! reduce/reduce conflict for LESSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for LEQSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for GTRSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for GEQSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for DOUBLEQUAL resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for DIFERENTEQUAL resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for AND resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ANDSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for OR resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ORSYM resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for RIGTHPARENT resolved using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    PUTS            reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    ID              reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    IF              reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    FOR             reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    WHILE           reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    DEF             reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    CASE            reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    UNTIL           reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    MODULE          reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    CLASS           reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    FUNCTIONS       reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    END             reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    ELSE            reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    ELSIF           reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    DO              reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    $end            reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    WHEN            reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    RETURN          reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    COMMA           reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    SEMMICOLOM      reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    RIGTHBRAKET     reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    KEYRIGHT        reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .)
    LESSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    LEQSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    GTRSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    GEQSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DOUBLEQUAL      reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DIFERENTEQUAL   reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    AND             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ANDSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    OR              reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ORSYM           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    SUM             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MINUS           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MULTIPLICATION  reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DIVISION        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    PERCENT         reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    SQUAREROOT      reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    EXPONENT        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    RIGTHPARENT     reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)

  ! LESSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! LEQSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! GTRSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! GEQSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! DOUBLEQUAL      [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! DIFERENTEQUAL   [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! AND             [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ANDSYM          [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! OR              [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ORSYM           [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! RIGTHPARENT     [ reduce using rule 97 (expression_boolean -> ID LEFTPARENT parameters RIGTHPARENT .) ]


state 203

    END             shift and go to state 221
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 204

    (57) statement_for -> FOR ID IN NUMBER DOUBLEDOT . NUMBER statement_list END

    NUMBER          shift and go to state 222


state 205

    (58) statement_for -> FOR ID IN LEFTBRACKET array_elements . RIGTHBRAKET statement_list END
    (47) array_elements -> array_elements . COMMA expression_number
    (48) array_elements -> array_elements . COMMA expression_string
    (49) array_elements -> array_elements . COMMA expression_boolean

    RIGTHBRAKET     shift and go to state 223
    COMMA           shift and go to state 191


state 206

    (59) statement_while -> WHILE expression_boolean DO statement_list END .

    PUTS            reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    ID              reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    IF              reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    FOR             reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    WHILE           reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    DEF             reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    CASE            reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    UNTIL           reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    MODULE          reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    CLASS           reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    FUNCTIONS       reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    $end            reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    END             reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    ELSE            reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    ELSIF           reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    WHEN            reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)
    RETURN          reduce using rule 59 (statement_while -> WHILE expression_boolean DO statement_list END .)


state 207

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 224
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 208

    END             shift and go to state 225
    ELSE            shift and go to state 226
    WHEN            shift and go to state 138
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    when_list                      shift and go to state 227
    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 209

    (61) statement_until -> UNTIL expression_boolean DO statement_list END .

    PUTS            reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    ID              reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    IF              reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    FOR             reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    WHILE           reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    DEF             reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    CASE            reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    UNTIL           reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    MODULE          reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    CLASS           reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    FUNCTIONS       reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    $end            reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    END             reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    ELSE            reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    ELSIF           reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    WHEN            reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)
    RETURN          reduce using rule 61 (statement_until -> UNTIL expression_boolean DO statement_list END .)


state 210

    (93) expression_number -> ID LEFTPARENT parameters RIGTHPARENT .

    SUM             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MINUS           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MULTIPLICATION  reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DIVISION        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    PERCENT         reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    SQUAREROOT      reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    EXPONENT        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    LESSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    LEQSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    GTRSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    GEQSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DOUBLEQUAL      reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DIFERENTEQUAL   reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    AND             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ANDSYM          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    OR              reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ORSYM           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    PUTS            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ID              reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    IF              reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    FOR             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    WHILE           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DEF             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    CASE            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    UNTIL           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MODULE          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    CLASS           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    FUNCTIONS       reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    $end            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    END             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ELSE            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    ELSIF           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    WHEN            reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    RETURN          reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    RIGTHPARENT     reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    COMMA           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    SEMMICOLOM      reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DO              reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    RIGTHBRAKET     reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    KEYRIGHT        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)


state 211

  ! reduce/reduce conflict for COMMA resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for SEMMICOLOM resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for PUTS resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ID resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for IF resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for FOR resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for DEF resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for CASE resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for MODULE resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for CLASS resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for FUNCTIONS resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for $end resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for END resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ELSE resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for ELSIF resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for WHEN resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
  ! reduce/reduce conflict for RETURN resolved using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    COMMA           reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    SEMMICOLOM      reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    PUTS            reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    ID              reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    IF              reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    FOR             reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    WHILE           reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    DEF             reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    CASE            reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    UNTIL           reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    MODULE          reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    CLASS           reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    FUNCTIONS       reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    $end            reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    END             reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    ELSE            reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    ELSIF           reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    WHEN            reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    RETURN          reduce using rule 23 (identifierDecl -> ID assignment_number ID LEFTPARENT parameters RIGTHPARENT .)
    SUM             reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MINUS           reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    MULTIPLICATION  reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    DIVISION        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    PERCENT         reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    SQUAREROOT      reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)
    EXPONENT        reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .)

  ! COMMA           [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! SEMMICOLOM      [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! PUTS            [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ID              [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! IF              [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! FOR             [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! WHILE           [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! DEF             [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! CASE            [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! UNTIL           [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! MODULE          [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! CLASS           [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! FUNCTIONS       [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! $end            [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! END             [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ELSE            [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! ELSIF           [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! WHEN            [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]
  ! RETURN          [ reduce using rule 93 (expression_number -> ID LEFTPARENT parameters RIGTHPARENT .) ]


state 212


    RIGTHBRAKET     reduce using rule 47 (array_elements -> array_elements COMMA expression_number .)
    COMMA           reduce using rule 47 (array_elements -> array_elements COMMA expression_number .)
    SUM             shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLICATION  shift and go to state 79
    DIVISION        shift and go to state 80
    PERCENT         shift and go to state 81
    SQUAREROOT      shift and go to state 82
    EXPONENT        shift and go to state 83
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    operator_arithmetic            shift and go to state 75
    relation                       shift and go to state 76

state 213

    RIGTHBRAKET     reduce using rule 48 (array_elements -> array_elements COMMA expression_string .)
    COMMA           reduce using rule 48 (array_elements -> array_elements COMMA expression_string .)
    MULTIPLICATION  shift and go to state 94
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 95

state 214

    RIGTHBRAKET     reduce using rule 49 (array_elements -> array_elements COMMA expression_boolean .)
    COMMA           reduce using rule 49 (array_elements -> array_elements COMMA expression_boolean .)
    LESSYM          shift and go to state 84
    LEQSYM          shift and go to state 85
    GTRSYM          shift and go to state 86
    GEQSYM          shift and go to state 87
    DOUBLEQUAL      shift and go to state 88
    DIFERENTEQUAL   shift and go to state 89
    AND             shift and go to state 90
    ANDSYM          shift and go to state 91
    OR              shift and go to state 92
    ORSYM           shift and go to state 93

    relation                       shift and go to state 96

state 215

    (39) identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .

    COMMA           reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    SEMMICOLOM      reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    PUTS            reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    ID              reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    IF              reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    FOR             reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    WHILE           reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    DEF             reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    CASE            reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    UNTIL           reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    MODULE          reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    CLASS           reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    FUNCTIONS       reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    $end            reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    END             reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    ELSE            reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    ELSIF           reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    WHEN            reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)
    RETURN          reduce using rule 39 (identifierDecl -> ID assignment FUNCTIONS LEFTBRACKET array_elements RIGTHBRAKET .)


state 216

    (42) identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .

    COMMA           reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    SEMMICOLOM      reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    PUTS            reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    ID              reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    IF              reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    FOR             reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    WHILE           reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    DEF             reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    CASE            reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    UNTIL           reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    MODULE          reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    CLASS           reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    FUNCTIONS       reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    $end            reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    END             reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    ELSE            reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    ELSIF           reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    WHEN            reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)
    RETURN          reduce using rule 42 (identifierDecl -> ID assignment FUNCTIONS LEFTPARENT NUMBER RIGTHPARENT .)


state 217

    (65) statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT . KEYLEFT expression KEYRIGHT

    KEYLEFT         shift and go to state 228


state 218

    (43) identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements . RIGTHBRAKET
    (47) array_elements -> array_elements . COMMA expression_number
    (48) array_elements -> array_elements . COMMA expression_string
    (49) array_elements -> array_elements . COMMA expression_boolean

    RIGTHBRAKET     shift and go to state 229
    COMMA           shift and go to state 191


state 219

    (51) statement_if -> IF expression_boolean statement_list ELSE statement_list END .

    PUTS            reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    ID              reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    IF              reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    FOR             reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    WHILE           reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    DEF             reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    CASE            reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    MODULE          reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    CLASS           reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    FUNCTIONS       reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    $end            reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    END             reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    ELSE            reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    ELSIF           reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    WHEN            reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)
    RETURN          reduce using rule 51 (statement_if -> IF expression_boolean statement_list ELSE statement_list END .)


state 220

    END             shift and go to state 230
    ELSE            shift and go to state 231
    ELSIF           shift and go to state 174
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    elsif_list                     shift and go to state 232
    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 221

    (56) statement_for -> FOR ID IN ID statement_list END .

    PUTS            reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    ID              reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    IF              reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    FOR             reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    WHILE           reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    DEF             reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    CASE            reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    UNTIL           reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    MODULE          reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    CLASS           reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    FUNCTIONS       reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    $end            reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    END             reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    ELSE            reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    ELSIF           reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    WHEN            reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)
    RETURN          reduce using rule 56 (statement_for -> FOR ID IN ID statement_list END .)


state 222

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 233
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 223

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 234
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 224

    END             shift and go to state 235
    RETURN          shift and go to state 236
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 225

    (67) when_list -> WHEN expression statement_list END .

    PUTS            reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    ID              reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    IF              reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    FOR             reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    WHILE           reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    DEF             reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    CASE            reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    UNTIL           reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    MODULE          reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    CLASS           reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    FUNCTIONS       reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    $end            reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    END             reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    ELSE            reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    ELSIF           reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    WHEN            reduce using rule 67 (when_list -> WHEN expression statement_list END .)
    RETURN          reduce using rule 67 (when_list -> WHEN expression statement_list END .)


state 226

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 237
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 227

    (69) when_list -> WHEN expression statement_list when_list .

    PUTS            reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    ID              reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    IF              reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    FOR             reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    WHILE           reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    DEF             reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    CASE            reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    UNTIL           reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    MODULE          reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    CLASS           reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    FUNCTIONS       reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    $end            reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    END             reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    ELSE            reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    ELSIF           reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    WHEN            reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)
    RETURN          reduce using rule 69 (when_list -> WHEN expression statement_list when_list .)


state 228

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    expression                     shift and go to state 238
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 229

    (43) identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .

    COMMA           reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    SEMMICOLOM      reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    PUTS            reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    ID              reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    IF              reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    FOR             reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    WHILE           reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    DEF             reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    CASE            reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    UNTIL           reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    MODULE          reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    CLASS           reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    FUNCTIONS       reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    $end            reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    END             reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    ELSE            reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    ELSIF           reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    WHEN            reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)
    RETURN          reduce using rule 43 (identifierDecl -> identifierDecl COMMA ID assignment LEFTBRACKET array_elements RIGTHBRAKET .)


state 230

    (53) elsif_list -> ELSIF expression_boolean statement_list END .

    PUTS            reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    ID              reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    IF              reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    FOR             reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    WHILE           reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    DEF             reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    CASE            reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    UNTIL           reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    MODULE          reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    CLASS           reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    FUNCTIONS       reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    $end            reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    END             reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    ELSE            reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    ELSIF           reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    WHEN            reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)
    RETURN          reduce using rule 53 (elsif_list -> ELSIF expression_boolean statement_list END .)


state 231


  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTIONS resolved as shift
    PUTS            shift and go to state 5
    ID              shift and go to state 7
    END             reduce using rule 123 (empty -> .)
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DEF             [ reduce using rule 123 (empty -> .) ]
  ! PUTS            [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! UNTIL           [ reduce using rule 123 (empty -> .) ]
  ! MODULE          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! FUNCTIONS       [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 239
    statement                      shift and go to state 4
    empty                          shift and go to state 6
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 232

    (55) elsif_list -> ELSIF expression_boolean statement_list elsif_list .

    PUTS            reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    ID              reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    IF              reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    FOR             reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    WHILE           reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    DEF             reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    CASE            reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    UNTIL           reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    MODULE          reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    CLASS           reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    FUNCTIONS       reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    $end            reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    END             reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    ELSE            reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    ELSIF           reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    WHEN            reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)
    RETURN          reduce using rule 55 (elsif_list -> ELSIF expression_boolean statement_list elsif_list .)


state 233

    END             shift and go to state 240
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 234

    END             shift and go to state 241
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 235

    (63) statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .

    PUTS            reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    ID              reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    IF              reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    FOR             reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    WHILE           reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    DEF             reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    CASE            reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    UNTIL           reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    MODULE          reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    CLASS           reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    FUNCTIONS       reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    $end            reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    END             reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    ELSE            reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    ELSIF           reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    WHEN            reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)
    RETURN          reduce using rule 63 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list END .)


state 236

    ID              shift and go to state 38
    NUMBER          shift and go to state 39
    MINUS           shift and go to state 40
    LEFTPARENT      shift and go to state 41
    STRING          shift and go to state 42
    BOOLEAN         shift and go to state 43
    ADMIRATION      shift and go to state 44

    expression                     shift and go to state 242
    expression_number              shift and go to state 35
    expression_string              shift and go to state 36
    expression_boolean             shift and go to state 37

state 237

    END             shift and go to state 243
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 238

    (65) statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression . KEYRIGHT

    KEYRIGHT        shift and go to state 244


state 239

    END             shift and go to state 245
    ID              shift and go to state 31
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DEF             shift and go to state 25
    PUTS            shift and go to state 32
    CASE            shift and go to state 26
    UNTIL           shift and go to state 27
    MODULE          shift and go to state 28
    CLASS           shift and go to state 29
    FUNCTIONS       shift and go to state 21

    statement                      shift and go to state 30
    identifierDecl                 shift and go to state 8
    statement_if                   shift and go to state 9
    statement_for                  shift and go to state 10
    statement_while                shift and go to state 11
    statement_def                  shift and go to state 12
    statement_puts                 shift and go to state 13
    statement_case                 shift and go to state 14
    statement_until                shift and go to state 15
    statement_module               shift and go to state 16
    statement_class                shift and go to state 17
    statement_call_function        shift and go to state 18
    statement_function_ruby        shift and go to state 19
    identifierList                 shift and go to state 20

state 240

    (57) statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .

    PUTS            reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    ID              reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    IF              reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    FOR             reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    WHILE           reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    DEF             reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    CASE            reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    UNTIL           reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    MODULE          reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    CLASS           reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    FUNCTIONS       reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    $end            reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    END             reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    ELSE            reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    ELSIF           reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    WHEN            reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)
    RETURN          reduce using rule 57 (statement_for -> FOR ID IN NUMBER DOUBLEDOT NUMBER statement_list END .)


state 241

    (58) statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .

    PUTS            reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    ID              reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    IF              reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    FOR             reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    WHILE           reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    DEF             reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    CASE            reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    UNTIL           reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    MODULE          reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    CLASS           reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    FUNCTIONS       reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    $end            reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    END             reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    ELSE            reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    ELSIF           reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    WHEN            reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)
    RETURN          reduce using rule 58 (statement_for -> FOR ID IN LEFTBRACKET array_elements RIGTHBRAKET statement_list END .)


state 242

    (64) statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression . END

    END             shift and go to state 246


state 243

    (68) when_list -> WHEN expression statement_list ELSE statement_list END .

    PUTS            reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    ID              reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    IF              reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    FOR             reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    WHILE           reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    DEF             reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    CASE            reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    MODULE          reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    CLASS           reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    FUNCTIONS       reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    $end            reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    END             reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    ELSE            reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    ELSIF           reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    WHEN            reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)
    RETURN          reduce using rule 68 (when_list -> WHEN expression statement_list ELSE statement_list END .)


state 244

    (65) statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .

    PUTS            reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    ID              reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    IF              reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    FOR             reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    WHILE           reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    DEF             reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    CASE            reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    UNTIL           reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    MODULE          reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    CLASS           reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    FUNCTIONS       reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    $end            reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    END             reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    ELSE            reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    ELSIF           reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    WHEN            reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)
    RETURN          reduce using rule 65 (statement_def -> ID ASIGN ARROW LEFTPARENT parameters RIGTHPARENT KEYLEFT expression KEYRIGHT .)


state 245

    (54) elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .

    PUTS            reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    ID              reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    IF              reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    FOR             reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    WHILE           reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    DEF             reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    CASE            reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    UNTIL           reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    MODULE          reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    CLASS           reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    FUNCTIONS       reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    $end            reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    END             reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    ELSE            reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    ELSIF           reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    WHEN            reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)
    RETURN          reduce using rule 54 (elsif_list -> ELSIF expression_boolean statement_list ELSE statement_list END .)


state 246

    (64) statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .

    PUTS            reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    ID              reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    IF              reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    FOR             reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    WHILE           reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    DEF             reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    CASE            reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    UNTIL           reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    MODULE          reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    CLASS           reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    FUNCTIONS       reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    $end            reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    END             reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    ELSE            reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    ELSIF           reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    WHEN            reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
    RETURN          reduce using rule 64 (statement_def -> DEF ID LEFTPARENT parameters RIGTHPARENT statement_list RETURN expression END .)
